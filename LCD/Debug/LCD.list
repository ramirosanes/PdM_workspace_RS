
LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bec  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08002d98  08002d98  00003d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002df0  08002df0  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002df0  08002df0  00003df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002df8  08002df8  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002df8  08002df8  00003df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002dfc  08002dfc  00003dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002e00  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000400c  2**0
                  CONTENTS
 10 .bss          000000b4  2000000c  2000000c  0000400c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000c0  200000c0  0000400c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000085cf  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b6a  00000000  00000000  0000c60b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008f8  00000000  00000000  0000e178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006c4  00000000  00000000  0000ea70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002337e  00000000  00000000  0000f134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ba77  00000000  00000000  000324b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1fcb  00000000  00000000  0003df29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010fef4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000022d0  00000000  00000000  0010ff38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  00112208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08002d80 	.word	0x08002d80

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08002d80 	.word	0x08002d80

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <debounceFSM_init>:
#define DEBOUNCE 40

static debounceFSM_t debounceFSM;

void debounceFSM_init()
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	debounceFSM.state = BUTTON_UP;
 80004e0:	4b07      	ldr	r3, [pc, #28]	@ (8000500 <debounceFSM_init+0x24>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	701a      	strb	r2, [r3, #0]
	debounceFSM.wasPressed = false;
 80004e6:	4b06      	ldr	r3, [pc, #24]	@ (8000500 <debounceFSM_init+0x24>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	751a      	strb	r2, [r3, #20]
	delayInit(&debounceFSM.debounceTimer);
 80004ec:	4805      	ldr	r0, [pc, #20]	@ (8000504 <debounceFSM_init+0x28>)
 80004ee:	f000 f88b 	bl	8000608 <delayInit>
	delayWrite(&debounceFSM.debounceTimer, DEBOUNCE);
 80004f2:	2128      	movs	r1, #40	@ 0x28
 80004f4:	4803      	ldr	r0, [pc, #12]	@ (8000504 <debounceFSM_init+0x28>)
 80004f6:	f000 f8a2 	bl	800063e <delayWrite>
}
 80004fa:	bf00      	nop
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	20000028 	.word	0x20000028
 8000504:	2000002c 	.word	0x2000002c

08000508 <debounceFSM_update>:

void debounceFSM_update()
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
	switch (debounceFSM.state) {
 800050c:	4b35      	ldr	r3, [pc, #212]	@ (80005e4 <debounceFSM_update+0xdc>)
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	2b03      	cmp	r3, #3
 8000512:	d85c      	bhi.n	80005ce <debounceFSM_update+0xc6>
 8000514:	a201      	add	r2, pc, #4	@ (adr r2, 800051c <debounceFSM_update+0x14>)
 8000516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800051a:	bf00      	nop
 800051c:	0800052d 	.word	0x0800052d
 8000520:	08000575 	.word	0x08000575
 8000524:	08000551 	.word	0x08000551
 8000528:	080005a1 	.word	0x080005a1

	case BUTTON_UP:

		debounceFSM.wasPressed = false;
 800052c:	4b2d      	ldr	r3, [pc, #180]	@ (80005e4 <debounceFSM_update+0xdc>)
 800052e:	2200      	movs	r2, #0
 8000530:	751a      	strb	r2, [r3, #20]
		if (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin)) {
 8000532:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000536:	482c      	ldr	r0, [pc, #176]	@ (80005e8 <debounceFSM_update+0xe0>)
 8000538:	f001 f9e0 	bl	80018fc <HAL_GPIO_ReadPin>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d046      	beq.n	80005d0 <debounceFSM_update+0xc8>
			debounceFSM.state = BUTTON_FALLING;
 8000542:	4b28      	ldr	r3, [pc, #160]	@ (80005e4 <debounceFSM_update+0xdc>)
 8000544:	2201      	movs	r2, #1
 8000546:	701a      	strb	r2, [r3, #0]
			delayStart(&debounceFSM.debounceTimer);
 8000548:	4828      	ldr	r0, [pc, #160]	@ (80005ec <debounceFSM_update+0xe4>)
 800054a:	f000 f886 	bl	800065a <delayStart>
		}

		break;
 800054e:	e03f      	b.n	80005d0 <debounceFSM_update+0xc8>

	case BUTTON_DOWN:

		debounceFSM.wasPressed = true;
 8000550:	4b24      	ldr	r3, [pc, #144]	@ (80005e4 <debounceFSM_update+0xdc>)
 8000552:	2201      	movs	r2, #1
 8000554:	751a      	strb	r2, [r3, #20]
		if (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin)) {
 8000556:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800055a:	4823      	ldr	r0, [pc, #140]	@ (80005e8 <debounceFSM_update+0xe0>)
 800055c:	f001 f9ce 	bl	80018fc <HAL_GPIO_ReadPin>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d036      	beq.n	80005d4 <debounceFSM_update+0xcc>
			debounceFSM.state = BUTTON_RISING;
 8000566:	4b1f      	ldr	r3, [pc, #124]	@ (80005e4 <debounceFSM_update+0xdc>)
 8000568:	2203      	movs	r2, #3
 800056a:	701a      	strb	r2, [r3, #0]
			delayStart(&debounceFSM.debounceTimer);
 800056c:	481f      	ldr	r0, [pc, #124]	@ (80005ec <debounceFSM_update+0xe4>)
 800056e:	f000 f874 	bl	800065a <delayStart>
		}
		break;
 8000572:	e02f      	b.n	80005d4 <debounceFSM_update+0xcc>

	case BUTTON_FALLING:

		if (delayRead(&debounceFSM.debounceTimer)) {
 8000574:	481d      	ldr	r0, [pc, #116]	@ (80005ec <debounceFSM_update+0xe4>)
 8000576:	f000 f887 	bl	8000688 <delayRead>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d02b      	beq.n	80005d8 <debounceFSM_update+0xd0>

			if (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin)) {
 8000580:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000584:	4818      	ldr	r0, [pc, #96]	@ (80005e8 <debounceFSM_update+0xe0>)
 8000586:	f001 f9b9 	bl	80018fc <HAL_GPIO_ReadPin>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d003      	beq.n	8000598 <debounceFSM_update+0x90>
				debounceFSM.state = BUTTON_DOWN;
 8000590:	4b14      	ldr	r3, [pc, #80]	@ (80005e4 <debounceFSM_update+0xdc>)
 8000592:	2202      	movs	r2, #2
 8000594:	701a      	strb	r2, [r3, #0]
				break;
 8000596:	e022      	b.n	80005de <debounceFSM_update+0xd6>
			} else {
				debounceFSM.state = BUTTON_UP;
 8000598:	4b12      	ldr	r3, [pc, #72]	@ (80005e4 <debounceFSM_update+0xdc>)
 800059a:	2200      	movs	r2, #0
 800059c:	701a      	strb	r2, [r3, #0]
				break;
 800059e:	e01e      	b.n	80005de <debounceFSM_update+0xd6>

		break;

	case BUTTON_RISING:

		if (delayRead(&debounceFSM.debounceTimer)) {
 80005a0:	4812      	ldr	r0, [pc, #72]	@ (80005ec <debounceFSM_update+0xe4>)
 80005a2:	f000 f871 	bl	8000688 <delayRead>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d017      	beq.n	80005dc <debounceFSM_update+0xd4>

			if (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin)) {
 80005ac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005b0:	480d      	ldr	r0, [pc, #52]	@ (80005e8 <debounceFSM_update+0xe0>)
 80005b2:	f001 f9a3 	bl	80018fc <HAL_GPIO_ReadPin>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d003      	beq.n	80005c4 <debounceFSM_update+0xbc>
				debounceFSM.state = BUTTON_DOWN;
 80005bc:	4b09      	ldr	r3, [pc, #36]	@ (80005e4 <debounceFSM_update+0xdc>)
 80005be:	2202      	movs	r2, #2
 80005c0:	701a      	strb	r2, [r3, #0]
				break;
 80005c2:	e00c      	b.n	80005de <debounceFSM_update+0xd6>
			} else {
				debounceFSM.state = BUTTON_UP;
 80005c4:	4b07      	ldr	r3, [pc, #28]	@ (80005e4 <debounceFSM_update+0xdc>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	701a      	strb	r2, [r3, #0]
				break;
 80005ca:	e008      	b.n	80005de <debounceFSM_update+0xd6>
 80005cc:	e7ff      	b.n	80005ce <debounceFSM_update+0xc6>

		break;

	default:

		while(1) {
 80005ce:	e7fd      	b.n	80005cc <debounceFSM_update+0xc4>
		break;
 80005d0:	bf00      	nop
 80005d2:	e004      	b.n	80005de <debounceFSM_update+0xd6>
		break;
 80005d4:	bf00      	nop
 80005d6:	e002      	b.n	80005de <debounceFSM_update+0xd6>
		break;
 80005d8:	bf00      	nop
 80005da:	e000      	b.n	80005de <debounceFSM_update+0xd6>
		break;
 80005dc:	bf00      	nop
			//me encantaría ver cómo podriamos terminar acá
		}

		break;
	}
}
 80005de:	bf00      	nop
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	20000028 	.word	0x20000028
 80005e8:	40020800 	.word	0x40020800
 80005ec:	2000002c 	.word	0x2000002c

080005f0 <readKey>:

bool_t readKey()
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
	return debounceFSM.wasPressed;
 80005f4:	4b03      	ldr	r3, [pc, #12]	@ (8000604 <readKey+0x14>)
 80005f6:	7d1b      	ldrb	r3, [r3, #20]
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	20000028 	.word	0x20000028

08000608 <delayInit>:
#include "API_delay.h"

void delayInit(delay_t *delay)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]

	delay->duration = 0;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	2200      	movs	r2, #0
 8000614:	609a      	str	r2, [r3, #8]
	delay->startTime = HAL_GetTick();
 8000616:	f000 fed3 	bl	80013c0 <HAL_GetTick>
 800061a:	4602      	mov	r2, r0
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	601a      	str	r2, [r3, #0]
	delay->elapsedTime = (HAL_GetTick() - delay->startTime);
 8000620:	f000 fece 	bl	80013c0 <HAL_GetTick>
 8000624:	4602      	mov	r2, r0
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	1ad2      	subs	r2, r2, r3
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	605a      	str	r2, [r3, #4]
	delay->running = false;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	2200      	movs	r2, #0
 8000634:	731a      	strb	r2, [r3, #12]

}
 8000636:	bf00      	nop
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}

0800063e <delayWrite>:

void delayWrite(delay_t *delay, tick_t duration)
{
 800063e:	b480      	push	{r7}
 8000640:	b083      	sub	sp, #12
 8000642:	af00      	add	r7, sp, #0
 8000644:	6078      	str	r0, [r7, #4]
 8000646:	6039      	str	r1, [r7, #0]
	delay->duration = duration;
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	683a      	ldr	r2, [r7, #0]
 800064c:	609a      	str	r2, [r3, #8]
}
 800064e:	bf00      	nop
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr

0800065a <delayStart>:

void delayStart(delay_t *delay)
{
 800065a:	b580      	push	{r7, lr}
 800065c:	b082      	sub	sp, #8
 800065e:	af00      	add	r7, sp, #0
 8000660:	6078      	str	r0, [r7, #4]

	if (!(delay->running)) {
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	7b1b      	ldrb	r3, [r3, #12]
 8000666:	f083 0301 	eor.w	r3, r3, #1
 800066a:	b2db      	uxtb	r3, r3
 800066c:	2b00      	cmp	r3, #0
 800066e:	d007      	beq.n	8000680 <delayStart+0x26>
		delay->startTime = HAL_GetTick();
 8000670:	f000 fea6 	bl	80013c0 <HAL_GetTick>
 8000674:	4602      	mov	r2, r0
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	601a      	str	r2, [r3, #0]
		delay->running = true;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	2201      	movs	r2, #1
 800067e:	731a      	strb	r2, [r3, #12]
	}

}
 8000680:	bf00      	nop
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}

08000688 <delayRead>:

bool_t delayRead(delay_t *delay)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]

	delay->elapsedTime = HAL_GetTick() - delay->startTime;
 8000690:	f000 fe96 	bl	80013c0 <HAL_GetTick>
 8000694:	4602      	mov	r2, r0
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	1ad2      	subs	r2, r2, r3
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	605a      	str	r2, [r3, #4]
	bool_t timeOut = delay->elapsedTime >= delay->duration;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	685a      	ldr	r2, [r3, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	689b      	ldr	r3, [r3, #8]
 80006a8:	429a      	cmp	r2, r3
 80006aa:	bf2c      	ite	cs
 80006ac:	2301      	movcs	r3, #1
 80006ae:	2300      	movcc	r3, #0
 80006b0:	73fb      	strb	r3, [r7, #15]

	if (delayIsRunning(delay) && timeOut) {
 80006b2:	6878      	ldr	r0, [r7, #4]
 80006b4:	f000 f80e 	bl	80006d4 <delayIsRunning>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d005      	beq.n	80006ca <delayRead+0x42>
 80006be:	7bfb      	ldrb	r3, [r7, #15]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d002      	beq.n	80006ca <delayRead+0x42>
		delay->running = false;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	2200      	movs	r2, #0
 80006c8:	731a      	strb	r2, [r3, #12]
	}

	return timeOut;
 80006ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	3710      	adds	r7, #16
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <delayIsRunning>:

bool_t delayIsRunning(delay_t *delay)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
	return delay->running;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	7b1b      	ldrb	r3, [r3, #12]
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	370c      	adds	r7, #12
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr

080006ec <I2C_LCD_ExpanderWrite>:
};

/*---------------------[STATIC INTERNAL FUNCTIONS]-----------------------*/

static void I2C_LCD_ExpanderWrite(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b086      	sub	sp, #24
 80006f0:	af02      	add	r7, sp, #8
 80006f2:	4603      	mov	r3, r0
 80006f4:	460a      	mov	r2, r1
 80006f6:	71fb      	strb	r3, [r7, #7]
 80006f8:	4613      	mov	r3, r2
 80006fa:	71bb      	strb	r3, [r7, #6]
    uint8_t TxData = (DATA) | I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal;
 80006fc:	79fb      	ldrb	r3, [r7, #7]
 80006fe:	4a13      	ldr	r2, [pc, #76]	@ (800074c <I2C_LCD_ExpanderWrite+0x60>)
 8000700:	005b      	lsls	r3, r3, #1
 8000702:	4413      	add	r3, r2
 8000704:	785a      	ldrb	r2, [r3, #1]
 8000706:	79bb      	ldrb	r3, [r7, #6]
 8000708:	4313      	orrs	r3, r2
 800070a:	b2db      	uxtb	r3, r3
 800070c:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_Handle, (I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_Address<<1), &TxData, sizeof(TxData), 100);
 800070e:	79fa      	ldrb	r2, [r7, #7]
 8000710:	490f      	ldr	r1, [pc, #60]	@ (8000750 <I2C_LCD_ExpanderWrite+0x64>)
 8000712:	4613      	mov	r3, r2
 8000714:	005b      	lsls	r3, r3, #1
 8000716:	4413      	add	r3, r2
 8000718:	009b      	lsls	r3, r3, #2
 800071a:	440b      	add	r3, r1
 800071c:	3304      	adds	r3, #4
 800071e:	6818      	ldr	r0, [r3, #0]
 8000720:	79fa      	ldrb	r2, [r7, #7]
 8000722:	490b      	ldr	r1, [pc, #44]	@ (8000750 <I2C_LCD_ExpanderWrite+0x64>)
 8000724:	4613      	mov	r3, r2
 8000726:	005b      	lsls	r3, r3, #1
 8000728:	4413      	add	r3, r2
 800072a:	009b      	lsls	r3, r3, #2
 800072c:	440b      	add	r3, r1
 800072e:	3308      	adds	r3, #8
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	005b      	lsls	r3, r3, #1
 8000734:	b299      	uxth	r1, r3
 8000736:	f107 020f 	add.w	r2, r7, #15
 800073a:	2364      	movs	r3, #100	@ 0x64
 800073c:	9300      	str	r3, [sp, #0]
 800073e:	2301      	movs	r3, #1
 8000740:	f001 fa52 	bl	8001be8 <HAL_I2C_Master_Transmit>
}
 8000744:	bf00      	nop
 8000746:	3710      	adds	r7, #16
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000040 	.word	0x20000040
 8000750:	08002dcc 	.word	0x08002dcc

08000754 <I2C_LCD_EnPulse>:

static void I2C_LCD_EnPulse(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b086      	sub	sp, #24
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	460a      	mov	r2, r1
 800075e:	71fb      	strb	r3, [r7, #7]
 8000760:	4613      	mov	r3, r2
 8000762:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, (DATA | EN)); // En high
 8000764:	79bb      	ldrb	r3, [r7, #6]
 8000766:	f043 0304 	orr.w	r3, r3, #4
 800076a:	b2da      	uxtb	r2, r3
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	4611      	mov	r1, r2
 8000770:	4618      	mov	r0, r3
 8000772:	f7ff ffbb 	bl	80006ec <I2C_LCD_ExpanderWrite>
	DELAY_US(2); // enable pulse must be >450ns
 8000776:	4b22      	ldr	r3, [pc, #136]	@ (8000800 <I2C_LCD_EnPulse+0xac>)
 8000778:	689b      	ldr	r3, [r3, #8]
 800077a:	617b      	str	r3, [r7, #20]
 800077c:	4b21      	ldr	r3, [pc, #132]	@ (8000804 <I2C_LCD_EnPulse+0xb0>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a21      	ldr	r2, [pc, #132]	@ (8000808 <I2C_LCD_EnPulse+0xb4>)
 8000782:	fba2 2303 	umull	r2, r3, r2, r3
 8000786:	0c9b      	lsrs	r3, r3, #18
 8000788:	005a      	lsls	r2, r3, #1
 800078a:	4b1e      	ldr	r3, [pc, #120]	@ (8000804 <I2C_LCD_EnPulse+0xb0>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	491e      	ldr	r1, [pc, #120]	@ (8000808 <I2C_LCD_EnPulse+0xb4>)
 8000790:	fba1 1303 	umull	r1, r3, r1, r3
 8000794:	0c9b      	lsrs	r3, r3, #18
 8000796:	085b      	lsrs	r3, r3, #1
 8000798:	1ad3      	subs	r3, r2, r3
 800079a:	613b      	str	r3, [r7, #16]
 800079c:	4b18      	ldr	r3, [pc, #96]	@ (8000800 <I2C_LCD_EnPulse+0xac>)
 800079e:	689b      	ldr	r3, [r3, #8]
 80007a0:	697a      	ldr	r2, [r7, #20]
 80007a2:	1ad3      	subs	r3, r2, r3
 80007a4:	693a      	ldr	r2, [r7, #16]
 80007a6:	429a      	cmp	r2, r3
 80007a8:	d8f8      	bhi.n	800079c <I2C_LCD_EnPulse+0x48>

    I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, (DATA & ~EN)); // En low
 80007aa:	79bb      	ldrb	r3, [r7, #6]
 80007ac:	f023 0304 	bic.w	r3, r3, #4
 80007b0:	b2da      	uxtb	r2, r3
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	4611      	mov	r1, r2
 80007b6:	4618      	mov	r0, r3
 80007b8:	f7ff ff98 	bl	80006ec <I2C_LCD_ExpanderWrite>
    DELAY_US(50); // commands need > 37us to settle
 80007bc:	4b10      	ldr	r3, [pc, #64]	@ (8000800 <I2C_LCD_EnPulse+0xac>)
 80007be:	689b      	ldr	r3, [r3, #8]
 80007c0:	60fb      	str	r3, [r7, #12]
 80007c2:	4b10      	ldr	r3, [pc, #64]	@ (8000804 <I2C_LCD_EnPulse+0xb0>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4a10      	ldr	r2, [pc, #64]	@ (8000808 <I2C_LCD_EnPulse+0xb4>)
 80007c8:	fba2 2303 	umull	r2, r3, r2, r3
 80007cc:	0c9b      	lsrs	r3, r3, #18
 80007ce:	2232      	movs	r2, #50	@ 0x32
 80007d0:	fb03 f202 	mul.w	r2, r3, r2
 80007d4:	4b0b      	ldr	r3, [pc, #44]	@ (8000804 <I2C_LCD_EnPulse+0xb0>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	490b      	ldr	r1, [pc, #44]	@ (8000808 <I2C_LCD_EnPulse+0xb4>)
 80007da:	fba1 1303 	umull	r1, r3, r1, r3
 80007de:	0c9b      	lsrs	r3, r3, #18
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	1ad3      	subs	r3, r2, r3
 80007e4:	60bb      	str	r3, [r7, #8]
 80007e6:	4b06      	ldr	r3, [pc, #24]	@ (8000800 <I2C_LCD_EnPulse+0xac>)
 80007e8:	689b      	ldr	r3, [r3, #8]
 80007ea:	68fa      	ldr	r2, [r7, #12]
 80007ec:	1ad3      	subs	r3, r2, r3
 80007ee:	68ba      	ldr	r2, [r7, #8]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	d8f8      	bhi.n	80007e6 <I2C_LCD_EnPulse+0x92>
}
 80007f4:	bf00      	nop
 80007f6:	bf00      	nop
 80007f8:	3718      	adds	r7, #24
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	e000e010 	.word	0xe000e010
 8000804:	20000000 	.word	0x20000000
 8000808:	431bde83 	.word	0x431bde83

0800080c <I2C_LCD_Write4Bits>:

static void I2C_LCD_Write4Bits(uint8_t I2C_LCD_InstanceIndex, uint8_t Val)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	460a      	mov	r2, r1
 8000816:	71fb      	strb	r3, [r7, #7]
 8000818:	4613      	mov	r3, r2
 800081a:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, Val);
 800081c:	79ba      	ldrb	r2, [r7, #6]
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	4611      	mov	r1, r2
 8000822:	4618      	mov	r0, r3
 8000824:	f7ff ff62 	bl	80006ec <I2C_LCD_ExpanderWrite>
	I2C_LCD_EnPulse(I2C_LCD_InstanceIndex, Val);
 8000828:	79ba      	ldrb	r2, [r7, #6]
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	4611      	mov	r1, r2
 800082e:	4618      	mov	r0, r3
 8000830:	f7ff ff90 	bl	8000754 <I2C_LCD_EnPulse>
}
 8000834:	bf00      	nop
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}

0800083c <I2C_LCD_Send>:

static void I2C_LCD_Send(uint8_t I2C_LCD_InstanceIndex, uint8_t Val, uint8_t Mode)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b084      	sub	sp, #16
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	71fb      	strb	r3, [r7, #7]
 8000846:	460b      	mov	r3, r1
 8000848:	71bb      	strb	r3, [r7, #6]
 800084a:	4613      	mov	r3, r2
 800084c:	717b      	strb	r3, [r7, #5]
    uint8_t HighNib = Val & 0xF0;
 800084e:	79bb      	ldrb	r3, [r7, #6]
 8000850:	f023 030f 	bic.w	r3, r3, #15
 8000854:	73fb      	strb	r3, [r7, #15]
    uint8_t LowNib = (Val << 4) & 0xF0;
 8000856:	79bb      	ldrb	r3, [r7, #6]
 8000858:	011b      	lsls	r3, r3, #4
 800085a:	73bb      	strb	r3, [r7, #14]
    I2C_LCD_Write4Bits(I2C_LCD_InstanceIndex, (HighNib) | Mode);
 800085c:	7bfa      	ldrb	r2, [r7, #15]
 800085e:	797b      	ldrb	r3, [r7, #5]
 8000860:	4313      	orrs	r3, r2
 8000862:	b2da      	uxtb	r2, r3
 8000864:	79fb      	ldrb	r3, [r7, #7]
 8000866:	4611      	mov	r1, r2
 8000868:	4618      	mov	r0, r3
 800086a:	f7ff ffcf 	bl	800080c <I2C_LCD_Write4Bits>
    I2C_LCD_Write4Bits(I2C_LCD_InstanceIndex, (LowNib) | Mode);
 800086e:	7bba      	ldrb	r2, [r7, #14]
 8000870:	797b      	ldrb	r3, [r7, #5]
 8000872:	4313      	orrs	r3, r2
 8000874:	b2da      	uxtb	r2, r3
 8000876:	79fb      	ldrb	r3, [r7, #7]
 8000878:	4611      	mov	r1, r2
 800087a:	4618      	mov	r0, r3
 800087c:	f7ff ffc6 	bl	800080c <I2C_LCD_Write4Bits>
}
 8000880:	bf00      	nop
 8000882:	3710      	adds	r7, #16
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}

08000888 <I2C_LCD_Cmd>:

static void I2C_LCD_Cmd(uint8_t I2C_LCD_InstanceIndex, uint8_t CMD)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	460a      	mov	r2, r1
 8000892:	71fb      	strb	r3, [r7, #7]
 8000894:	4613      	mov	r3, r2
 8000896:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_Send(I2C_LCD_InstanceIndex, CMD, 0);
 8000898:	79b9      	ldrb	r1, [r7, #6]
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	2200      	movs	r2, #0
 800089e:	4618      	mov	r0, r3
 80008a0:	f7ff ffcc 	bl	800083c <I2C_LCD_Send>
}
 80008a4:	bf00      	nop
 80008a6:	3708      	adds	r7, #8
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}

080008ac <I2C_LCD_Data>:

static void I2C_LCD_Data(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	460a      	mov	r2, r1
 80008b6:	71fb      	strb	r3, [r7, #7]
 80008b8:	4613      	mov	r3, r2
 80008ba:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_Send(I2C_LCD_InstanceIndex, DATA, 1);
 80008bc:	79b9      	ldrb	r1, [r7, #6]
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	2201      	movs	r2, #1
 80008c2:	4618      	mov	r0, r3
 80008c4:	f7ff ffba 	bl	800083c <I2C_LCD_Send>
}
 80008c8:	bf00      	nop
 80008ca:	3708      	adds	r7, #8
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <I2C_LCD_Init>:
//=========================================================================================================================

/*-----------------------[USER EXTERNAL FUNCTIONS]-----------------------*/

void I2C_LCD_Init(uint8_t I2C_LCD_InstanceIndex)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08a      	sub	sp, #40	@ 0x28
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	71fb      	strb	r3, [r7, #7]
	// According To Datasheet, We Must Wait At Least 40ms After Power Up Before Interacting With The LCD Module
	while(HAL_GetTick() < 50);
 80008da:	bf00      	nop
 80008dc:	f000 fd70 	bl	80013c0 <HAL_GetTick>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b31      	cmp	r3, #49	@ 0x31
 80008e4:	d9fa      	bls.n	80008dc <I2C_LCD_Init+0xc>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	2130      	movs	r1, #48	@ 0x30
 80008ea:	4618      	mov	r0, r3
 80008ec:	f7ff ffcc 	bl	8000888 <I2C_LCD_Cmd>
    DELAY_MS(5);  // Delay > 4.1ms
 80008f0:	2300      	movs	r3, #0
 80008f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80008f4:	e01f      	b.n	8000936 <I2C_LCD_Init+0x66>
 80008f6:	4b4b      	ldr	r3, [pc, #300]	@ (8000a24 <I2C_LCD_Init+0x154>)
 80008f8:	689b      	ldr	r3, [r3, #8]
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	4b4a      	ldr	r3, [pc, #296]	@ (8000a28 <I2C_LCD_Init+0x158>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a4a      	ldr	r2, [pc, #296]	@ (8000a2c <I2C_LCD_Init+0x15c>)
 8000902:	fba2 2303 	umull	r2, r3, r2, r3
 8000906:	0c9b      	lsrs	r3, r3, #18
 8000908:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800090c:	fb03 f202 	mul.w	r2, r3, r2
 8000910:	4b45      	ldr	r3, [pc, #276]	@ (8000a28 <I2C_LCD_Init+0x158>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4945      	ldr	r1, [pc, #276]	@ (8000a2c <I2C_LCD_Init+0x15c>)
 8000916:	fba1 1303 	umull	r1, r3, r1, r3
 800091a:	0c9b      	lsrs	r3, r3, #18
 800091c:	085b      	lsrs	r3, r3, #1
 800091e:	1ad3      	subs	r3, r2, r3
 8000920:	60bb      	str	r3, [r7, #8]
 8000922:	4b40      	ldr	r3, [pc, #256]	@ (8000a24 <I2C_LCD_Init+0x154>)
 8000924:	689b      	ldr	r3, [r3, #8]
 8000926:	68fa      	ldr	r2, [r7, #12]
 8000928:	1ad3      	subs	r3, r2, r3
 800092a:	68ba      	ldr	r2, [r7, #8]
 800092c:	429a      	cmp	r2, r3
 800092e:	d8f8      	bhi.n	8000922 <I2C_LCD_Init+0x52>
 8000930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000932:	3301      	adds	r3, #1
 8000934:	627b      	str	r3, [r7, #36]	@ 0x24
 8000936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000938:	2b04      	cmp	r3, #4
 800093a:	d9dc      	bls.n	80008f6 <I2C_LCD_Init+0x26>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 800093c:	79fb      	ldrb	r3, [r7, #7]
 800093e:	2130      	movs	r1, #48	@ 0x30
 8000940:	4618      	mov	r0, r3
 8000942:	f7ff ffa1 	bl	8000888 <I2C_LCD_Cmd>
    DELAY_MS(5);  // Delay > 4.1ms
 8000946:	2300      	movs	r3, #0
 8000948:	623b      	str	r3, [r7, #32]
 800094a:	e01f      	b.n	800098c <I2C_LCD_Init+0xbc>
 800094c:	4b35      	ldr	r3, [pc, #212]	@ (8000a24 <I2C_LCD_Init+0x154>)
 800094e:	689b      	ldr	r3, [r3, #8]
 8000950:	617b      	str	r3, [r7, #20]
 8000952:	4b35      	ldr	r3, [pc, #212]	@ (8000a28 <I2C_LCD_Init+0x158>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4a35      	ldr	r2, [pc, #212]	@ (8000a2c <I2C_LCD_Init+0x15c>)
 8000958:	fba2 2303 	umull	r2, r3, r2, r3
 800095c:	0c9b      	lsrs	r3, r3, #18
 800095e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000962:	fb03 f202 	mul.w	r2, r3, r2
 8000966:	4b30      	ldr	r3, [pc, #192]	@ (8000a28 <I2C_LCD_Init+0x158>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4930      	ldr	r1, [pc, #192]	@ (8000a2c <I2C_LCD_Init+0x15c>)
 800096c:	fba1 1303 	umull	r1, r3, r1, r3
 8000970:	0c9b      	lsrs	r3, r3, #18
 8000972:	085b      	lsrs	r3, r3, #1
 8000974:	1ad3      	subs	r3, r2, r3
 8000976:	613b      	str	r3, [r7, #16]
 8000978:	4b2a      	ldr	r3, [pc, #168]	@ (8000a24 <I2C_LCD_Init+0x154>)
 800097a:	689b      	ldr	r3, [r3, #8]
 800097c:	697a      	ldr	r2, [r7, #20]
 800097e:	1ad3      	subs	r3, r2, r3
 8000980:	693a      	ldr	r2, [r7, #16]
 8000982:	429a      	cmp	r2, r3
 8000984:	d8f8      	bhi.n	8000978 <I2C_LCD_Init+0xa8>
 8000986:	6a3b      	ldr	r3, [r7, #32]
 8000988:	3301      	adds	r3, #1
 800098a:	623b      	str	r3, [r7, #32]
 800098c:	6a3b      	ldr	r3, [r7, #32]
 800098e:	2b04      	cmp	r3, #4
 8000990:	d9dc      	bls.n	800094c <I2C_LCD_Init+0x7c>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 8000992:	79fb      	ldrb	r3, [r7, #7]
 8000994:	2130      	movs	r1, #48	@ 0x30
 8000996:	4618      	mov	r0, r3
 8000998:	f7ff ff76 	bl	8000888 <I2C_LCD_Cmd>
    DELAY_US(150);  // Delay > 100μs
 800099c:	4b21      	ldr	r3, [pc, #132]	@ (8000a24 <I2C_LCD_Init+0x154>)
 800099e:	689b      	ldr	r3, [r3, #8]
 80009a0:	61fb      	str	r3, [r7, #28]
 80009a2:	4b21      	ldr	r3, [pc, #132]	@ (8000a28 <I2C_LCD_Init+0x158>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	4a21      	ldr	r2, [pc, #132]	@ (8000a2c <I2C_LCD_Init+0x15c>)
 80009a8:	fba2 2303 	umull	r2, r3, r2, r3
 80009ac:	0c9b      	lsrs	r3, r3, #18
 80009ae:	2296      	movs	r2, #150	@ 0x96
 80009b0:	fb03 f202 	mul.w	r2, r3, r2
 80009b4:	4b1c      	ldr	r3, [pc, #112]	@ (8000a28 <I2C_LCD_Init+0x158>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	491c      	ldr	r1, [pc, #112]	@ (8000a2c <I2C_LCD_Init+0x15c>)
 80009ba:	fba1 1303 	umull	r1, r3, r1, r3
 80009be:	0c9b      	lsrs	r3, r3, #18
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	1ad3      	subs	r3, r2, r3
 80009c4:	61bb      	str	r3, [r7, #24]
 80009c6:	4b17      	ldr	r3, [pc, #92]	@ (8000a24 <I2C_LCD_Init+0x154>)
 80009c8:	689b      	ldr	r3, [r3, #8]
 80009ca:	69fa      	ldr	r2, [r7, #28]
 80009cc:	1ad3      	subs	r3, r2, r3
 80009ce:	69ba      	ldr	r2, [r7, #24]
 80009d0:	429a      	cmp	r2, r3
 80009d2:	d8f8      	bhi.n	80009c6 <I2C_LCD_Init+0xf6>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x02);
 80009d4:	79fb      	ldrb	r3, [r7, #7]
 80009d6:	2102      	movs	r1, #2
 80009d8:	4618      	mov	r0, r3
 80009da:	f7ff ff55 	bl	8000888 <I2C_LCD_Cmd>
    // Configure the LCD
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_FUNCTIONSET | LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS);
 80009de:	79fb      	ldrb	r3, [r7, #7]
 80009e0:	2128      	movs	r1, #40	@ 0x28
 80009e2:	4618      	mov	r0, r3
 80009e4:	f7ff ff50 	bl	8000888 <I2C_LCD_Cmd>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_DISPLAYCONTROL | LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF);
 80009e8:	79fb      	ldrb	r3, [r7, #7]
 80009ea:	210c      	movs	r1, #12
 80009ec:	4618      	mov	r0, r3
 80009ee:	f7ff ff4b 	bl	8000888 <I2C_LCD_Cmd>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_ENTRYMODESET | LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT);
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	2106      	movs	r1, #6
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff ff46 	bl	8000888 <I2C_LCD_Cmd>
    I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].DisplayCtrl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80009fc:	79fb      	ldrb	r3, [r7, #7]
 80009fe:	4a0c      	ldr	r2, [pc, #48]	@ (8000a30 <I2C_LCD_Init+0x160>)
 8000a00:	2104      	movs	r1, #4
 8000a02:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
    I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal = LCD_BACKLIGHT;
 8000a06:	79fb      	ldrb	r3, [r7, #7]
 8000a08:	4a09      	ldr	r2, [pc, #36]	@ (8000a30 <I2C_LCD_Init+0x160>)
 8000a0a:	005b      	lsls	r3, r3, #1
 8000a0c:	4413      	add	r3, r2
 8000a0e:	2208      	movs	r2, #8
 8000a10:	705a      	strb	r2, [r3, #1]
    // Clear the LCD
    I2C_LCD_Clear(I2C_LCD_InstanceIndex);
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	4618      	mov	r0, r3
 8000a16:	f000 f80d 	bl	8000a34 <I2C_LCD_Clear>
}
 8000a1a:	bf00      	nop
 8000a1c:	3728      	adds	r7, #40	@ 0x28
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	e000e010 	.word	0xe000e010
 8000a28:	20000000 	.word	0x20000000
 8000a2c:	431bde83 	.word	0x431bde83
 8000a30:	20000040 	.word	0x20000040

08000a34 <I2C_LCD_Clear>:

void I2C_LCD_Clear(uint8_t I2C_LCD_InstanceIndex)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b086      	sub	sp, #24
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	71fb      	strb	r3, [r7, #7]
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_CLEARDISPLAY);
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	2101      	movs	r1, #1
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff ff20 	bl	8000888 <I2C_LCD_Cmd>
    DELAY_MS(2);
 8000a48:	2300      	movs	r3, #0
 8000a4a:	617b      	str	r3, [r7, #20]
 8000a4c:	e01f      	b.n	8000a8e <I2C_LCD_Clear+0x5a>
 8000a4e:	4b14      	ldr	r3, [pc, #80]	@ (8000aa0 <I2C_LCD_Clear+0x6c>)
 8000a50:	689b      	ldr	r3, [r3, #8]
 8000a52:	613b      	str	r3, [r7, #16]
 8000a54:	4b13      	ldr	r3, [pc, #76]	@ (8000aa4 <I2C_LCD_Clear+0x70>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a13      	ldr	r2, [pc, #76]	@ (8000aa8 <I2C_LCD_Clear+0x74>)
 8000a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a5e:	0c9b      	lsrs	r3, r3, #18
 8000a60:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000a64:	fb03 f202 	mul.w	r2, r3, r2
 8000a68:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa4 <I2C_LCD_Clear+0x70>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	490e      	ldr	r1, [pc, #56]	@ (8000aa8 <I2C_LCD_Clear+0x74>)
 8000a6e:	fba1 1303 	umull	r1, r3, r1, r3
 8000a72:	0c9b      	lsrs	r3, r3, #18
 8000a74:	085b      	lsrs	r3, r3, #1
 8000a76:	1ad3      	subs	r3, r2, r3
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	4b09      	ldr	r3, [pc, #36]	@ (8000aa0 <I2C_LCD_Clear+0x6c>)
 8000a7c:	689b      	ldr	r3, [r3, #8]
 8000a7e:	693a      	ldr	r2, [r7, #16]
 8000a80:	1ad3      	subs	r3, r2, r3
 8000a82:	68fa      	ldr	r2, [r7, #12]
 8000a84:	429a      	cmp	r2, r3
 8000a86:	d8f8      	bhi.n	8000a7a <I2C_LCD_Clear+0x46>
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	617b      	str	r3, [r7, #20]
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	2b01      	cmp	r3, #1
 8000a92:	d9dc      	bls.n	8000a4e <I2C_LCD_Clear+0x1a>
}
 8000a94:	bf00      	nop
 8000a96:	bf00      	nop
 8000a98:	3718      	adds	r7, #24
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	e000e010 	.word	0xe000e010
 8000aa4:	20000000 	.word	0x20000000
 8000aa8:	431bde83 	.word	0x431bde83

08000aac <I2C_LCD_SetCursor>:
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_RETURNHOME);
    DELAY_MS(2);
}

void I2C_LCD_SetCursor(uint8_t I2C_LCD_InstanceIndex, uint8_t Col, uint8_t Row)
{
 8000aac:	b590      	push	{r4, r7, lr}
 8000aae:	b087      	sub	sp, #28
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	71fb      	strb	r3, [r7, #7]
 8000ab6:	460b      	mov	r3, r1
 8000ab8:	71bb      	strb	r3, [r7, #6]
 8000aba:	4613      	mov	r3, r2
 8000abc:	717b      	strb	r3, [r7, #5]
    int Row_Offsets[] = {0x00, 0x40, 0x14, 0x54};
 8000abe:	4b1a      	ldr	r3, [pc, #104]	@ (8000b28 <I2C_LCD_SetCursor+0x7c>)
 8000ac0:	f107 0408 	add.w	r4, r7, #8
 8000ac4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ac6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (Row > I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_nRow)
 8000aca:	79fa      	ldrb	r2, [r7, #7]
 8000acc:	4917      	ldr	r1, [pc, #92]	@ (8000b2c <I2C_LCD_SetCursor+0x80>)
 8000ace:	4613      	mov	r3, r2
 8000ad0:	005b      	lsls	r3, r3, #1
 8000ad2:	4413      	add	r3, r2
 8000ad4:	009b      	lsls	r3, r3, #2
 8000ad6:	440b      	add	r3, r1
 8000ad8:	330a      	adds	r3, #10
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	797a      	ldrb	r2, [r7, #5]
 8000ade:	429a      	cmp	r2, r3
 8000ae0:	d90a      	bls.n	8000af8 <I2C_LCD_SetCursor+0x4c>
    {
    	Row = I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_nRow - 1;
 8000ae2:	79fa      	ldrb	r2, [r7, #7]
 8000ae4:	4911      	ldr	r1, [pc, #68]	@ (8000b2c <I2C_LCD_SetCursor+0x80>)
 8000ae6:	4613      	mov	r3, r2
 8000ae8:	005b      	lsls	r3, r3, #1
 8000aea:	4413      	add	r3, r2
 8000aec:	009b      	lsls	r3, r3, #2
 8000aee:	440b      	add	r3, r1
 8000af0:	330a      	adds	r3, #10
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	3b01      	subs	r3, #1
 8000af6:	717b      	strb	r3, [r7, #5]
    }
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_SETDDRAMADDR | (Col + Row_Offsets[Row]));
 8000af8:	797b      	ldrb	r3, [r7, #5]
 8000afa:	009b      	lsls	r3, r3, #2
 8000afc:	3318      	adds	r3, #24
 8000afe:	443b      	add	r3, r7
 8000b00:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000b04:	b2da      	uxtb	r2, r3
 8000b06:	79bb      	ldrb	r3, [r7, #6]
 8000b08:	4413      	add	r3, r2
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	b25b      	sxtb	r3, r3
 8000b0e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000b12:	b25b      	sxtb	r3, r3
 8000b14:	b2da      	uxtb	r2, r3
 8000b16:	79fb      	ldrb	r3, [r7, #7]
 8000b18:	4611      	mov	r1, r2
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f7ff feb4 	bl	8000888 <I2C_LCD_Cmd>
}
 8000b20:	bf00      	nop
 8000b22:	371c      	adds	r7, #28
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd90      	pop	{r4, r7, pc}
 8000b28:	08002d98 	.word	0x08002d98
 8000b2c:	08002dcc 	.word	0x08002dcc

08000b30 <I2C_LCD_WriteString>:
{
    I2C_LCD_Data(I2C_LCD_InstanceIndex, Ch);
}

void I2C_LCD_WriteString(uint8_t I2C_LCD_InstanceIndex, char *Str)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	4603      	mov	r3, r0
 8000b38:	6039      	str	r1, [r7, #0]
 8000b3a:	71fb      	strb	r3, [r7, #7]
    while (*Str)
 8000b3c:	e008      	b.n	8000b50 <I2C_LCD_WriteString+0x20>
    {
        I2C_LCD_Data(I2C_LCD_InstanceIndex, *Str++);
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	1c5a      	adds	r2, r3, #1
 8000b42:	603a      	str	r2, [r7, #0]
 8000b44:	781a      	ldrb	r2, [r3, #0]
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	4611      	mov	r1, r2
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f7ff feae 	bl	80008ac <I2C_LCD_Data>
    while (*Str)
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d1f2      	bne.n	8000b3e <I2C_LCD_WriteString+0xe>
    }
}
 8000b58:	bf00      	nop
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
	...

08000b64 <ledFSM_init>:
#include "API_leds.h"

static ledFSM_t ledFSM;

void ledFSM_init()
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0

	ledFSM.isOn = true;
 8000b68:	4b08      	ldr	r3, [pc, #32]	@ (8000b8c <ledFSM_init+0x28>)
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	705a      	strb	r2, [r3, #1]
	ledFSM.state = LED_ON;
 8000b6e:	4b07      	ldr	r3, [pc, #28]	@ (8000b8c <ledFSM_init+0x28>)
 8000b70:	2201      	movs	r2, #1
 8000b72:	701a      	strb	r2, [r3, #0]

	delayInit(&ledFSM.onTime);
 8000b74:	4806      	ldr	r0, [pc, #24]	@ (8000b90 <ledFSM_init+0x2c>)
 8000b76:	f7ff fd47 	bl	8000608 <delayInit>
	delayInit(&ledFSM.offTime);
 8000b7a:	4806      	ldr	r0, [pc, #24]	@ (8000b94 <ledFSM_init+0x30>)
 8000b7c:	f7ff fd44 	bl	8000608 <delayInit>

	ledSetCycleDuration(500);
 8000b80:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b84:	f000 f852 	bl	8000c2c <ledSetCycleDuration>


}
 8000b88:	bf00      	nop
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	20000044 	.word	0x20000044
 8000b90:	20000048 	.word	0x20000048
 8000b94:	20000058 	.word	0x20000058

08000b98 <ledFSM_update>:

void ledFSM_update()
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0

	switch (ledFSM.state) {
 8000b9c:	4b20      	ldr	r3, [pc, #128]	@ (8000c20 <ledFSM_update+0x88>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	2b02      	cmp	r3, #2
 8000ba2:	d019      	beq.n	8000bd8 <ledFSM_update+0x40>
 8000ba4:	2b02      	cmp	r3, #2
 8000ba6:	dc37      	bgt.n	8000c18 <ledFSM_update+0x80>
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d00b      	beq.n	8000bc4 <ledFSM_update+0x2c>
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d133      	bne.n	8000c18 <ledFSM_update+0x80>

	case LED_ON:
		delayStart(&ledFSM.onTime);
 8000bb0:	481c      	ldr	r0, [pc, #112]	@ (8000c24 <ledFSM_update+0x8c>)
 8000bb2:	f7ff fd52 	bl	800065a <delayStart>
		ledFSM.isOn = true;
 8000bb6:	4b1a      	ldr	r3, [pc, #104]	@ (8000c20 <ledFSM_update+0x88>)
 8000bb8:	2201      	movs	r2, #1
 8000bba:	705a      	strb	r2, [r3, #1]
		ledFSM.state = WAITING;
 8000bbc:	4b18      	ldr	r3, [pc, #96]	@ (8000c20 <ledFSM_update+0x88>)
 8000bbe:	2202      	movs	r2, #2
 8000bc0:	701a      	strb	r2, [r3, #0]

		break;
 8000bc2:	e02b      	b.n	8000c1c <ledFSM_update+0x84>

	case LED_OFF:
		delayStart(&ledFSM.offTime);
 8000bc4:	4818      	ldr	r0, [pc, #96]	@ (8000c28 <ledFSM_update+0x90>)
 8000bc6:	f7ff fd48 	bl	800065a <delayStart>
		ledFSM.isOn = false;
 8000bca:	4b15      	ldr	r3, [pc, #84]	@ (8000c20 <ledFSM_update+0x88>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	705a      	strb	r2, [r3, #1]
		ledFSM.state = WAITING;
 8000bd0:	4b13      	ldr	r3, [pc, #76]	@ (8000c20 <ledFSM_update+0x88>)
 8000bd2:	2202      	movs	r2, #2
 8000bd4:	701a      	strb	r2, [r3, #0]

		break;
 8000bd6:	e021      	b.n	8000c1c <ledFSM_update+0x84>

	case WAITING:
		if (delayRead(&ledFSM.onTime) && ledFSM.isOn) {
 8000bd8:	4812      	ldr	r0, [pc, #72]	@ (8000c24 <ledFSM_update+0x8c>)
 8000bda:	f7ff fd55 	bl	8000688 <delayRead>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d007      	beq.n	8000bf4 <ledFSM_update+0x5c>
 8000be4:	4b0e      	ldr	r3, [pc, #56]	@ (8000c20 <ledFSM_update+0x88>)
 8000be6:	785b      	ldrb	r3, [r3, #1]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d003      	beq.n	8000bf4 <ledFSM_update+0x5c>
			ledFSM.state = LED_OFF;
 8000bec:	4b0c      	ldr	r3, [pc, #48]	@ (8000c20 <ledFSM_update+0x88>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	701a      	strb	r2, [r3, #0]
			break;
 8000bf2:	e013      	b.n	8000c1c <ledFSM_update+0x84>
		}
		if (delayRead(&ledFSM.offTime) && !ledFSM.isOn) {
 8000bf4:	480c      	ldr	r0, [pc, #48]	@ (8000c28 <ledFSM_update+0x90>)
 8000bf6:	f7ff fd47 	bl	8000688 <delayRead>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d00c      	beq.n	8000c1a <ledFSM_update+0x82>
 8000c00:	4b07      	ldr	r3, [pc, #28]	@ (8000c20 <ledFSM_update+0x88>)
 8000c02:	785b      	ldrb	r3, [r3, #1]
 8000c04:	f083 0301 	eor.w	r3, r3, #1
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d005      	beq.n	8000c1a <ledFSM_update+0x82>
			ledFSM.state = LED_ON;
 8000c0e:	4b04      	ldr	r3, [pc, #16]	@ (8000c20 <ledFSM_update+0x88>)
 8000c10:	2201      	movs	r2, #1
 8000c12:	701a      	strb	r2, [r3, #0]
			break;
 8000c14:	e002      	b.n	8000c1c <ledFSM_update+0x84>
 8000c16:	e7ff      	b.n	8000c18 <ledFSM_update+0x80>
		}

		break;

	default:
		while (1) {
 8000c18:	e7fd      	b.n	8000c16 <ledFSM_update+0x7e>
		break;
 8000c1a:	bf00      	nop
		}
		break;

	}

}
 8000c1c:	bf00      	nop
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	20000044 	.word	0x20000044
 8000c24:	20000048 	.word	0x20000048
 8000c28:	20000058 	.word	0x20000058

08000c2c <ledSetCycleDuration>:

void ledSetCycleDuration (tick_t duration) {
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
	delayWrite(&ledFSM.onTime, duration);
 8000c34:	6879      	ldr	r1, [r7, #4]
 8000c36:	4805      	ldr	r0, [pc, #20]	@ (8000c4c <ledSetCycleDuration+0x20>)
 8000c38:	f7ff fd01 	bl	800063e <delayWrite>
	delayWrite(&ledFSM.offTime, duration);
 8000c3c:	6879      	ldr	r1, [r7, #4]
 8000c3e:	4804      	ldr	r0, [pc, #16]	@ (8000c50 <ledSetCycleDuration+0x24>)
 8000c40:	f7ff fcfd 	bl	800063e <delayWrite>
}
 8000c44:	bf00      	nop
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20000048 	.word	0x20000048
 8000c50:	20000058 	.word	0x20000058

08000c54 <readLed>:

void ledSetOffDuration (tick_t duration) {
	delayWrite(&ledFSM.offTime, duration);
}

bool_t readLed () {
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
	return ledFSM.isOn;
 8000c58:	4b03      	ldr	r3, [pc, #12]	@ (8000c68 <readLed+0x14>)
 8000c5a:	785b      	ldrb	r3, [r3, #1]
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	20000044 	.word	0x20000044

08000c6c <ledOn>:

void ledOn(userLeds_t ledNo)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	80fb      	strh	r3, [r7, #6]
	switch (ledNo)
 8000c76:	88fb      	ldrh	r3, [r7, #6]
 8000c78:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000c7c:	d015      	beq.n	8000caa <ledOn+0x3e>
 8000c7e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000c82:	dc19      	bgt.n	8000cb8 <ledOn+0x4c>
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d002      	beq.n	8000c8e <ledOn+0x22>
 8000c88:	2b80      	cmp	r3, #128	@ 0x80
 8000c8a:	d007      	beq.n	8000c9c <ledOn+0x30>
	case LED3:
		HAL_GPIO_WritePin(LED3_GPIO_Port, ledNo, LED_ON);
		break;

	default:
	break;
 8000c8c:	e014      	b.n	8000cb8 <ledOn+0x4c>
		HAL_GPIO_WritePin(LED1_GPIO_Port, ledNo, LED_ON);
 8000c8e:	88fb      	ldrh	r3, [r7, #6]
 8000c90:	2201      	movs	r2, #1
 8000c92:	4619      	mov	r1, r3
 8000c94:	480b      	ldr	r0, [pc, #44]	@ (8000cc4 <ledOn+0x58>)
 8000c96:	f000 fe49 	bl	800192c <HAL_GPIO_WritePin>
		break;
 8000c9a:	e00e      	b.n	8000cba <ledOn+0x4e>
		HAL_GPIO_WritePin(LED2_GPIO_Port, ledNo, LED_ON);
 8000c9c:	88fb      	ldrh	r3, [r7, #6]
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4808      	ldr	r0, [pc, #32]	@ (8000cc4 <ledOn+0x58>)
 8000ca4:	f000 fe42 	bl	800192c <HAL_GPIO_WritePin>
		break;
 8000ca8:	e007      	b.n	8000cba <ledOn+0x4e>
		HAL_GPIO_WritePin(LED3_GPIO_Port, ledNo, LED_ON);
 8000caa:	88fb      	ldrh	r3, [r7, #6]
 8000cac:	2201      	movs	r2, #1
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4804      	ldr	r0, [pc, #16]	@ (8000cc4 <ledOn+0x58>)
 8000cb2:	f000 fe3b 	bl	800192c <HAL_GPIO_WritePin>
		break;
 8000cb6:	e000      	b.n	8000cba <ledOn+0x4e>
	break;
 8000cb8:	bf00      	nop
	}
}
 8000cba:	bf00      	nop
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40020400 	.word	0x40020400

08000cc8 <ledOff>:

void ledOff (uint16_t ledNo)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	80fb      	strh	r3, [r7, #6]
	switch (ledNo)
 8000cd2:	88fb      	ldrh	r3, [r7, #6]
 8000cd4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000cd8:	d015      	beq.n	8000d06 <ledOff+0x3e>
 8000cda:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000cde:	dc19      	bgt.n	8000d14 <ledOff+0x4c>
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d002      	beq.n	8000cea <ledOff+0x22>
 8000ce4:	2b80      	cmp	r3, #128	@ 0x80
 8000ce6:	d007      	beq.n	8000cf8 <ledOff+0x30>
	case LED3:
		HAL_GPIO_WritePin(LED3_GPIO_Port, ledNo, LED_OFF);
		break;

	default:
	break;
 8000ce8:	e014      	b.n	8000d14 <ledOff+0x4c>
		HAL_GPIO_WritePin(LED1_GPIO_Port, ledNo, LED_OFF);
 8000cea:	88fb      	ldrh	r3, [r7, #6]
 8000cec:	2200      	movs	r2, #0
 8000cee:	4619      	mov	r1, r3
 8000cf0:	480b      	ldr	r0, [pc, #44]	@ (8000d20 <ledOff+0x58>)
 8000cf2:	f000 fe1b 	bl	800192c <HAL_GPIO_WritePin>
		break;
 8000cf6:	e00e      	b.n	8000d16 <ledOff+0x4e>
		HAL_GPIO_WritePin(LED2_GPIO_Port, ledNo, LED_OFF);
 8000cf8:	88fb      	ldrh	r3, [r7, #6]
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4808      	ldr	r0, [pc, #32]	@ (8000d20 <ledOff+0x58>)
 8000d00:	f000 fe14 	bl	800192c <HAL_GPIO_WritePin>
		break;
 8000d04:	e007      	b.n	8000d16 <ledOff+0x4e>
		HAL_GPIO_WritePin(LED3_GPIO_Port, ledNo, LED_OFF);
 8000d06:	88fb      	ldrh	r3, [r7, #6]
 8000d08:	2200      	movs	r2, #0
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4804      	ldr	r0, [pc, #16]	@ (8000d20 <ledOff+0x58>)
 8000d0e:	f000 fe0d 	bl	800192c <HAL_GPIO_WritePin>
		break;
 8000d12:	e000      	b.n	8000d16 <ledOff+0x4e>
	break;
 8000d14:	bf00      	nop
	}
}
 8000d16:	bf00      	nop
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40020400 	.word	0x40020400

08000d24 <main>:
#define MyI2C_LCD 	I2C_LCD_1

static void SystemClock_Config(void);

int main(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
	//HAL Inits
	HAL_Init();
 8000d28:	f000 fae4 	bl	80012f4 <HAL_Init>
	SystemClock_Config();
 8000d2c:	f000 f83c 	bl	8000da8 <SystemClock_Config>

	//Software Inits
	ledFSM_init();
 8000d30:	f7ff ff18 	bl	8000b64 <ledFSM_init>
	debounceFSM_init();
 8000d34:	f7ff fbd2 	bl	80004dc <debounceFSM_init>
	I2C_LCD_Init(MyI2C_LCD);
 8000d38:	2000      	movs	r0, #0
 8000d3a:	f7ff fdc9 	bl	80008d0 <I2C_LCD_Init>

	I2C_LCD_SetCursor(MyI2C_LCD, 0, 0);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2100      	movs	r1, #0
 8000d42:	2000      	movs	r0, #0
 8000d44:	f7ff feb2 	bl	8000aac <I2C_LCD_SetCursor>
	I2C_LCD_WriteString(MyI2C_LCD, "Me debes:");
 8000d48:	4915      	ldr	r1, [pc, #84]	@ (8000da0 <main+0x7c>)
 8000d4a:	2000      	movs	r0, #0
 8000d4c:	f7ff fef0 	bl	8000b30 <I2C_LCD_WriteString>
	I2C_LCD_SetCursor(MyI2C_LCD, 0, 1);
 8000d50:	2201      	movs	r2, #1
 8000d52:	2100      	movs	r1, #0
 8000d54:	2000      	movs	r0, #0
 8000d56:	f7ff fea9 	bl	8000aac <I2C_LCD_SetCursor>
	I2C_LCD_WriteString(MyI2C_LCD, "un combo de McDonalds");
 8000d5a:	4912      	ldr	r1, [pc, #72]	@ (8000da4 <main+0x80>)
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	f7ff fee7 	bl	8000b30 <I2C_LCD_WriteString>

	while (1)
	{

	//Poll
	ledFSM_update();
 8000d62:	f7ff ff19 	bl	8000b98 <ledFSM_update>
	debounceFSM_update();
 8000d66:	f7ff fbcf 	bl	8000508 <debounceFSM_update>

	//Act
	(readLed()) ? ledOn(LED1) : ledOff(LED1);
 8000d6a:	f7ff ff73 	bl	8000c54 <readLed>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d003      	beq.n	8000d7c <main+0x58>
 8000d74:	2001      	movs	r0, #1
 8000d76:	f7ff ff79 	bl	8000c6c <ledOn>
 8000d7a:	e002      	b.n	8000d82 <main+0x5e>
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	f7ff ffa3 	bl	8000cc8 <ledOff>
	(readKey()) ? ledSetCycleDuration(DOS) : ledSetCycleDuration(UNO);
 8000d82:	f7ff fc35 	bl	80005f0 <readKey>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d003      	beq.n	8000d94 <main+0x70>
 8000d8c:	2064      	movs	r0, #100	@ 0x64
 8000d8e:	f7ff ff4d 	bl	8000c2c <ledSetCycleDuration>
 8000d92:	e7e6      	b.n	8000d62 <main+0x3e>
 8000d94:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d98:	f7ff ff48 	bl	8000c2c <ledSetCycleDuration>
	ledFSM_update();
 8000d9c:	e7e1      	b.n	8000d62 <main+0x3e>
 8000d9e:	bf00      	nop
 8000da0:	08002da8 	.word	0x08002da8
 8000da4:	08002db4 	.word	0x08002db4

08000da8 <SystemClock_Config>:
	}

}

static void SystemClock_Config(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b094      	sub	sp, #80	@ 0x50
 8000dac:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_OscInitTypeDef RCC_OscInitStruct;

	/* Enable Power Control clock */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	60bb      	str	r3, [r7, #8]
 8000db2:	4b2c      	ldr	r3, [pc, #176]	@ (8000e64 <SystemClock_Config+0xbc>)
 8000db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db6:	4a2b      	ldr	r2, [pc, #172]	@ (8000e64 <SystemClock_Config+0xbc>)
 8000db8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dbe:	4b29      	ldr	r3, [pc, #164]	@ (8000e64 <SystemClock_Config+0xbc>)
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dc6:	60bb      	str	r3, [r7, #8]
 8000dc8:	68bb      	ldr	r3, [r7, #8]

	/* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dca:	2300      	movs	r3, #0
 8000dcc:	607b      	str	r3, [r7, #4]
 8000dce:	4b26      	ldr	r3, [pc, #152]	@ (8000e68 <SystemClock_Config+0xc0>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a25      	ldr	r2, [pc, #148]	@ (8000e68 <SystemClock_Config+0xc0>)
 8000dd4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000dd8:	6013      	str	r3, [r2, #0]
 8000dda:	4b23      	ldr	r3, [pc, #140]	@ (8000e68 <SystemClock_Config+0xc0>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000de2:	607b      	str	r3, [r7, #4]
 8000de4:	687b      	ldr	r3, [r7, #4]

	/* Enable HSE Oscillator and activate PLL with HSE as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000de6:	2301      	movs	r3, #1
 8000de8:	60fb      	str	r3, [r7, #12]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000dea:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000dee:	613b      	str	r3, [r7, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000df0:	2302      	movs	r3, #2
 8000df2:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000df4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000df8:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000dfa:	2308      	movs	r3, #8
 8000dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLN = 360;
 8000dfe:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 8000e02:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e04:	2302      	movs	r3, #2
 8000e06:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e08:	2307      	movs	r3, #7
 8000e0a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e0c:	f107 030c 	add.w	r3, r7, #12
 8000e10:	4618      	mov	r0, r3
 8000e12:	f001 fb0d 	bl	8002430 <HAL_RCC_OscConfig>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <SystemClock_Config+0x78>
	{
		/* Initialization Error */
		Error_Handler();
 8000e1c:	f000 f826 	bl	8000e6c <Error_Handler>
	}

	if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000e20:	f001 fab6 	bl	8002390 <HAL_PWREx_EnableOverDrive>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <SystemClock_Config+0x86>
	{
		/* Initialization Error */
		Error_Handler();
 8000e2a:	f000 f81f 	bl	8000e6c <Error_Handler>
	}

	/* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8000e2e:	230f      	movs	r3, #15
 8000e30:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e32:	2302      	movs	r3, #2
 8000e34:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e36:	2300      	movs	r3, #0
 8000e38:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e3a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000e3e:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e44:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e46:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000e4a:	2105      	movs	r1, #5
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f001 fd67 	bl	8002920 <HAL_RCC_ClockConfig>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <SystemClock_Config+0xb4>
	{
		/* Initialization Error */
		Error_Handler();
 8000e58:	f000 f808 	bl	8000e6c <Error_Handler>
	}
}
 8000e5c:	bf00      	nop
 8000e5e:	3750      	adds	r7, #80	@ 0x50
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40023800 	.word	0x40023800
 8000e68:	40007000 	.word	0x40007000

08000e6c <Error_Handler>:
void Error_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0

	while (1)
 8000e70:	bf00      	nop
 8000e72:	e7fd      	b.n	8000e70 <Error_Handler+0x4>

08000e74 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;
#define CLOCKSPEED 100000

void MX_I2C1_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000e78:	4b1b      	ldr	r3, [pc, #108]	@ (8000ee8 <MX_I2C1_Init+0x74>)
 8000e7a:	4a1c      	ldr	r2, [pc, #112]	@ (8000eec <MX_I2C1_Init+0x78>)
 8000e7c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = CLOCKSPEED;
 8000e7e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ee8 <MX_I2C1_Init+0x74>)
 8000e80:	4a1b      	ldr	r2, [pc, #108]	@ (8000ef0 <MX_I2C1_Init+0x7c>)
 8000e82:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e84:	4b18      	ldr	r3, [pc, #96]	@ (8000ee8 <MX_I2C1_Init+0x74>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e8a:	4b17      	ldr	r3, [pc, #92]	@ (8000ee8 <MX_I2C1_Init+0x74>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e90:	4b15      	ldr	r3, [pc, #84]	@ (8000ee8 <MX_I2C1_Init+0x74>)
 8000e92:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e96:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e98:	4b13      	ldr	r3, [pc, #76]	@ (8000ee8 <MX_I2C1_Init+0x74>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e9e:	4b12      	ldr	r3, [pc, #72]	@ (8000ee8 <MX_I2C1_Init+0x74>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ea4:	4b10      	ldr	r3, [pc, #64]	@ (8000ee8 <MX_I2C1_Init+0x74>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000eaa:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee8 <MX_I2C1_Init+0x74>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000eb0:	480d      	ldr	r0, [pc, #52]	@ (8000ee8 <MX_I2C1_Init+0x74>)
 8000eb2:	f000 fd55 	bl	8001960 <HAL_I2C_Init>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ebc:	f7ff ffd6 	bl	8000e6c <Error_Handler>
  }

  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	4809      	ldr	r0, [pc, #36]	@ (8000ee8 <MX_I2C1_Init+0x74>)
 8000ec4:	f001 f9e9 	bl	800229a <HAL_I2CEx_ConfigAnalogFilter>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000ece:	f7ff ffcd 	bl	8000e6c <Error_Handler>
  }

  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	4804      	ldr	r0, [pc, #16]	@ (8000ee8 <MX_I2C1_Init+0x74>)
 8000ed6:	f001 fa1c 	bl	8002312 <HAL_I2CEx_ConfigDigitalFilter>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000ee0:	f7ff ffc4 	bl	8000e6c <Error_Handler>
  }

}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20000068 	.word	0x20000068
 8000eec:	40005400 	.word	0x40005400
 8000ef0:	000186a0 	.word	0x000186a0

08000ef4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b08a      	sub	sp, #40	@ 0x28
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efc:	f107 0314 	add.w	r3, r7, #20
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
 8000f0a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a19      	ldr	r2, [pc, #100]	@ (8000f78 <HAL_I2C_MspInit+0x84>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d12c      	bne.n	8000f70 <HAL_I2C_MspInit+0x7c>
  {

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	613b      	str	r3, [r7, #16]
 8000f1a:	4b18      	ldr	r3, [pc, #96]	@ (8000f7c <HAL_I2C_MspInit+0x88>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1e:	4a17      	ldr	r2, [pc, #92]	@ (8000f7c <HAL_I2C_MspInit+0x88>)
 8000f20:	f043 0302 	orr.w	r3, r3, #2
 8000f24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f26:	4b15      	ldr	r3, [pc, #84]	@ (8000f7c <HAL_I2C_MspInit+0x88>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2a:	f003 0302 	and.w	r3, r3, #2
 8000f2e:	613b      	str	r3, [r7, #16]
 8000f30:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f32:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f38:	2312      	movs	r3, #18
 8000f3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f40:	2303      	movs	r3, #3
 8000f42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f44:	2304      	movs	r3, #4
 8000f46:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f48:	f107 0314 	add.w	r3, r7, #20
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	480c      	ldr	r0, [pc, #48]	@ (8000f80 <HAL_I2C_MspInit+0x8c>)
 8000f50:	f000 fb28 	bl	80015a4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f54:	2300      	movs	r3, #0
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	4b08      	ldr	r3, [pc, #32]	@ (8000f7c <HAL_I2C_MspInit+0x88>)
 8000f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f5c:	4a07      	ldr	r2, [pc, #28]	@ (8000f7c <HAL_I2C_MspInit+0x88>)
 8000f5e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f62:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f64:	4b05      	ldr	r3, [pc, #20]	@ (8000f7c <HAL_I2C_MspInit+0x88>)
 8000f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	68fb      	ldr	r3, [r7, #12]

  }
}
 8000f70:	bf00      	nop
 8000f72:	3728      	adds	r7, #40	@ 0x28
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40005400 	.word	0x40005400
 8000f7c:	40023800 	.word	0x40023800
 8000f80:	40020400 	.word	0x40020400

08000f84 <MX_GPIO_Init>:
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/

void MX_GPIO_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08c      	sub	sp, #48	@ 0x30
 8000f88:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8a:	f107 031c 	add.w	r3, r7, #28
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	605a      	str	r2, [r3, #4]
 8000f94:	609a      	str	r2, [r3, #8]
 8000f96:	60da      	str	r2, [r3, #12]
 8000f98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	61bb      	str	r3, [r7, #24]
 8000f9e:	4b84      	ldr	r3, [pc, #528]	@ (80011b0 <MX_GPIO_Init+0x22c>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa2:	4a83      	ldr	r2, [pc, #524]	@ (80011b0 <MX_GPIO_Init+0x22c>)
 8000fa4:	f043 0304 	orr.w	r3, r3, #4
 8000fa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000faa:	4b81      	ldr	r3, [pc, #516]	@ (80011b0 <MX_GPIO_Init+0x22c>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fae:	f003 0304 	and.w	r3, r3, #4
 8000fb2:	61bb      	str	r3, [r7, #24]
 8000fb4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	617b      	str	r3, [r7, #20]
 8000fba:	4b7d      	ldr	r3, [pc, #500]	@ (80011b0 <MX_GPIO_Init+0x22c>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fbe:	4a7c      	ldr	r2, [pc, #496]	@ (80011b0 <MX_GPIO_Init+0x22c>)
 8000fc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fc6:	4b7a      	ldr	r3, [pc, #488]	@ (80011b0 <MX_GPIO_Init+0x22c>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fce:	617b      	str	r3, [r7, #20]
 8000fd0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	613b      	str	r3, [r7, #16]
 8000fd6:	4b76      	ldr	r3, [pc, #472]	@ (80011b0 <MX_GPIO_Init+0x22c>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fda:	4a75      	ldr	r2, [pc, #468]	@ (80011b0 <MX_GPIO_Init+0x22c>)
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fe2:	4b73      	ldr	r3, [pc, #460]	@ (80011b0 <MX_GPIO_Init+0x22c>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	613b      	str	r3, [r7, #16]
 8000fec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	4b6f      	ldr	r3, [pc, #444]	@ (80011b0 <MX_GPIO_Init+0x22c>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff6:	4a6e      	ldr	r2, [pc, #440]	@ (80011b0 <MX_GPIO_Init+0x22c>)
 8000ff8:	f043 0302 	orr.w	r3, r3, #2
 8000ffc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ffe:	4b6c      	ldr	r3, [pc, #432]	@ (80011b0 <MX_GPIO_Init+0x22c>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001002:	f003 0302 	and.w	r3, r3, #2
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	60bb      	str	r3, [r7, #8]
 800100e:	4b68      	ldr	r3, [pc, #416]	@ (80011b0 <MX_GPIO_Init+0x22c>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001012:	4a67      	ldr	r2, [pc, #412]	@ (80011b0 <MX_GPIO_Init+0x22c>)
 8001014:	f043 0308 	orr.w	r3, r3, #8
 8001018:	6313      	str	r3, [r2, #48]	@ 0x30
 800101a:	4b65      	ldr	r3, [pc, #404]	@ (80011b0 <MX_GPIO_Init+0x22c>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101e:	f003 0308 	and.w	r3, r3, #8
 8001022:	60bb      	str	r3, [r7, #8]
 8001024:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	607b      	str	r3, [r7, #4]
 800102a:	4b61      	ldr	r3, [pc, #388]	@ (80011b0 <MX_GPIO_Init+0x22c>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102e:	4a60      	ldr	r2, [pc, #384]	@ (80011b0 <MX_GPIO_Init+0x22c>)
 8001030:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001034:	6313      	str	r3, [r2, #48]	@ 0x30
 8001036:	4b5e      	ldr	r3, [pc, #376]	@ (80011b0 <MX_GPIO_Init+0x22c>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800103e:	607b      	str	r3, [r7, #4]
 8001040:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 8001042:	2200      	movs	r2, #0
 8001044:	f244 0181 	movw	r1, #16513	@ 0x4081
 8001048:	485a      	ldr	r0, [pc, #360]	@ (80011b4 <MX_GPIO_Init+0x230>)
 800104a:	f000 fc6f 	bl	800192c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800104e:	2200      	movs	r2, #0
 8001050:	2140      	movs	r1, #64	@ 0x40
 8001052:	4859      	ldr	r0, [pc, #356]	@ (80011b8 <MX_GPIO_Init+0x234>)
 8001054:	f000 fc6a 	bl	800192c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8001058:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800105c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800105e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001062:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001064:	2302      	movs	r3, #2
 8001066:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001068:	f107 031c 	add.w	r3, r7, #28
 800106c:	4619      	mov	r1, r3
 800106e:	4853      	ldr	r0, [pc, #332]	@ (80011bc <MX_GPIO_Init+0x238>)
 8001070:	f000 fa98 	bl	80015a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001074:	2332      	movs	r3, #50	@ 0x32
 8001076:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001078:	2302      	movs	r3, #2
 800107a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001080:	2303      	movs	r3, #3
 8001082:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001084:	230b      	movs	r3, #11
 8001086:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001088:	f107 031c 	add.w	r3, r7, #28
 800108c:	4619      	mov	r1, r3
 800108e:	484b      	ldr	r0, [pc, #300]	@ (80011bc <MX_GPIO_Init+0x238>)
 8001090:	f000 fa88 	bl	80015a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001094:	2386      	movs	r3, #134	@ 0x86
 8001096:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001098:	2302      	movs	r3, #2
 800109a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a0:	2303      	movs	r3, #3
 80010a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010a4:	230b      	movs	r3, #11
 80010a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a8:	f107 031c 	add.w	r3, r7, #28
 80010ac:	4619      	mov	r1, r3
 80010ae:	4844      	ldr	r0, [pc, #272]	@ (80011c0 <MX_GPIO_Init+0x23c>)
 80010b0:	f000 fa78 	bl	80015a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED3_Pin|LED2_Pin;
 80010b4:	f244 0381 	movw	r3, #16513	@ 0x4081
 80010b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ba:	2301      	movs	r3, #1
 80010bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c2:	2300      	movs	r3, #0
 80010c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c6:	f107 031c 	add.w	r3, r7, #28
 80010ca:	4619      	mov	r1, r3
 80010cc:	4839      	ldr	r0, [pc, #228]	@ (80011b4 <MX_GPIO_Init+0x230>)
 80010ce:	f000 fa69 	bl	80015a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80010d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d8:	2302      	movs	r3, #2
 80010da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e0:	2303      	movs	r3, #3
 80010e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010e4:	230b      	movs	r3, #11
 80010e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80010e8:	f107 031c 	add.w	r3, r7, #28
 80010ec:	4619      	mov	r1, r3
 80010ee:	4831      	ldr	r0, [pc, #196]	@ (80011b4 <MX_GPIO_Init+0x230>)
 80010f0:	f000 fa58 	bl	80015a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80010f4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80010f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fa:	2302      	movs	r3, #2
 80010fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001102:	2303      	movs	r3, #3
 8001104:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001106:	2307      	movs	r3, #7
 8001108:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800110a:	f107 031c 	add.w	r3, r7, #28
 800110e:	4619      	mov	r1, r3
 8001110:	482c      	ldr	r0, [pc, #176]	@ (80011c4 <MX_GPIO_Init+0x240>)
 8001112:	f000 fa47 	bl	80015a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001116:	2340      	movs	r3, #64	@ 0x40
 8001118:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800111a:	2301      	movs	r3, #1
 800111c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001122:	2300      	movs	r3, #0
 8001124:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001126:	f107 031c 	add.w	r3, r7, #28
 800112a:	4619      	mov	r1, r3
 800112c:	4822      	ldr	r0, [pc, #136]	@ (80011b8 <MX_GPIO_Init+0x234>)
 800112e:	f000 fa39 	bl	80015a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001132:	2380      	movs	r3, #128	@ 0x80
 8001134:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001136:	2300      	movs	r3, #0
 8001138:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800113e:	f107 031c 	add.w	r3, r7, #28
 8001142:	4619      	mov	r1, r3
 8001144:	481c      	ldr	r0, [pc, #112]	@ (80011b8 <MX_GPIO_Init+0x234>)
 8001146:	f000 fa2d 	bl	80015a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800114a:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800114e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001150:	2302      	movs	r3, #2
 8001152:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001158:	2303      	movs	r3, #3
 800115a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800115c:	230a      	movs	r3, #10
 800115e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001160:	f107 031c 	add.w	r3, r7, #28
 8001164:	4619      	mov	r1, r3
 8001166:	4816      	ldr	r0, [pc, #88]	@ (80011c0 <MX_GPIO_Init+0x23c>)
 8001168:	f000 fa1c 	bl	80015a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800116c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001170:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001172:	2300      	movs	r3, #0
 8001174:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800117a:	f107 031c 	add.w	r3, r7, #28
 800117e:	4619      	mov	r1, r3
 8001180:	480f      	ldr	r0, [pc, #60]	@ (80011c0 <MX_GPIO_Init+0x23c>)
 8001182:	f000 fa0f 	bl	80015a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001186:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800118a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118c:	2302      	movs	r3, #2
 800118e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	2300      	movs	r3, #0
 8001192:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001194:	2303      	movs	r3, #3
 8001196:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001198:	230b      	movs	r3, #11
 800119a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800119c:	f107 031c 	add.w	r3, r7, #28
 80011a0:	4619      	mov	r1, r3
 80011a2:	4805      	ldr	r0, [pc, #20]	@ (80011b8 <MX_GPIO_Init+0x234>)
 80011a4:	f000 f9fe 	bl	80015a4 <HAL_GPIO_Init>

}
 80011a8:	bf00      	nop
 80011aa:	3730      	adds	r7, #48	@ 0x30
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	40023800 	.word	0x40023800
 80011b4:	40020400 	.word	0x40020400
 80011b8:	40021800 	.word	0x40021800
 80011bc:	40020800 	.word	0x40020800
 80011c0:	40020000 	.word	0x40020000
 80011c4:	40020c00 	.word	0x40020c00

080011c8 <HAL_MspInit>:

void HAL_MspInit(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	607b      	str	r3, [r7, #4]
 80011d2:	4b11      	ldr	r3, [pc, #68]	@ (8001218 <HAL_MspInit+0x50>)
 80011d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011d6:	4a10      	ldr	r2, [pc, #64]	@ (8001218 <HAL_MspInit+0x50>)
 80011d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80011de:	4b0e      	ldr	r3, [pc, #56]	@ (8001218 <HAL_MspInit+0x50>)
 80011e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011e6:	607b      	str	r3, [r7, #4]
 80011e8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_PWR_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	603b      	str	r3, [r7, #0]
 80011ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001218 <HAL_MspInit+0x50>)
 80011f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f2:	4a09      	ldr	r2, [pc, #36]	@ (8001218 <HAL_MspInit+0x50>)
 80011f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80011fa:	4b07      	ldr	r3, [pc, #28]	@ (8001218 <HAL_MspInit+0x50>)
 80011fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001202:	603b      	str	r3, [r7, #0]
 8001204:	683b      	ldr	r3, [r7, #0]

	MX_GPIO_Init();
 8001206:	f7ff febd 	bl	8000f84 <MX_GPIO_Init>
	MX_I2C1_Init();
 800120a:	f7ff fe33 	bl	8000e74 <MX_I2C1_Init>
}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40023800 	.word	0x40023800

0800121c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001220:	bf00      	nop
 8001222:	e7fd      	b.n	8001220 <NMI_Handler+0x4>

08001224 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001228:	bf00      	nop
 800122a:	e7fd      	b.n	8001228 <HardFault_Handler+0x4>

0800122c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001230:	bf00      	nop
 8001232:	e7fd      	b.n	8001230 <MemManage_Handler+0x4>

08001234 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001238:	bf00      	nop
 800123a:	e7fd      	b.n	8001238 <BusFault_Handler+0x4>

0800123c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001240:	bf00      	nop
 8001242:	e7fd      	b.n	8001240 <UsageFault_Handler+0x4>

08001244 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001248:	bf00      	nop
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr

08001252 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001252:	b480      	push	{r7}
 8001254:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001264:	bf00      	nop
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr

0800126e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001272:	f000 f891 	bl	8001398 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
	...

0800127c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001280:	4b06      	ldr	r3, [pc, #24]	@ (800129c <SystemInit+0x20>)
 8001282:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001286:	4a05      	ldr	r2, [pc, #20]	@ (800129c <SystemInit+0x20>)
 8001288:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800128c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001290:	bf00      	nop
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	e000ed00 	.word	0xe000ed00

080012a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80012a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012d8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012a4:	f7ff ffea 	bl	800127c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012a8:	480c      	ldr	r0, [pc, #48]	@ (80012dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012aa:	490d      	ldr	r1, [pc, #52]	@ (80012e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012ac:	4a0d      	ldr	r2, [pc, #52]	@ (80012e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012b0:	e002      	b.n	80012b8 <LoopCopyDataInit>

080012b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012b6:	3304      	adds	r3, #4

080012b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012bc:	d3f9      	bcc.n	80012b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012be:	4a0a      	ldr	r2, [pc, #40]	@ (80012e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012c0:	4c0a      	ldr	r4, [pc, #40]	@ (80012ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80012c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012c4:	e001      	b.n	80012ca <LoopFillZerobss>

080012c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012c8:	3204      	adds	r2, #4

080012ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012cc:	d3fb      	bcc.n	80012c6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80012ce:	f001 fd33 	bl	8002d38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012d2:	f7ff fd27 	bl	8000d24 <main>
  bx  lr    
 80012d6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80012d8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80012dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012e0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80012e4:	08002e00 	.word	0x08002e00
  ldr r2, =_sbss
 80012e8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80012ec:	200000c0 	.word	0x200000c0

080012f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012f0:	e7fe      	b.n	80012f0 <ADC_IRQHandler>
	...

080012f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001334 <HAL_Init+0x40>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001334 <HAL_Init+0x40>)
 80012fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001302:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001304:	4b0b      	ldr	r3, [pc, #44]	@ (8001334 <HAL_Init+0x40>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a0a      	ldr	r2, [pc, #40]	@ (8001334 <HAL_Init+0x40>)
 800130a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800130e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001310:	4b08      	ldr	r3, [pc, #32]	@ (8001334 <HAL_Init+0x40>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a07      	ldr	r2, [pc, #28]	@ (8001334 <HAL_Init+0x40>)
 8001316:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800131a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800131c:	2003      	movs	r0, #3
 800131e:	f000 f90d 	bl	800153c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001322:	2000      	movs	r0, #0
 8001324:	f000 f808 	bl	8001338 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001328:	f7ff ff4e 	bl	80011c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40023c00 	.word	0x40023c00

08001338 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001340:	4b12      	ldr	r3, [pc, #72]	@ (800138c <HAL_InitTick+0x54>)
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	4b12      	ldr	r3, [pc, #72]	@ (8001390 <HAL_InitTick+0x58>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	4619      	mov	r1, r3
 800134a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800134e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001352:	fbb2 f3f3 	udiv	r3, r2, r3
 8001356:	4618      	mov	r0, r3
 8001358:	f000 f917 	bl	800158a <HAL_SYSTICK_Config>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e00e      	b.n	8001384 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2b0f      	cmp	r3, #15
 800136a:	d80a      	bhi.n	8001382 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800136c:	2200      	movs	r2, #0
 800136e:	6879      	ldr	r1, [r7, #4]
 8001370:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001374:	f000 f8ed 	bl	8001552 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001378:	4a06      	ldr	r2, [pc, #24]	@ (8001394 <HAL_InitTick+0x5c>)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800137e:	2300      	movs	r3, #0
 8001380:	e000      	b.n	8001384 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
}
 8001384:	4618      	mov	r0, r3
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20000000 	.word	0x20000000
 8001390:	20000008 	.word	0x20000008
 8001394:	20000004 	.word	0x20000004

08001398 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800139c:	4b06      	ldr	r3, [pc, #24]	@ (80013b8 <HAL_IncTick+0x20>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	461a      	mov	r2, r3
 80013a2:	4b06      	ldr	r3, [pc, #24]	@ (80013bc <HAL_IncTick+0x24>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4413      	add	r3, r2
 80013a8:	4a04      	ldr	r2, [pc, #16]	@ (80013bc <HAL_IncTick+0x24>)
 80013aa:	6013      	str	r3, [r2, #0]
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	20000008 	.word	0x20000008
 80013bc:	200000bc 	.word	0x200000bc

080013c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  return uwTick;
 80013c4:	4b03      	ldr	r3, [pc, #12]	@ (80013d4 <HAL_GetTick+0x14>)
 80013c6:	681b      	ldr	r3, [r3, #0]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	200000bc 	.word	0x200000bc

080013d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d8:	b480      	push	{r7}
 80013da:	b085      	sub	sp, #20
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f003 0307 	and.w	r3, r3, #7
 80013e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013e8:	4b0c      	ldr	r3, [pc, #48]	@ (800141c <__NVIC_SetPriorityGrouping+0x44>)
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ee:	68ba      	ldr	r2, [r7, #8]
 80013f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013f4:	4013      	ands	r3, r2
 80013f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001400:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001404:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001408:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800140a:	4a04      	ldr	r2, [pc, #16]	@ (800141c <__NVIC_SetPriorityGrouping+0x44>)
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	60d3      	str	r3, [r2, #12]
}
 8001410:	bf00      	nop
 8001412:	3714      	adds	r7, #20
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	e000ed00 	.word	0xe000ed00

08001420 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001424:	4b04      	ldr	r3, [pc, #16]	@ (8001438 <__NVIC_GetPriorityGrouping+0x18>)
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	0a1b      	lsrs	r3, r3, #8
 800142a:	f003 0307 	and.w	r3, r3, #7
}
 800142e:	4618      	mov	r0, r3
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	e000ed00 	.word	0xe000ed00

0800143c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	6039      	str	r1, [r7, #0]
 8001446:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144c:	2b00      	cmp	r3, #0
 800144e:	db0a      	blt.n	8001466 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	b2da      	uxtb	r2, r3
 8001454:	490c      	ldr	r1, [pc, #48]	@ (8001488 <__NVIC_SetPriority+0x4c>)
 8001456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145a:	0112      	lsls	r2, r2, #4
 800145c:	b2d2      	uxtb	r2, r2
 800145e:	440b      	add	r3, r1
 8001460:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001464:	e00a      	b.n	800147c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	b2da      	uxtb	r2, r3
 800146a:	4908      	ldr	r1, [pc, #32]	@ (800148c <__NVIC_SetPriority+0x50>)
 800146c:	79fb      	ldrb	r3, [r7, #7]
 800146e:	f003 030f 	and.w	r3, r3, #15
 8001472:	3b04      	subs	r3, #4
 8001474:	0112      	lsls	r2, r2, #4
 8001476:	b2d2      	uxtb	r2, r2
 8001478:	440b      	add	r3, r1
 800147a:	761a      	strb	r2, [r3, #24]
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	e000e100 	.word	0xe000e100
 800148c:	e000ed00 	.word	0xe000ed00

08001490 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001490:	b480      	push	{r7}
 8001492:	b089      	sub	sp, #36	@ 0x24
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f003 0307 	and.w	r3, r3, #7
 80014a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	f1c3 0307 	rsb	r3, r3, #7
 80014aa:	2b04      	cmp	r3, #4
 80014ac:	bf28      	it	cs
 80014ae:	2304      	movcs	r3, #4
 80014b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	3304      	adds	r3, #4
 80014b6:	2b06      	cmp	r3, #6
 80014b8:	d902      	bls.n	80014c0 <NVIC_EncodePriority+0x30>
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	3b03      	subs	r3, #3
 80014be:	e000      	b.n	80014c2 <NVIC_EncodePriority+0x32>
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	43da      	mvns	r2, r3
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	401a      	ands	r2, r3
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014d8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	fa01 f303 	lsl.w	r3, r1, r3
 80014e2:	43d9      	mvns	r1, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e8:	4313      	orrs	r3, r2
         );
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3724      	adds	r7, #36	@ 0x24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
	...

080014f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	3b01      	subs	r3, #1
 8001504:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001508:	d301      	bcc.n	800150e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800150a:	2301      	movs	r3, #1
 800150c:	e00f      	b.n	800152e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800150e:	4a0a      	ldr	r2, [pc, #40]	@ (8001538 <SysTick_Config+0x40>)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3b01      	subs	r3, #1
 8001514:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001516:	210f      	movs	r1, #15
 8001518:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800151c:	f7ff ff8e 	bl	800143c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001520:	4b05      	ldr	r3, [pc, #20]	@ (8001538 <SysTick_Config+0x40>)
 8001522:	2200      	movs	r2, #0
 8001524:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001526:	4b04      	ldr	r3, [pc, #16]	@ (8001538 <SysTick_Config+0x40>)
 8001528:	2207      	movs	r2, #7
 800152a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	e000e010 	.word	0xe000e010

0800153c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f7ff ff47 	bl	80013d8 <__NVIC_SetPriorityGrouping>
}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001552:	b580      	push	{r7, lr}
 8001554:	b086      	sub	sp, #24
 8001556:	af00      	add	r7, sp, #0
 8001558:	4603      	mov	r3, r0
 800155a:	60b9      	str	r1, [r7, #8]
 800155c:	607a      	str	r2, [r7, #4]
 800155e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001560:	2300      	movs	r3, #0
 8001562:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001564:	f7ff ff5c 	bl	8001420 <__NVIC_GetPriorityGrouping>
 8001568:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	68b9      	ldr	r1, [r7, #8]
 800156e:	6978      	ldr	r0, [r7, #20]
 8001570:	f7ff ff8e 	bl	8001490 <NVIC_EncodePriority>
 8001574:	4602      	mov	r2, r0
 8001576:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800157a:	4611      	mov	r1, r2
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff ff5d 	bl	800143c <__NVIC_SetPriority>
}
 8001582:	bf00      	nop
 8001584:	3718      	adds	r7, #24
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b082      	sub	sp, #8
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7ff ffb0 	bl	80014f8 <SysTick_Config>
 8001598:	4603      	mov	r3, r0
}
 800159a:	4618      	mov	r0, r3
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
	...

080015a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b089      	sub	sp, #36	@ 0x24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015ae:	2300      	movs	r3, #0
 80015b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015b2:	2300      	movs	r3, #0
 80015b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015b6:	2300      	movs	r3, #0
 80015b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015ba:	2300      	movs	r3, #0
 80015bc:	61fb      	str	r3, [r7, #28]
 80015be:	e177      	b.n	80018b0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015c0:	2201      	movs	r2, #1
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	697a      	ldr	r2, [r7, #20]
 80015d0:	4013      	ands	r3, r2
 80015d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015d4:	693a      	ldr	r2, [r7, #16]
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	429a      	cmp	r2, r3
 80015da:	f040 8166 	bne.w	80018aa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f003 0303 	and.w	r3, r3, #3
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d005      	beq.n	80015f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d130      	bne.n	8001658 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	2203      	movs	r2, #3
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	43db      	mvns	r3, r3
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	4013      	ands	r3, r2
 800160c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	68da      	ldr	r2, [r3, #12]
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	4313      	orrs	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800162c:	2201      	movs	r2, #1
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	43db      	mvns	r3, r3
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	4013      	ands	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	091b      	lsrs	r3, r3, #4
 8001642:	f003 0201 	and.w	r2, r3, #1
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	4313      	orrs	r3, r2
 8001650:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f003 0303 	and.w	r3, r3, #3
 8001660:	2b03      	cmp	r3, #3
 8001662:	d017      	beq.n	8001694 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	2203      	movs	r2, #3
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	43db      	mvns	r3, r3
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	4013      	ands	r3, r2
 800167a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	689a      	ldr	r2, [r3, #8]
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	4313      	orrs	r3, r2
 800168c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f003 0303 	and.w	r3, r3, #3
 800169c:	2b02      	cmp	r3, #2
 800169e:	d123      	bne.n	80016e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	08da      	lsrs	r2, r3, #3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	3208      	adds	r2, #8
 80016a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	f003 0307 	and.w	r3, r3, #7
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	220f      	movs	r2, #15
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	43db      	mvns	r3, r3
 80016be:	69ba      	ldr	r2, [r7, #24]
 80016c0:	4013      	ands	r3, r2
 80016c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	691a      	ldr	r2, [r3, #16]
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	f003 0307 	and.w	r3, r3, #7
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	08da      	lsrs	r2, r3, #3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	3208      	adds	r2, #8
 80016e2:	69b9      	ldr	r1, [r7, #24]
 80016e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	2203      	movs	r2, #3
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	43db      	mvns	r3, r3
 80016fa:	69ba      	ldr	r2, [r7, #24]
 80016fc:	4013      	ands	r3, r2
 80016fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f003 0203 	and.w	r2, r3, #3
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	4313      	orrs	r3, r2
 8001714:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001724:	2b00      	cmp	r3, #0
 8001726:	f000 80c0 	beq.w	80018aa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	60fb      	str	r3, [r7, #12]
 800172e:	4b66      	ldr	r3, [pc, #408]	@ (80018c8 <HAL_GPIO_Init+0x324>)
 8001730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001732:	4a65      	ldr	r2, [pc, #404]	@ (80018c8 <HAL_GPIO_Init+0x324>)
 8001734:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001738:	6453      	str	r3, [r2, #68]	@ 0x44
 800173a:	4b63      	ldr	r3, [pc, #396]	@ (80018c8 <HAL_GPIO_Init+0x324>)
 800173c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800173e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001742:	60fb      	str	r3, [r7, #12]
 8001744:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001746:	4a61      	ldr	r2, [pc, #388]	@ (80018cc <HAL_GPIO_Init+0x328>)
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	089b      	lsrs	r3, r3, #2
 800174c:	3302      	adds	r3, #2
 800174e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001752:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	f003 0303 	and.w	r3, r3, #3
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	220f      	movs	r2, #15
 800175e:	fa02 f303 	lsl.w	r3, r2, r3
 8001762:	43db      	mvns	r3, r3
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	4013      	ands	r3, r2
 8001768:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a58      	ldr	r2, [pc, #352]	@ (80018d0 <HAL_GPIO_Init+0x32c>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d037      	beq.n	80017e2 <HAL_GPIO_Init+0x23e>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4a57      	ldr	r2, [pc, #348]	@ (80018d4 <HAL_GPIO_Init+0x330>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d031      	beq.n	80017de <HAL_GPIO_Init+0x23a>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4a56      	ldr	r2, [pc, #344]	@ (80018d8 <HAL_GPIO_Init+0x334>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d02b      	beq.n	80017da <HAL_GPIO_Init+0x236>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a55      	ldr	r2, [pc, #340]	@ (80018dc <HAL_GPIO_Init+0x338>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d025      	beq.n	80017d6 <HAL_GPIO_Init+0x232>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a54      	ldr	r2, [pc, #336]	@ (80018e0 <HAL_GPIO_Init+0x33c>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d01f      	beq.n	80017d2 <HAL_GPIO_Init+0x22e>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a53      	ldr	r2, [pc, #332]	@ (80018e4 <HAL_GPIO_Init+0x340>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d019      	beq.n	80017ce <HAL_GPIO_Init+0x22a>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a52      	ldr	r2, [pc, #328]	@ (80018e8 <HAL_GPIO_Init+0x344>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d013      	beq.n	80017ca <HAL_GPIO_Init+0x226>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a51      	ldr	r2, [pc, #324]	@ (80018ec <HAL_GPIO_Init+0x348>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d00d      	beq.n	80017c6 <HAL_GPIO_Init+0x222>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a50      	ldr	r2, [pc, #320]	@ (80018f0 <HAL_GPIO_Init+0x34c>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d007      	beq.n	80017c2 <HAL_GPIO_Init+0x21e>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a4f      	ldr	r2, [pc, #316]	@ (80018f4 <HAL_GPIO_Init+0x350>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d101      	bne.n	80017be <HAL_GPIO_Init+0x21a>
 80017ba:	2309      	movs	r3, #9
 80017bc:	e012      	b.n	80017e4 <HAL_GPIO_Init+0x240>
 80017be:	230a      	movs	r3, #10
 80017c0:	e010      	b.n	80017e4 <HAL_GPIO_Init+0x240>
 80017c2:	2308      	movs	r3, #8
 80017c4:	e00e      	b.n	80017e4 <HAL_GPIO_Init+0x240>
 80017c6:	2307      	movs	r3, #7
 80017c8:	e00c      	b.n	80017e4 <HAL_GPIO_Init+0x240>
 80017ca:	2306      	movs	r3, #6
 80017cc:	e00a      	b.n	80017e4 <HAL_GPIO_Init+0x240>
 80017ce:	2305      	movs	r3, #5
 80017d0:	e008      	b.n	80017e4 <HAL_GPIO_Init+0x240>
 80017d2:	2304      	movs	r3, #4
 80017d4:	e006      	b.n	80017e4 <HAL_GPIO_Init+0x240>
 80017d6:	2303      	movs	r3, #3
 80017d8:	e004      	b.n	80017e4 <HAL_GPIO_Init+0x240>
 80017da:	2302      	movs	r3, #2
 80017dc:	e002      	b.n	80017e4 <HAL_GPIO_Init+0x240>
 80017de:	2301      	movs	r3, #1
 80017e0:	e000      	b.n	80017e4 <HAL_GPIO_Init+0x240>
 80017e2:	2300      	movs	r3, #0
 80017e4:	69fa      	ldr	r2, [r7, #28]
 80017e6:	f002 0203 	and.w	r2, r2, #3
 80017ea:	0092      	lsls	r2, r2, #2
 80017ec:	4093      	lsls	r3, r2
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017f4:	4935      	ldr	r1, [pc, #212]	@ (80018cc <HAL_GPIO_Init+0x328>)
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	089b      	lsrs	r3, r3, #2
 80017fa:	3302      	adds	r3, #2
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001802:	4b3d      	ldr	r3, [pc, #244]	@ (80018f8 <HAL_GPIO_Init+0x354>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	43db      	mvns	r3, r3
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	4013      	ands	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d003      	beq.n	8001826 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800181e:	69ba      	ldr	r2, [r7, #24]
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	4313      	orrs	r3, r2
 8001824:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001826:	4a34      	ldr	r2, [pc, #208]	@ (80018f8 <HAL_GPIO_Init+0x354>)
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800182c:	4b32      	ldr	r3, [pc, #200]	@ (80018f8 <HAL_GPIO_Init+0x354>)
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	43db      	mvns	r3, r3
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	4013      	ands	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d003      	beq.n	8001850 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	4313      	orrs	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001850:	4a29      	ldr	r2, [pc, #164]	@ (80018f8 <HAL_GPIO_Init+0x354>)
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001856:	4b28      	ldr	r3, [pc, #160]	@ (80018f8 <HAL_GPIO_Init+0x354>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	43db      	mvns	r3, r3
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	4013      	ands	r3, r2
 8001864:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d003      	beq.n	800187a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	4313      	orrs	r3, r2
 8001878:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800187a:	4a1f      	ldr	r2, [pc, #124]	@ (80018f8 <HAL_GPIO_Init+0x354>)
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001880:	4b1d      	ldr	r3, [pc, #116]	@ (80018f8 <HAL_GPIO_Init+0x354>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	43db      	mvns	r3, r3
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	4013      	ands	r3, r2
 800188e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d003      	beq.n	80018a4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018a4:	4a14      	ldr	r2, [pc, #80]	@ (80018f8 <HAL_GPIO_Init+0x354>)
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	3301      	adds	r3, #1
 80018ae:	61fb      	str	r3, [r7, #28]
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	2b0f      	cmp	r3, #15
 80018b4:	f67f ae84 	bls.w	80015c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018b8:	bf00      	nop
 80018ba:	bf00      	nop
 80018bc:	3724      	adds	r7, #36	@ 0x24
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	40023800 	.word	0x40023800
 80018cc:	40013800 	.word	0x40013800
 80018d0:	40020000 	.word	0x40020000
 80018d4:	40020400 	.word	0x40020400
 80018d8:	40020800 	.word	0x40020800
 80018dc:	40020c00 	.word	0x40020c00
 80018e0:	40021000 	.word	0x40021000
 80018e4:	40021400 	.word	0x40021400
 80018e8:	40021800 	.word	0x40021800
 80018ec:	40021c00 	.word	0x40021c00
 80018f0:	40022000 	.word	0x40022000
 80018f4:	40022400 	.word	0x40022400
 80018f8:	40013c00 	.word	0x40013c00

080018fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	460b      	mov	r3, r1
 8001906:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	691a      	ldr	r2, [r3, #16]
 800190c:	887b      	ldrh	r3, [r7, #2]
 800190e:	4013      	ands	r3, r2
 8001910:	2b00      	cmp	r3, #0
 8001912:	d002      	beq.n	800191a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001914:	2301      	movs	r3, #1
 8001916:	73fb      	strb	r3, [r7, #15]
 8001918:	e001      	b.n	800191e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800191a:	2300      	movs	r3, #0
 800191c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800191e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001920:	4618      	mov	r0, r3
 8001922:	3714      	adds	r7, #20
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	460b      	mov	r3, r1
 8001936:	807b      	strh	r3, [r7, #2]
 8001938:	4613      	mov	r3, r2
 800193a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800193c:	787b      	ldrb	r3, [r7, #1]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d003      	beq.n	800194a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001942:	887a      	ldrh	r2, [r7, #2]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001948:	e003      	b.n	8001952 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800194a:	887b      	ldrh	r3, [r7, #2]
 800194c:	041a      	lsls	r2, r3, #16
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	619a      	str	r2, [r3, #24]
}
 8001952:	bf00      	nop
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
	...

08001960 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d101      	bne.n	8001972 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e12b      	b.n	8001bca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001978:	b2db      	uxtb	r3, r3
 800197a:	2b00      	cmp	r3, #0
 800197c:	d106      	bne.n	800198c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2200      	movs	r2, #0
 8001982:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f7ff fab4 	bl	8000ef4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2224      	movs	r2, #36	@ 0x24
 8001990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f022 0201 	bic.w	r2, r2, #1
 80019a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80019b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80019c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80019c4:	f001 f9a4 	bl	8002d10 <HAL_RCC_GetPCLK1Freq>
 80019c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	4a81      	ldr	r2, [pc, #516]	@ (8001bd4 <HAL_I2C_Init+0x274>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d807      	bhi.n	80019e4 <HAL_I2C_Init+0x84>
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	4a80      	ldr	r2, [pc, #512]	@ (8001bd8 <HAL_I2C_Init+0x278>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	bf94      	ite	ls
 80019dc:	2301      	movls	r3, #1
 80019de:	2300      	movhi	r3, #0
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	e006      	b.n	80019f2 <HAL_I2C_Init+0x92>
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	4a7d      	ldr	r2, [pc, #500]	@ (8001bdc <HAL_I2C_Init+0x27c>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	bf94      	ite	ls
 80019ec:	2301      	movls	r3, #1
 80019ee:	2300      	movhi	r3, #0
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e0e7      	b.n	8001bca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	4a78      	ldr	r2, [pc, #480]	@ (8001be0 <HAL_I2C_Init+0x280>)
 80019fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001a02:	0c9b      	lsrs	r3, r3, #18
 8001a04:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	68ba      	ldr	r2, [r7, #8]
 8001a16:	430a      	orrs	r2, r1
 8001a18:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	6a1b      	ldr	r3, [r3, #32]
 8001a20:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	4a6a      	ldr	r2, [pc, #424]	@ (8001bd4 <HAL_I2C_Init+0x274>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d802      	bhi.n	8001a34 <HAL_I2C_Init+0xd4>
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	3301      	adds	r3, #1
 8001a32:	e009      	b.n	8001a48 <HAL_I2C_Init+0xe8>
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001a3a:	fb02 f303 	mul.w	r3, r2, r3
 8001a3e:	4a69      	ldr	r2, [pc, #420]	@ (8001be4 <HAL_I2C_Init+0x284>)
 8001a40:	fba2 2303 	umull	r2, r3, r2, r3
 8001a44:	099b      	lsrs	r3, r3, #6
 8001a46:	3301      	adds	r3, #1
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	6812      	ldr	r2, [r2, #0]
 8001a4c:	430b      	orrs	r3, r1
 8001a4e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	69db      	ldr	r3, [r3, #28]
 8001a56:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001a5a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	495c      	ldr	r1, [pc, #368]	@ (8001bd4 <HAL_I2C_Init+0x274>)
 8001a64:	428b      	cmp	r3, r1
 8001a66:	d819      	bhi.n	8001a9c <HAL_I2C_Init+0x13c>
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	1e59      	subs	r1, r3, #1
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a76:	1c59      	adds	r1, r3, #1
 8001a78:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001a7c:	400b      	ands	r3, r1
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d00a      	beq.n	8001a98 <HAL_I2C_Init+0x138>
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	1e59      	subs	r1, r3, #1
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a90:	3301      	adds	r3, #1
 8001a92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a96:	e051      	b.n	8001b3c <HAL_I2C_Init+0x1dc>
 8001a98:	2304      	movs	r3, #4
 8001a9a:	e04f      	b.n	8001b3c <HAL_I2C_Init+0x1dc>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d111      	bne.n	8001ac8 <HAL_I2C_Init+0x168>
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	1e58      	subs	r0, r3, #1
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6859      	ldr	r1, [r3, #4]
 8001aac:	460b      	mov	r3, r1
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	440b      	add	r3, r1
 8001ab2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	bf0c      	ite	eq
 8001ac0:	2301      	moveq	r3, #1
 8001ac2:	2300      	movne	r3, #0
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	e012      	b.n	8001aee <HAL_I2C_Init+0x18e>
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	1e58      	subs	r0, r3, #1
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6859      	ldr	r1, [r3, #4]
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	440b      	add	r3, r1
 8001ad6:	0099      	lsls	r1, r3, #2
 8001ad8:	440b      	add	r3, r1
 8001ada:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ade:	3301      	adds	r3, #1
 8001ae0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	bf0c      	ite	eq
 8001ae8:	2301      	moveq	r3, #1
 8001aea:	2300      	movne	r3, #0
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <HAL_I2C_Init+0x196>
 8001af2:	2301      	movs	r3, #1
 8001af4:	e022      	b.n	8001b3c <HAL_I2C_Init+0x1dc>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d10e      	bne.n	8001b1c <HAL_I2C_Init+0x1bc>
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	1e58      	subs	r0, r3, #1
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6859      	ldr	r1, [r3, #4]
 8001b06:	460b      	mov	r3, r1
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	440b      	add	r3, r1
 8001b0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b10:	3301      	adds	r3, #1
 8001b12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b1a:	e00f      	b.n	8001b3c <HAL_I2C_Init+0x1dc>
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	1e58      	subs	r0, r3, #1
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6859      	ldr	r1, [r3, #4]
 8001b24:	460b      	mov	r3, r1
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	440b      	add	r3, r1
 8001b2a:	0099      	lsls	r1, r3, #2
 8001b2c:	440b      	add	r3, r1
 8001b2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b32:	3301      	adds	r3, #1
 8001b34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b38:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001b3c:	6879      	ldr	r1, [r7, #4]
 8001b3e:	6809      	ldr	r1, [r1, #0]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	69da      	ldr	r2, [r3, #28]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a1b      	ldr	r3, [r3, #32]
 8001b56:	431a      	orrs	r2, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	430a      	orrs	r2, r1
 8001b5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001b6a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	6911      	ldr	r1, [r2, #16]
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	68d2      	ldr	r2, [r2, #12]
 8001b76:	4311      	orrs	r1, r2
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	6812      	ldr	r2, [r2, #0]
 8001b7c:	430b      	orrs	r3, r1
 8001b7e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	695a      	ldr	r2, [r3, #20]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	431a      	orrs	r2, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	430a      	orrs	r2, r1
 8001b9a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f042 0201 	orr.w	r2, r2, #1
 8001baa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2220      	movs	r2, #32
 8001bb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3710      	adds	r7, #16
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	000186a0 	.word	0x000186a0
 8001bd8:	001e847f 	.word	0x001e847f
 8001bdc:	003d08ff 	.word	0x003d08ff
 8001be0:	431bde83 	.word	0x431bde83
 8001be4:	10624dd3 	.word	0x10624dd3

08001be8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b088      	sub	sp, #32
 8001bec:	af02      	add	r7, sp, #8
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	607a      	str	r2, [r7, #4]
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	817b      	strh	r3, [r7, #10]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001bfc:	f7ff fbe0 	bl	80013c0 <HAL_GetTick>
 8001c00:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	2b20      	cmp	r3, #32
 8001c0c:	f040 80e0 	bne.w	8001dd0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	9300      	str	r3, [sp, #0]
 8001c14:	2319      	movs	r3, #25
 8001c16:	2201      	movs	r2, #1
 8001c18:	4970      	ldr	r1, [pc, #448]	@ (8001ddc <HAL_I2C_Master_Transmit+0x1f4>)
 8001c1a:	68f8      	ldr	r0, [r7, #12]
 8001c1c:	f000 f964 	bl	8001ee8 <I2C_WaitOnFlagUntilTimeout>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001c26:	2302      	movs	r3, #2
 8001c28:	e0d3      	b.n	8001dd2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d101      	bne.n	8001c38 <HAL_I2C_Master_Transmit+0x50>
 8001c34:	2302      	movs	r3, #2
 8001c36:	e0cc      	b.n	8001dd2 <HAL_I2C_Master_Transmit+0x1ea>
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d007      	beq.n	8001c5e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f042 0201 	orr.w	r2, r2, #1
 8001c5c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c6c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2221      	movs	r2, #33	@ 0x21
 8001c72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2210      	movs	r2, #16
 8001c7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2200      	movs	r2, #0
 8001c82:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	893a      	ldrh	r2, [r7, #8]
 8001c8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c94:	b29a      	uxth	r2, r3
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	4a50      	ldr	r2, [pc, #320]	@ (8001de0 <HAL_I2C_Master_Transmit+0x1f8>)
 8001c9e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001ca0:	8979      	ldrh	r1, [r7, #10]
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	6a3a      	ldr	r2, [r7, #32]
 8001ca6:	68f8      	ldr	r0, [r7, #12]
 8001ca8:	f000 f89c 	bl	8001de4 <I2C_MasterRequestWrite>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e08d      	b.n	8001dd2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	613b      	str	r3, [r7, #16]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	695b      	ldr	r3, [r3, #20]
 8001cc0:	613b      	str	r3, [r7, #16]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	613b      	str	r3, [r7, #16]
 8001cca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001ccc:	e066      	b.n	8001d9c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cce:	697a      	ldr	r2, [r7, #20]
 8001cd0:	6a39      	ldr	r1, [r7, #32]
 8001cd2:	68f8      	ldr	r0, [r7, #12]
 8001cd4:	f000 fa22 	bl	800211c <I2C_WaitOnTXEFlagUntilTimeout>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d00d      	beq.n	8001cfa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce2:	2b04      	cmp	r3, #4
 8001ce4:	d107      	bne.n	8001cf6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001cf4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e06b      	b.n	8001dd2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cfe:	781a      	ldrb	r2, [r3, #0]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d0a:	1c5a      	adds	r2, r3, #1
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	3b01      	subs	r3, #1
 8001d18:	b29a      	uxth	r2, r3
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d22:	3b01      	subs	r3, #1
 8001d24:	b29a      	uxth	r2, r3
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	695b      	ldr	r3, [r3, #20]
 8001d30:	f003 0304 	and.w	r3, r3, #4
 8001d34:	2b04      	cmp	r3, #4
 8001d36:	d11b      	bne.n	8001d70 <HAL_I2C_Master_Transmit+0x188>
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d017      	beq.n	8001d70 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d44:	781a      	ldrb	r2, [r3, #0]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d50:	1c5a      	adds	r2, r3, #1
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	b29a      	uxth	r2, r3
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d68:	3b01      	subs	r3, #1
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d70:	697a      	ldr	r2, [r7, #20]
 8001d72:	6a39      	ldr	r1, [r7, #32]
 8001d74:	68f8      	ldr	r0, [r7, #12]
 8001d76:	f000 fa19 	bl	80021ac <I2C_WaitOnBTFFlagUntilTimeout>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d00d      	beq.n	8001d9c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d84:	2b04      	cmp	r3, #4
 8001d86:	d107      	bne.n	8001d98 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d96:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e01a      	b.n	8001dd2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d194      	bne.n	8001cce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001db2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2220      	movs	r2, #32
 8001db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	e000      	b.n	8001dd2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001dd0:	2302      	movs	r3, #2
  }
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3718      	adds	r7, #24
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	00100002 	.word	0x00100002
 8001de0:	ffff0000 	.word	0xffff0000

08001de4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b088      	sub	sp, #32
 8001de8:	af02      	add	r7, sp, #8
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	607a      	str	r2, [r7, #4]
 8001dee:	603b      	str	r3, [r7, #0]
 8001df0:	460b      	mov	r3, r1
 8001df2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001df8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	2b08      	cmp	r3, #8
 8001dfe:	d006      	beq.n	8001e0e <I2C_MasterRequestWrite+0x2a>
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d003      	beq.n	8001e0e <I2C_MasterRequestWrite+0x2a>
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001e0c:	d108      	bne.n	8001e20 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001e1c:	601a      	str	r2, [r3, #0]
 8001e1e:	e00b      	b.n	8001e38 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e24:	2b12      	cmp	r3, #18
 8001e26:	d107      	bne.n	8001e38 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001e36:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	9300      	str	r3, [sp, #0]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001e44:	68f8      	ldr	r0, [r7, #12]
 8001e46:	f000 f84f 	bl	8001ee8 <I2C_WaitOnFlagUntilTimeout>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d00d      	beq.n	8001e6c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e5e:	d103      	bne.n	8001e68 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e66:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e035      	b.n	8001ed8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	691b      	ldr	r3, [r3, #16]
 8001e70:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001e74:	d108      	bne.n	8001e88 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e76:	897b      	ldrh	r3, [r7, #10]
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001e84:	611a      	str	r2, [r3, #16]
 8001e86:	e01b      	b.n	8001ec0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001e88:	897b      	ldrh	r3, [r7, #10]
 8001e8a:	11db      	asrs	r3, r3, #7
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	f003 0306 	and.w	r3, r3, #6
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	f063 030f 	orn	r3, r3, #15
 8001e98:	b2da      	uxtb	r2, r3
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	490e      	ldr	r1, [pc, #56]	@ (8001ee0 <I2C_MasterRequestWrite+0xfc>)
 8001ea6:	68f8      	ldr	r0, [r7, #12]
 8001ea8:	f000 f898 	bl	8001fdc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e010      	b.n	8001ed8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001eb6:	897b      	ldrh	r3, [r7, #10]
 8001eb8:	b2da      	uxtb	r2, r3
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	4907      	ldr	r1, [pc, #28]	@ (8001ee4 <I2C_MasterRequestWrite+0x100>)
 8001ec6:	68f8      	ldr	r0, [r7, #12]
 8001ec8:	f000 f888 	bl	8001fdc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e000      	b.n	8001ed8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3718      	adds	r7, #24
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	00010008 	.word	0x00010008
 8001ee4:	00010002 	.word	0x00010002

08001ee8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	603b      	str	r3, [r7, #0]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ef8:	e048      	b.n	8001f8c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001f00:	d044      	beq.n	8001f8c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f02:	f7ff fa5d 	bl	80013c0 <HAL_GetTick>
 8001f06:	4602      	mov	r2, r0
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	683a      	ldr	r2, [r7, #0]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d302      	bcc.n	8001f18 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d139      	bne.n	8001f8c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	0c1b      	lsrs	r3, r3, #16
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d10d      	bne.n	8001f3e <I2C_WaitOnFlagUntilTimeout+0x56>
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	695b      	ldr	r3, [r3, #20]
 8001f28:	43da      	mvns	r2, r3
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	bf0c      	ite	eq
 8001f34:	2301      	moveq	r3, #1
 8001f36:	2300      	movne	r3, #0
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	e00c      	b.n	8001f58 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	699b      	ldr	r3, [r3, #24]
 8001f44:	43da      	mvns	r2, r3
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	bf0c      	ite	eq
 8001f50:	2301      	moveq	r3, #1
 8001f52:	2300      	movne	r3, #0
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	461a      	mov	r2, r3
 8001f58:	79fb      	ldrb	r3, [r7, #7]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d116      	bne.n	8001f8c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2200      	movs	r2, #0
 8001f62:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2220      	movs	r2, #32
 8001f68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f78:	f043 0220 	orr.w	r2, r3, #32
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e023      	b.n	8001fd4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	0c1b      	lsrs	r3, r3, #16
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d10d      	bne.n	8001fb2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	695b      	ldr	r3, [r3, #20]
 8001f9c:	43da      	mvns	r2, r3
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	bf0c      	ite	eq
 8001fa8:	2301      	moveq	r3, #1
 8001faa:	2300      	movne	r3, #0
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	461a      	mov	r2, r3
 8001fb0:	e00c      	b.n	8001fcc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	43da      	mvns	r2, r3
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	bf0c      	ite	eq
 8001fc4:	2301      	moveq	r3, #1
 8001fc6:	2300      	movne	r3, #0
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	461a      	mov	r2, r3
 8001fcc:	79fb      	ldrb	r3, [r7, #7]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d093      	beq.n	8001efa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001fd2:	2300      	movs	r3, #0
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3710      	adds	r7, #16
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
 8001fe8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001fea:	e071      	b.n	80020d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	695b      	ldr	r3, [r3, #20]
 8001ff2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ff6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ffa:	d123      	bne.n	8002044 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800200a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002014:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2200      	movs	r2, #0
 800201a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2220      	movs	r2, #32
 8002020:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2200      	movs	r2, #0
 8002028:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002030:	f043 0204 	orr.w	r2, r3, #4
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2200      	movs	r2, #0
 800203c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e067      	b.n	8002114 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800204a:	d041      	beq.n	80020d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800204c:	f7ff f9b8 	bl	80013c0 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	429a      	cmp	r2, r3
 800205a:	d302      	bcc.n	8002062 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d136      	bne.n	80020d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	0c1b      	lsrs	r3, r3, #16
 8002066:	b2db      	uxtb	r3, r3
 8002068:	2b01      	cmp	r3, #1
 800206a:	d10c      	bne.n	8002086 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	695b      	ldr	r3, [r3, #20]
 8002072:	43da      	mvns	r2, r3
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	4013      	ands	r3, r2
 8002078:	b29b      	uxth	r3, r3
 800207a:	2b00      	cmp	r3, #0
 800207c:	bf14      	ite	ne
 800207e:	2301      	movne	r3, #1
 8002080:	2300      	moveq	r3, #0
 8002082:	b2db      	uxtb	r3, r3
 8002084:	e00b      	b.n	800209e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	43da      	mvns	r2, r3
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	4013      	ands	r3, r2
 8002092:	b29b      	uxth	r3, r3
 8002094:	2b00      	cmp	r3, #0
 8002096:	bf14      	ite	ne
 8002098:	2301      	movne	r3, #1
 800209a:	2300      	moveq	r3, #0
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d016      	beq.n	80020d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2200      	movs	r2, #0
 80020a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2220      	movs	r2, #32
 80020ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020bc:	f043 0220 	orr.w	r2, r3, #32
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e021      	b.n	8002114 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	0c1b      	lsrs	r3, r3, #16
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d10c      	bne.n	80020f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	695b      	ldr	r3, [r3, #20]
 80020e0:	43da      	mvns	r2, r3
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	4013      	ands	r3, r2
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	bf14      	ite	ne
 80020ec:	2301      	movne	r3, #1
 80020ee:	2300      	moveq	r3, #0
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	e00b      	b.n	800210c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	699b      	ldr	r3, [r3, #24]
 80020fa:	43da      	mvns	r2, r3
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	4013      	ands	r3, r2
 8002100:	b29b      	uxth	r3, r3
 8002102:	2b00      	cmp	r3, #0
 8002104:	bf14      	ite	ne
 8002106:	2301      	movne	r3, #1
 8002108:	2300      	moveq	r3, #0
 800210a:	b2db      	uxtb	r3, r3
 800210c:	2b00      	cmp	r3, #0
 800210e:	f47f af6d 	bne.w	8001fec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	3710      	adds	r7, #16
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002128:	e034      	b.n	8002194 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800212a:	68f8      	ldr	r0, [r7, #12]
 800212c:	f000 f886 	bl	800223c <I2C_IsAcknowledgeFailed>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e034      	b.n	80021a4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002140:	d028      	beq.n	8002194 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002142:	f7ff f93d 	bl	80013c0 <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	68ba      	ldr	r2, [r7, #8]
 800214e:	429a      	cmp	r2, r3
 8002150:	d302      	bcc.n	8002158 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d11d      	bne.n	8002194 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	695b      	ldr	r3, [r3, #20]
 800215e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002162:	2b80      	cmp	r3, #128	@ 0x80
 8002164:	d016      	beq.n	8002194 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2200      	movs	r2, #0
 800216a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2220      	movs	r2, #32
 8002170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2200      	movs	r2, #0
 8002178:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002180:	f043 0220 	orr.w	r2, r3, #32
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2200      	movs	r2, #0
 800218c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e007      	b.n	80021a4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	695b      	ldr	r3, [r3, #20]
 800219a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800219e:	2b80      	cmp	r3, #128	@ 0x80
 80021a0:	d1c3      	bne.n	800212a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3710      	adds	r7, #16
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80021b8:	e034      	b.n	8002224 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80021ba:	68f8      	ldr	r0, [r7, #12]
 80021bc:	f000 f83e 	bl	800223c <I2C_IsAcknowledgeFailed>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e034      	b.n	8002234 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80021d0:	d028      	beq.n	8002224 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021d2:	f7ff f8f5 	bl	80013c0 <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	68ba      	ldr	r2, [r7, #8]
 80021de:	429a      	cmp	r2, r3
 80021e0:	d302      	bcc.n	80021e8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d11d      	bne.n	8002224 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	f003 0304 	and.w	r3, r3, #4
 80021f2:	2b04      	cmp	r3, #4
 80021f4:	d016      	beq.n	8002224 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2200      	movs	r2, #0
 80021fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2220      	movs	r2, #32
 8002200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002210:	f043 0220 	orr.w	r2, r3, #32
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2200      	movs	r2, #0
 800221c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e007      	b.n	8002234 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	f003 0304 	and.w	r3, r3, #4
 800222e:	2b04      	cmp	r3, #4
 8002230:	d1c3      	bne.n	80021ba <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002232:	2300      	movs	r3, #0
}
 8002234:	4618      	mov	r0, r3
 8002236:	3710      	adds	r7, #16
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	695b      	ldr	r3, [r3, #20]
 800224a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800224e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002252:	d11b      	bne.n	800228c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800225c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2220      	movs	r2, #32
 8002268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002278:	f043 0204 	orr.w	r2, r3, #4
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e000      	b.n	800228e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr

0800229a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800229a:	b480      	push	{r7}
 800229c:	b083      	sub	sp, #12
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
 80022a2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	2b20      	cmp	r3, #32
 80022ae:	d129      	bne.n	8002304 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2224      	movs	r2, #36	@ 0x24
 80022b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f022 0201 	bic.w	r2, r2, #1
 80022c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f022 0210 	bic.w	r2, r2, #16
 80022d6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	430a      	orrs	r2, r1
 80022e6:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f042 0201 	orr.w	r2, r2, #1
 80022f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2220      	movs	r2, #32
 80022fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8002300:	2300      	movs	r3, #0
 8002302:	e000      	b.n	8002306 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002304:	2302      	movs	r3, #2
  }
}
 8002306:	4618      	mov	r0, r3
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002312:	b480      	push	{r7}
 8002314:	b085      	sub	sp, #20
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
 800231a:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800231c:	2300      	movs	r3, #0
 800231e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002326:	b2db      	uxtb	r3, r3
 8002328:	2b20      	cmp	r3, #32
 800232a:	d12a      	bne.n	8002382 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2224      	movs	r2, #36	@ 0x24
 8002330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f022 0201 	bic.w	r2, r2, #1
 8002342:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800234a:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800234c:	89fb      	ldrh	r3, [r7, #14]
 800234e:	f023 030f 	bic.w	r3, r3, #15
 8002352:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	b29a      	uxth	r2, r3
 8002358:	89fb      	ldrh	r3, [r7, #14]
 800235a:	4313      	orrs	r3, r2
 800235c:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	89fa      	ldrh	r2, [r7, #14]
 8002364:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f042 0201 	orr.w	r2, r2, #1
 8002374:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2220      	movs	r2, #32
 800237a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800237e:	2300      	movs	r3, #0
 8002380:	e000      	b.n	8002384 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002382:	2302      	movs	r3, #2
  }
}
 8002384:	4618      	mov	r0, r3
 8002386:	3714      	adds	r7, #20
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002396:	2300      	movs	r3, #0
 8002398:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	603b      	str	r3, [r7, #0]
 800239e:	4b20      	ldr	r3, [pc, #128]	@ (8002420 <HAL_PWREx_EnableOverDrive+0x90>)
 80023a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a2:	4a1f      	ldr	r2, [pc, #124]	@ (8002420 <HAL_PWREx_EnableOverDrive+0x90>)
 80023a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80023aa:	4b1d      	ldr	r3, [pc, #116]	@ (8002420 <HAL_PWREx_EnableOverDrive+0x90>)
 80023ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023b2:	603b      	str	r3, [r7, #0]
 80023b4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80023b6:	4b1b      	ldr	r3, [pc, #108]	@ (8002424 <HAL_PWREx_EnableOverDrive+0x94>)
 80023b8:	2201      	movs	r2, #1
 80023ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023bc:	f7ff f800 	bl	80013c0 <HAL_GetTick>
 80023c0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80023c2:	e009      	b.n	80023d8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80023c4:	f7fe fffc 	bl	80013c0 <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80023d2:	d901      	bls.n	80023d8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e01f      	b.n	8002418 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80023d8:	4b13      	ldr	r3, [pc, #76]	@ (8002428 <HAL_PWREx_EnableOverDrive+0x98>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023e4:	d1ee      	bne.n	80023c4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80023e6:	4b11      	ldr	r3, [pc, #68]	@ (800242c <HAL_PWREx_EnableOverDrive+0x9c>)
 80023e8:	2201      	movs	r2, #1
 80023ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023ec:	f7fe ffe8 	bl	80013c0 <HAL_GetTick>
 80023f0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80023f2:	e009      	b.n	8002408 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80023f4:	f7fe ffe4 	bl	80013c0 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002402:	d901      	bls.n	8002408 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e007      	b.n	8002418 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002408:	4b07      	ldr	r3, [pc, #28]	@ (8002428 <HAL_PWREx_EnableOverDrive+0x98>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002410:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002414:	d1ee      	bne.n	80023f4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002416:	2300      	movs	r3, #0
}
 8002418:	4618      	mov	r0, r3
 800241a:	3708      	adds	r7, #8
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	40023800 	.word	0x40023800
 8002424:	420e0040 	.word	0x420e0040
 8002428:	40007000 	.word	0x40007000
 800242c:	420e0044 	.word	0x420e0044

08002430 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e267      	b.n	8002912 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	2b00      	cmp	r3, #0
 800244c:	d075      	beq.n	800253a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800244e:	4b88      	ldr	r3, [pc, #544]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f003 030c 	and.w	r3, r3, #12
 8002456:	2b04      	cmp	r3, #4
 8002458:	d00c      	beq.n	8002474 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800245a:	4b85      	ldr	r3, [pc, #532]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002462:	2b08      	cmp	r3, #8
 8002464:	d112      	bne.n	800248c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002466:	4b82      	ldr	r3, [pc, #520]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800246e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002472:	d10b      	bne.n	800248c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002474:	4b7e      	ldr	r3, [pc, #504]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d05b      	beq.n	8002538 <HAL_RCC_OscConfig+0x108>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d157      	bne.n	8002538 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e242      	b.n	8002912 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002494:	d106      	bne.n	80024a4 <HAL_RCC_OscConfig+0x74>
 8002496:	4b76      	ldr	r3, [pc, #472]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a75      	ldr	r2, [pc, #468]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 800249c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024a0:	6013      	str	r3, [r2, #0]
 80024a2:	e01d      	b.n	80024e0 <HAL_RCC_OscConfig+0xb0>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024ac:	d10c      	bne.n	80024c8 <HAL_RCC_OscConfig+0x98>
 80024ae:	4b70      	ldr	r3, [pc, #448]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a6f      	ldr	r2, [pc, #444]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 80024b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024b8:	6013      	str	r3, [r2, #0]
 80024ba:	4b6d      	ldr	r3, [pc, #436]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a6c      	ldr	r2, [pc, #432]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 80024c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024c4:	6013      	str	r3, [r2, #0]
 80024c6:	e00b      	b.n	80024e0 <HAL_RCC_OscConfig+0xb0>
 80024c8:	4b69      	ldr	r3, [pc, #420]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a68      	ldr	r2, [pc, #416]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 80024ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024d2:	6013      	str	r3, [r2, #0]
 80024d4:	4b66      	ldr	r3, [pc, #408]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a65      	ldr	r2, [pc, #404]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 80024da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d013      	beq.n	8002510 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e8:	f7fe ff6a 	bl	80013c0 <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ee:	e008      	b.n	8002502 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024f0:	f7fe ff66 	bl	80013c0 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b64      	cmp	r3, #100	@ 0x64
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e207      	b.n	8002912 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002502:	4b5b      	ldr	r3, [pc, #364]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d0f0      	beq.n	80024f0 <HAL_RCC_OscConfig+0xc0>
 800250e:	e014      	b.n	800253a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002510:	f7fe ff56 	bl	80013c0 <HAL_GetTick>
 8002514:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002516:	e008      	b.n	800252a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002518:	f7fe ff52 	bl	80013c0 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b64      	cmp	r3, #100	@ 0x64
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e1f3      	b.n	8002912 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800252a:	4b51      	ldr	r3, [pc, #324]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1f0      	bne.n	8002518 <HAL_RCC_OscConfig+0xe8>
 8002536:	e000      	b.n	800253a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002538:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d063      	beq.n	800260e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002546:	4b4a      	ldr	r3, [pc, #296]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f003 030c 	and.w	r3, r3, #12
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00b      	beq.n	800256a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002552:	4b47      	ldr	r3, [pc, #284]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800255a:	2b08      	cmp	r3, #8
 800255c:	d11c      	bne.n	8002598 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800255e:	4b44      	ldr	r3, [pc, #272]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d116      	bne.n	8002598 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800256a:	4b41      	ldr	r3, [pc, #260]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d005      	beq.n	8002582 <HAL_RCC_OscConfig+0x152>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	2b01      	cmp	r3, #1
 800257c:	d001      	beq.n	8002582 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e1c7      	b.n	8002912 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002582:	4b3b      	ldr	r3, [pc, #236]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	00db      	lsls	r3, r3, #3
 8002590:	4937      	ldr	r1, [pc, #220]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 8002592:	4313      	orrs	r3, r2
 8002594:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002596:	e03a      	b.n	800260e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d020      	beq.n	80025e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025a0:	4b34      	ldr	r3, [pc, #208]	@ (8002674 <HAL_RCC_OscConfig+0x244>)
 80025a2:	2201      	movs	r2, #1
 80025a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a6:	f7fe ff0b 	bl	80013c0 <HAL_GetTick>
 80025aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ac:	e008      	b.n	80025c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025ae:	f7fe ff07 	bl	80013c0 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d901      	bls.n	80025c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e1a8      	b.n	8002912 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025c0:	4b2b      	ldr	r3, [pc, #172]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0302 	and.w	r3, r3, #2
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d0f0      	beq.n	80025ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025cc:	4b28      	ldr	r3, [pc, #160]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	691b      	ldr	r3, [r3, #16]
 80025d8:	00db      	lsls	r3, r3, #3
 80025da:	4925      	ldr	r1, [pc, #148]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	600b      	str	r3, [r1, #0]
 80025e0:	e015      	b.n	800260e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025e2:	4b24      	ldr	r3, [pc, #144]	@ (8002674 <HAL_RCC_OscConfig+0x244>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e8:	f7fe feea 	bl	80013c0 <HAL_GetTick>
 80025ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025f0:	f7fe fee6 	bl	80013c0 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e187      	b.n	8002912 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002602:	4b1b      	ldr	r3, [pc, #108]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1f0      	bne.n	80025f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0308 	and.w	r3, r3, #8
 8002616:	2b00      	cmp	r3, #0
 8002618:	d036      	beq.n	8002688 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d016      	beq.n	8002650 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002622:	4b15      	ldr	r3, [pc, #84]	@ (8002678 <HAL_RCC_OscConfig+0x248>)
 8002624:	2201      	movs	r2, #1
 8002626:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002628:	f7fe feca 	bl	80013c0 <HAL_GetTick>
 800262c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800262e:	e008      	b.n	8002642 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002630:	f7fe fec6 	bl	80013c0 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b02      	cmp	r3, #2
 800263c:	d901      	bls.n	8002642 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e167      	b.n	8002912 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002642:	4b0b      	ldr	r3, [pc, #44]	@ (8002670 <HAL_RCC_OscConfig+0x240>)
 8002644:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d0f0      	beq.n	8002630 <HAL_RCC_OscConfig+0x200>
 800264e:	e01b      	b.n	8002688 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002650:	4b09      	ldr	r3, [pc, #36]	@ (8002678 <HAL_RCC_OscConfig+0x248>)
 8002652:	2200      	movs	r2, #0
 8002654:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002656:	f7fe feb3 	bl	80013c0 <HAL_GetTick>
 800265a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800265c:	e00e      	b.n	800267c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800265e:	f7fe feaf 	bl	80013c0 <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	2b02      	cmp	r3, #2
 800266a:	d907      	bls.n	800267c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e150      	b.n	8002912 <HAL_RCC_OscConfig+0x4e2>
 8002670:	40023800 	.word	0x40023800
 8002674:	42470000 	.word	0x42470000
 8002678:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800267c:	4b88      	ldr	r3, [pc, #544]	@ (80028a0 <HAL_RCC_OscConfig+0x470>)
 800267e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002680:	f003 0302 	and.w	r3, r3, #2
 8002684:	2b00      	cmp	r3, #0
 8002686:	d1ea      	bne.n	800265e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0304 	and.w	r3, r3, #4
 8002690:	2b00      	cmp	r3, #0
 8002692:	f000 8097 	beq.w	80027c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002696:	2300      	movs	r3, #0
 8002698:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800269a:	4b81      	ldr	r3, [pc, #516]	@ (80028a0 <HAL_RCC_OscConfig+0x470>)
 800269c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d10f      	bne.n	80026c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026a6:	2300      	movs	r3, #0
 80026a8:	60bb      	str	r3, [r7, #8]
 80026aa:	4b7d      	ldr	r3, [pc, #500]	@ (80028a0 <HAL_RCC_OscConfig+0x470>)
 80026ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ae:	4a7c      	ldr	r2, [pc, #496]	@ (80028a0 <HAL_RCC_OscConfig+0x470>)
 80026b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80026b6:	4b7a      	ldr	r3, [pc, #488]	@ (80028a0 <HAL_RCC_OscConfig+0x470>)
 80026b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026be:	60bb      	str	r3, [r7, #8]
 80026c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026c2:	2301      	movs	r3, #1
 80026c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c6:	4b77      	ldr	r3, [pc, #476]	@ (80028a4 <HAL_RCC_OscConfig+0x474>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d118      	bne.n	8002704 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026d2:	4b74      	ldr	r3, [pc, #464]	@ (80028a4 <HAL_RCC_OscConfig+0x474>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a73      	ldr	r2, [pc, #460]	@ (80028a4 <HAL_RCC_OscConfig+0x474>)
 80026d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026de:	f7fe fe6f 	bl	80013c0 <HAL_GetTick>
 80026e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e4:	e008      	b.n	80026f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026e6:	f7fe fe6b 	bl	80013c0 <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d901      	bls.n	80026f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e10c      	b.n	8002912 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026f8:	4b6a      	ldr	r3, [pc, #424]	@ (80028a4 <HAL_RCC_OscConfig+0x474>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002700:	2b00      	cmp	r3, #0
 8002702:	d0f0      	beq.n	80026e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d106      	bne.n	800271a <HAL_RCC_OscConfig+0x2ea>
 800270c:	4b64      	ldr	r3, [pc, #400]	@ (80028a0 <HAL_RCC_OscConfig+0x470>)
 800270e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002710:	4a63      	ldr	r2, [pc, #396]	@ (80028a0 <HAL_RCC_OscConfig+0x470>)
 8002712:	f043 0301 	orr.w	r3, r3, #1
 8002716:	6713      	str	r3, [r2, #112]	@ 0x70
 8002718:	e01c      	b.n	8002754 <HAL_RCC_OscConfig+0x324>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	2b05      	cmp	r3, #5
 8002720:	d10c      	bne.n	800273c <HAL_RCC_OscConfig+0x30c>
 8002722:	4b5f      	ldr	r3, [pc, #380]	@ (80028a0 <HAL_RCC_OscConfig+0x470>)
 8002724:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002726:	4a5e      	ldr	r2, [pc, #376]	@ (80028a0 <HAL_RCC_OscConfig+0x470>)
 8002728:	f043 0304 	orr.w	r3, r3, #4
 800272c:	6713      	str	r3, [r2, #112]	@ 0x70
 800272e:	4b5c      	ldr	r3, [pc, #368]	@ (80028a0 <HAL_RCC_OscConfig+0x470>)
 8002730:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002732:	4a5b      	ldr	r2, [pc, #364]	@ (80028a0 <HAL_RCC_OscConfig+0x470>)
 8002734:	f043 0301 	orr.w	r3, r3, #1
 8002738:	6713      	str	r3, [r2, #112]	@ 0x70
 800273a:	e00b      	b.n	8002754 <HAL_RCC_OscConfig+0x324>
 800273c:	4b58      	ldr	r3, [pc, #352]	@ (80028a0 <HAL_RCC_OscConfig+0x470>)
 800273e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002740:	4a57      	ldr	r2, [pc, #348]	@ (80028a0 <HAL_RCC_OscConfig+0x470>)
 8002742:	f023 0301 	bic.w	r3, r3, #1
 8002746:	6713      	str	r3, [r2, #112]	@ 0x70
 8002748:	4b55      	ldr	r3, [pc, #340]	@ (80028a0 <HAL_RCC_OscConfig+0x470>)
 800274a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800274c:	4a54      	ldr	r2, [pc, #336]	@ (80028a0 <HAL_RCC_OscConfig+0x470>)
 800274e:	f023 0304 	bic.w	r3, r3, #4
 8002752:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d015      	beq.n	8002788 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800275c:	f7fe fe30 	bl	80013c0 <HAL_GetTick>
 8002760:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002762:	e00a      	b.n	800277a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002764:	f7fe fe2c 	bl	80013c0 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002772:	4293      	cmp	r3, r2
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e0cb      	b.n	8002912 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800277a:	4b49      	ldr	r3, [pc, #292]	@ (80028a0 <HAL_RCC_OscConfig+0x470>)
 800277c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d0ee      	beq.n	8002764 <HAL_RCC_OscConfig+0x334>
 8002786:	e014      	b.n	80027b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002788:	f7fe fe1a 	bl	80013c0 <HAL_GetTick>
 800278c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800278e:	e00a      	b.n	80027a6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002790:	f7fe fe16 	bl	80013c0 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800279e:	4293      	cmp	r3, r2
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e0b5      	b.n	8002912 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027a6:	4b3e      	ldr	r3, [pc, #248]	@ (80028a0 <HAL_RCC_OscConfig+0x470>)
 80027a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d1ee      	bne.n	8002790 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027b2:	7dfb      	ldrb	r3, [r7, #23]
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d105      	bne.n	80027c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027b8:	4b39      	ldr	r3, [pc, #228]	@ (80028a0 <HAL_RCC_OscConfig+0x470>)
 80027ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027bc:	4a38      	ldr	r2, [pc, #224]	@ (80028a0 <HAL_RCC_OscConfig+0x470>)
 80027be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027c2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	699b      	ldr	r3, [r3, #24]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	f000 80a1 	beq.w	8002910 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027ce:	4b34      	ldr	r3, [pc, #208]	@ (80028a0 <HAL_RCC_OscConfig+0x470>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f003 030c 	and.w	r3, r3, #12
 80027d6:	2b08      	cmp	r3, #8
 80027d8:	d05c      	beq.n	8002894 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	699b      	ldr	r3, [r3, #24]
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d141      	bne.n	8002866 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027e2:	4b31      	ldr	r3, [pc, #196]	@ (80028a8 <HAL_RCC_OscConfig+0x478>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e8:	f7fe fdea 	bl	80013c0 <HAL_GetTick>
 80027ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ee:	e008      	b.n	8002802 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027f0:	f7fe fde6 	bl	80013c0 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e087      	b.n	8002912 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002802:	4b27      	ldr	r3, [pc, #156]	@ (80028a0 <HAL_RCC_OscConfig+0x470>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d1f0      	bne.n	80027f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	69da      	ldr	r2, [r3, #28]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a1b      	ldr	r3, [r3, #32]
 8002816:	431a      	orrs	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800281c:	019b      	lsls	r3, r3, #6
 800281e:	431a      	orrs	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002824:	085b      	lsrs	r3, r3, #1
 8002826:	3b01      	subs	r3, #1
 8002828:	041b      	lsls	r3, r3, #16
 800282a:	431a      	orrs	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002830:	061b      	lsls	r3, r3, #24
 8002832:	491b      	ldr	r1, [pc, #108]	@ (80028a0 <HAL_RCC_OscConfig+0x470>)
 8002834:	4313      	orrs	r3, r2
 8002836:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002838:	4b1b      	ldr	r3, [pc, #108]	@ (80028a8 <HAL_RCC_OscConfig+0x478>)
 800283a:	2201      	movs	r2, #1
 800283c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800283e:	f7fe fdbf 	bl	80013c0 <HAL_GetTick>
 8002842:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002844:	e008      	b.n	8002858 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002846:	f7fe fdbb 	bl	80013c0 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	2b02      	cmp	r3, #2
 8002852:	d901      	bls.n	8002858 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e05c      	b.n	8002912 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002858:	4b11      	ldr	r3, [pc, #68]	@ (80028a0 <HAL_RCC_OscConfig+0x470>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d0f0      	beq.n	8002846 <HAL_RCC_OscConfig+0x416>
 8002864:	e054      	b.n	8002910 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002866:	4b10      	ldr	r3, [pc, #64]	@ (80028a8 <HAL_RCC_OscConfig+0x478>)
 8002868:	2200      	movs	r2, #0
 800286a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800286c:	f7fe fda8 	bl	80013c0 <HAL_GetTick>
 8002870:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002872:	e008      	b.n	8002886 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002874:	f7fe fda4 	bl	80013c0 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b02      	cmp	r3, #2
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e045      	b.n	8002912 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002886:	4b06      	ldr	r3, [pc, #24]	@ (80028a0 <HAL_RCC_OscConfig+0x470>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1f0      	bne.n	8002874 <HAL_RCC_OscConfig+0x444>
 8002892:	e03d      	b.n	8002910 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	2b01      	cmp	r3, #1
 800289a:	d107      	bne.n	80028ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e038      	b.n	8002912 <HAL_RCC_OscConfig+0x4e2>
 80028a0:	40023800 	.word	0x40023800
 80028a4:	40007000 	.word	0x40007000
 80028a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028ac:	4b1b      	ldr	r3, [pc, #108]	@ (800291c <HAL_RCC_OscConfig+0x4ec>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	699b      	ldr	r3, [r3, #24]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d028      	beq.n	800290c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d121      	bne.n	800290c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d11a      	bne.n	800290c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028d6:	68fa      	ldr	r2, [r7, #12]
 80028d8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80028dc:	4013      	ands	r3, r2
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80028e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d111      	bne.n	800290c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028f2:	085b      	lsrs	r3, r3, #1
 80028f4:	3b01      	subs	r3, #1
 80028f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d107      	bne.n	800290c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002906:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002908:	429a      	cmp	r2, r3
 800290a:	d001      	beq.n	8002910 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e000      	b.n	8002912 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3718      	adds	r7, #24
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	40023800 	.word	0x40023800

08002920 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d101      	bne.n	8002934 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e0cc      	b.n	8002ace <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002934:	4b68      	ldr	r3, [pc, #416]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 030f 	and.w	r3, r3, #15
 800293c:	683a      	ldr	r2, [r7, #0]
 800293e:	429a      	cmp	r2, r3
 8002940:	d90c      	bls.n	800295c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002942:	4b65      	ldr	r3, [pc, #404]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	b2d2      	uxtb	r2, r2
 8002948:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800294a:	4b63      	ldr	r3, [pc, #396]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1b8>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 030f 	and.w	r3, r3, #15
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	429a      	cmp	r2, r3
 8002956:	d001      	beq.n	800295c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e0b8      	b.n	8002ace <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0302 	and.w	r3, r3, #2
 8002964:	2b00      	cmp	r3, #0
 8002966:	d020      	beq.n	80029aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0304 	and.w	r3, r3, #4
 8002970:	2b00      	cmp	r3, #0
 8002972:	d005      	beq.n	8002980 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002974:	4b59      	ldr	r3, [pc, #356]	@ (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	4a58      	ldr	r2, [pc, #352]	@ (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 800297a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800297e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0308 	and.w	r3, r3, #8
 8002988:	2b00      	cmp	r3, #0
 800298a:	d005      	beq.n	8002998 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800298c:	4b53      	ldr	r3, [pc, #332]	@ (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	4a52      	ldr	r2, [pc, #328]	@ (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 8002992:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002996:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002998:	4b50      	ldr	r3, [pc, #320]	@ (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	494d      	ldr	r1, [pc, #308]	@ (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d044      	beq.n	8002a40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d107      	bne.n	80029ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029be:	4b47      	ldr	r3, [pc, #284]	@ (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d119      	bne.n	80029fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e07f      	b.n	8002ace <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d003      	beq.n	80029de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029da:	2b03      	cmp	r3, #3
 80029dc:	d107      	bne.n	80029ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029de:	4b3f      	ldr	r3, [pc, #252]	@ (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d109      	bne.n	80029fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e06f      	b.n	8002ace <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ee:	4b3b      	ldr	r3, [pc, #236]	@ (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d101      	bne.n	80029fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e067      	b.n	8002ace <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029fe:	4b37      	ldr	r3, [pc, #220]	@ (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f023 0203 	bic.w	r2, r3, #3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	4934      	ldr	r1, [pc, #208]	@ (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a10:	f7fe fcd6 	bl	80013c0 <HAL_GetTick>
 8002a14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a16:	e00a      	b.n	8002a2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a18:	f7fe fcd2 	bl	80013c0 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e04f      	b.n	8002ace <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a2e:	4b2b      	ldr	r3, [pc, #172]	@ (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f003 020c 	and.w	r2, r3, #12
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d1eb      	bne.n	8002a18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a40:	4b25      	ldr	r3, [pc, #148]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 030f 	and.w	r3, r3, #15
 8002a48:	683a      	ldr	r2, [r7, #0]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d20c      	bcs.n	8002a68 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a4e:	4b22      	ldr	r3, [pc, #136]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a50:	683a      	ldr	r2, [r7, #0]
 8002a52:	b2d2      	uxtb	r2, r2
 8002a54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a56:	4b20      	ldr	r3, [pc, #128]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 030f 	and.w	r3, r3, #15
 8002a5e:	683a      	ldr	r2, [r7, #0]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d001      	beq.n	8002a68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e032      	b.n	8002ace <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0304 	and.w	r3, r3, #4
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d008      	beq.n	8002a86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a74:	4b19      	ldr	r3, [pc, #100]	@ (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	4916      	ldr	r1, [pc, #88]	@ (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0308 	and.w	r3, r3, #8
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d009      	beq.n	8002aa6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a92:	4b12      	ldr	r3, [pc, #72]	@ (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	00db      	lsls	r3, r3, #3
 8002aa0:	490e      	ldr	r1, [pc, #56]	@ (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002aa6:	f000 f821 	bl	8002aec <HAL_RCC_GetSysClockFreq>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	4b0b      	ldr	r3, [pc, #44]	@ (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	091b      	lsrs	r3, r3, #4
 8002ab2:	f003 030f 	and.w	r3, r3, #15
 8002ab6:	490a      	ldr	r1, [pc, #40]	@ (8002ae0 <HAL_RCC_ClockConfig+0x1c0>)
 8002ab8:	5ccb      	ldrb	r3, [r1, r3]
 8002aba:	fa22 f303 	lsr.w	r3, r2, r3
 8002abe:	4a09      	ldr	r2, [pc, #36]	@ (8002ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ac2:	4b09      	ldr	r3, [pc, #36]	@ (8002ae8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7fe fc36 	bl	8001338 <HAL_InitTick>

  return HAL_OK;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	40023c00 	.word	0x40023c00
 8002adc:	40023800 	.word	0x40023800
 8002ae0:	08002dd8 	.word	0x08002dd8
 8002ae4:	20000000 	.word	0x20000000
 8002ae8:	20000004 	.word	0x20000004

08002aec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002aec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002af0:	b094      	sub	sp, #80	@ 0x50
 8002af2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002af4:	2300      	movs	r3, #0
 8002af6:	647b      	str	r3, [r7, #68]	@ 0x44
 8002af8:	2300      	movs	r3, #0
 8002afa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002afc:	2300      	movs	r3, #0
 8002afe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002b00:	2300      	movs	r3, #0
 8002b02:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b04:	4b79      	ldr	r3, [pc, #484]	@ (8002cec <HAL_RCC_GetSysClockFreq+0x200>)
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f003 030c 	and.w	r3, r3, #12
 8002b0c:	2b08      	cmp	r3, #8
 8002b0e:	d00d      	beq.n	8002b2c <HAL_RCC_GetSysClockFreq+0x40>
 8002b10:	2b08      	cmp	r3, #8
 8002b12:	f200 80e1 	bhi.w	8002cd8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d002      	beq.n	8002b20 <HAL_RCC_GetSysClockFreq+0x34>
 8002b1a:	2b04      	cmp	r3, #4
 8002b1c:	d003      	beq.n	8002b26 <HAL_RCC_GetSysClockFreq+0x3a>
 8002b1e:	e0db      	b.n	8002cd8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b20:	4b73      	ldr	r3, [pc, #460]	@ (8002cf0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b22:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002b24:	e0db      	b.n	8002cde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b26:	4b73      	ldr	r3, [pc, #460]	@ (8002cf4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002b28:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b2a:	e0d8      	b.n	8002cde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b2c:	4b6f      	ldr	r3, [pc, #444]	@ (8002cec <HAL_RCC_GetSysClockFreq+0x200>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b34:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b36:	4b6d      	ldr	r3, [pc, #436]	@ (8002cec <HAL_RCC_GetSysClockFreq+0x200>)
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d063      	beq.n	8002c0a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b42:	4b6a      	ldr	r3, [pc, #424]	@ (8002cec <HAL_RCC_GetSysClockFreq+0x200>)
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	099b      	lsrs	r3, r3, #6
 8002b48:	2200      	movs	r2, #0
 8002b4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002b4c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b54:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b56:	2300      	movs	r3, #0
 8002b58:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b5a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002b5e:	4622      	mov	r2, r4
 8002b60:	462b      	mov	r3, r5
 8002b62:	f04f 0000 	mov.w	r0, #0
 8002b66:	f04f 0100 	mov.w	r1, #0
 8002b6a:	0159      	lsls	r1, r3, #5
 8002b6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b70:	0150      	lsls	r0, r2, #5
 8002b72:	4602      	mov	r2, r0
 8002b74:	460b      	mov	r3, r1
 8002b76:	4621      	mov	r1, r4
 8002b78:	1a51      	subs	r1, r2, r1
 8002b7a:	6139      	str	r1, [r7, #16]
 8002b7c:	4629      	mov	r1, r5
 8002b7e:	eb63 0301 	sbc.w	r3, r3, r1
 8002b82:	617b      	str	r3, [r7, #20]
 8002b84:	f04f 0200 	mov.w	r2, #0
 8002b88:	f04f 0300 	mov.w	r3, #0
 8002b8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b90:	4659      	mov	r1, fp
 8002b92:	018b      	lsls	r3, r1, #6
 8002b94:	4651      	mov	r1, sl
 8002b96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b9a:	4651      	mov	r1, sl
 8002b9c:	018a      	lsls	r2, r1, #6
 8002b9e:	4651      	mov	r1, sl
 8002ba0:	ebb2 0801 	subs.w	r8, r2, r1
 8002ba4:	4659      	mov	r1, fp
 8002ba6:	eb63 0901 	sbc.w	r9, r3, r1
 8002baa:	f04f 0200 	mov.w	r2, #0
 8002bae:	f04f 0300 	mov.w	r3, #0
 8002bb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bbe:	4690      	mov	r8, r2
 8002bc0:	4699      	mov	r9, r3
 8002bc2:	4623      	mov	r3, r4
 8002bc4:	eb18 0303 	adds.w	r3, r8, r3
 8002bc8:	60bb      	str	r3, [r7, #8]
 8002bca:	462b      	mov	r3, r5
 8002bcc:	eb49 0303 	adc.w	r3, r9, r3
 8002bd0:	60fb      	str	r3, [r7, #12]
 8002bd2:	f04f 0200 	mov.w	r2, #0
 8002bd6:	f04f 0300 	mov.w	r3, #0
 8002bda:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002bde:	4629      	mov	r1, r5
 8002be0:	024b      	lsls	r3, r1, #9
 8002be2:	4621      	mov	r1, r4
 8002be4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002be8:	4621      	mov	r1, r4
 8002bea:	024a      	lsls	r2, r1, #9
 8002bec:	4610      	mov	r0, r2
 8002bee:	4619      	mov	r1, r3
 8002bf0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002bf6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002bf8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002bfc:	f7fd faf6 	bl	80001ec <__aeabi_uldivmod>
 8002c00:	4602      	mov	r2, r0
 8002c02:	460b      	mov	r3, r1
 8002c04:	4613      	mov	r3, r2
 8002c06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c08:	e058      	b.n	8002cbc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c0a:	4b38      	ldr	r3, [pc, #224]	@ (8002cec <HAL_RCC_GetSysClockFreq+0x200>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	099b      	lsrs	r3, r3, #6
 8002c10:	2200      	movs	r2, #0
 8002c12:	4618      	mov	r0, r3
 8002c14:	4611      	mov	r1, r2
 8002c16:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c1a:	623b      	str	r3, [r7, #32]
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c20:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c24:	4642      	mov	r2, r8
 8002c26:	464b      	mov	r3, r9
 8002c28:	f04f 0000 	mov.w	r0, #0
 8002c2c:	f04f 0100 	mov.w	r1, #0
 8002c30:	0159      	lsls	r1, r3, #5
 8002c32:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c36:	0150      	lsls	r0, r2, #5
 8002c38:	4602      	mov	r2, r0
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	4641      	mov	r1, r8
 8002c3e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c42:	4649      	mov	r1, r9
 8002c44:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c48:	f04f 0200 	mov.w	r2, #0
 8002c4c:	f04f 0300 	mov.w	r3, #0
 8002c50:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c54:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c58:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c5c:	ebb2 040a 	subs.w	r4, r2, sl
 8002c60:	eb63 050b 	sbc.w	r5, r3, fp
 8002c64:	f04f 0200 	mov.w	r2, #0
 8002c68:	f04f 0300 	mov.w	r3, #0
 8002c6c:	00eb      	lsls	r3, r5, #3
 8002c6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c72:	00e2      	lsls	r2, r4, #3
 8002c74:	4614      	mov	r4, r2
 8002c76:	461d      	mov	r5, r3
 8002c78:	4643      	mov	r3, r8
 8002c7a:	18e3      	adds	r3, r4, r3
 8002c7c:	603b      	str	r3, [r7, #0]
 8002c7e:	464b      	mov	r3, r9
 8002c80:	eb45 0303 	adc.w	r3, r5, r3
 8002c84:	607b      	str	r3, [r7, #4]
 8002c86:	f04f 0200 	mov.w	r2, #0
 8002c8a:	f04f 0300 	mov.w	r3, #0
 8002c8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c92:	4629      	mov	r1, r5
 8002c94:	028b      	lsls	r3, r1, #10
 8002c96:	4621      	mov	r1, r4
 8002c98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c9c:	4621      	mov	r1, r4
 8002c9e:	028a      	lsls	r2, r1, #10
 8002ca0:	4610      	mov	r0, r2
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	61bb      	str	r3, [r7, #24]
 8002caa:	61fa      	str	r2, [r7, #28]
 8002cac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cb0:	f7fd fa9c 	bl	80001ec <__aeabi_uldivmod>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	4613      	mov	r3, r2
 8002cba:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002cbc:	4b0b      	ldr	r3, [pc, #44]	@ (8002cec <HAL_RCC_GetSysClockFreq+0x200>)
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	0c1b      	lsrs	r3, r3, #16
 8002cc2:	f003 0303 	and.w	r3, r3, #3
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	005b      	lsls	r3, r3, #1
 8002cca:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002ccc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002cce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cd4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002cd6:	e002      	b.n	8002cde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cd8:	4b05      	ldr	r3, [pc, #20]	@ (8002cf0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002cda:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002cdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3750      	adds	r7, #80	@ 0x50
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cea:	bf00      	nop
 8002cec:	40023800 	.word	0x40023800
 8002cf0:	00f42400 	.word	0x00f42400
 8002cf4:	007a1200 	.word	0x007a1200

08002cf8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cfc:	4b03      	ldr	r3, [pc, #12]	@ (8002d0c <HAL_RCC_GetHCLKFreq+0x14>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	20000000 	.word	0x20000000

08002d10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d14:	f7ff fff0 	bl	8002cf8 <HAL_RCC_GetHCLKFreq>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	4b05      	ldr	r3, [pc, #20]	@ (8002d30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	0a9b      	lsrs	r3, r3, #10
 8002d20:	f003 0307 	and.w	r3, r3, #7
 8002d24:	4903      	ldr	r1, [pc, #12]	@ (8002d34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d26:	5ccb      	ldrb	r3, [r1, r3]
 8002d28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	40023800 	.word	0x40023800
 8002d34:	08002de8 	.word	0x08002de8

08002d38 <__libc_init_array>:
 8002d38:	b570      	push	{r4, r5, r6, lr}
 8002d3a:	4d0d      	ldr	r5, [pc, #52]	@ (8002d70 <__libc_init_array+0x38>)
 8002d3c:	4c0d      	ldr	r4, [pc, #52]	@ (8002d74 <__libc_init_array+0x3c>)
 8002d3e:	1b64      	subs	r4, r4, r5
 8002d40:	10a4      	asrs	r4, r4, #2
 8002d42:	2600      	movs	r6, #0
 8002d44:	42a6      	cmp	r6, r4
 8002d46:	d109      	bne.n	8002d5c <__libc_init_array+0x24>
 8002d48:	4d0b      	ldr	r5, [pc, #44]	@ (8002d78 <__libc_init_array+0x40>)
 8002d4a:	4c0c      	ldr	r4, [pc, #48]	@ (8002d7c <__libc_init_array+0x44>)
 8002d4c:	f000 f818 	bl	8002d80 <_init>
 8002d50:	1b64      	subs	r4, r4, r5
 8002d52:	10a4      	asrs	r4, r4, #2
 8002d54:	2600      	movs	r6, #0
 8002d56:	42a6      	cmp	r6, r4
 8002d58:	d105      	bne.n	8002d66 <__libc_init_array+0x2e>
 8002d5a:	bd70      	pop	{r4, r5, r6, pc}
 8002d5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d60:	4798      	blx	r3
 8002d62:	3601      	adds	r6, #1
 8002d64:	e7ee      	b.n	8002d44 <__libc_init_array+0xc>
 8002d66:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d6a:	4798      	blx	r3
 8002d6c:	3601      	adds	r6, #1
 8002d6e:	e7f2      	b.n	8002d56 <__libc_init_array+0x1e>
 8002d70:	08002df8 	.word	0x08002df8
 8002d74:	08002df8 	.word	0x08002df8
 8002d78:	08002df8 	.word	0x08002df8
 8002d7c:	08002dfc 	.word	0x08002dfc

08002d80 <_init>:
 8002d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d82:	bf00      	nop
 8002d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d86:	bc08      	pop	{r3}
 8002d88:	469e      	mov	lr, r3
 8002d8a:	4770      	bx	lr

08002d8c <_fini>:
 8002d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d8e:	bf00      	nop
 8002d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d92:	bc08      	pop	{r3}
 8002d94:	469e      	mov	lr, r3
 8002d96:	4770      	bx	lr
