
Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000671c  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  080068cc  080068cc  000078cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006cf8  08006cf8  00008064  2**0
                  CONTENTS
  4 .ARM          00000008  08006cf8  08006cf8  00007cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d00  08006d00  00008064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d00  08006d00  00007d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006d04  08006d04  00007d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08006d08  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008064  2**0
                  CONTENTS
 10 .bss          000002d4  20000064  20000064  00008064  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000338  20000338  00008064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008064  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d8a2  00000000  00000000  00008094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002725  00000000  00000000  00015936  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cb8  00000000  00000000  00018060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009c7  00000000  00000000  00018d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024afe  00000000  00000000  000196df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011270  00000000  00000000  0003e1dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5664  00000000  00000000  0004f44d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00124ab1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003948  00000000  00000000  00124af4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  0012843c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000064 	.word	0x20000064
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080068b4 	.word	0x080068b4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000068 	.word	0x20000068
 80001ec:	080068b4 	.word	0x080068b4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000594:	f002 f9ec 	bl	8002970 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000598:	f000 f810 	bl	80005bc <SystemClock_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

  /* USER CODE BEGIN 2 */
  uartInit();
 800059c:	f001 f800 	bl	80015a0 <uartInit>
  buttonInit();
 80005a0:	f001 f996 	bl	80018d0 <buttonInit>
  rtcInit();
 80005a4:	f000 fe6c 	bl	8001280 <rtcInit>
  lcdInit();
 80005a8:	f000 fb3a 	bl	8000c20 <lcdInit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  buttonFSM();
 80005ac:	f001 f9a8 	bl	8001900 <buttonFSM>
	  clockFSM();
 80005b0:	f001 fb72 	bl	8001c98 <clockFSM>
	  displayFSM();
 80005b4:	f002 f96e 	bl	8002894 <displayFSM>
	  buttonFSM();
 80005b8:	bf00      	nop
 80005ba:	e7f7      	b.n	80005ac <main+0x1c>

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b094      	sub	sp, #80	@ 0x50
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	f107 0320 	add.w	r3, r7, #32
 80005c6:	2230      	movs	r2, #48	@ 0x30
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f005 fb78 	bl	8005cc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e0:	2300      	movs	r3, #0
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	4b23      	ldr	r3, [pc, #140]	@ (8000674 <SystemClock_Config+0xb8>)
 80005e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005e8:	4a22      	ldr	r2, [pc, #136]	@ (8000674 <SystemClock_Config+0xb8>)
 80005ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80005f0:	4b20      	ldr	r3, [pc, #128]	@ (8000674 <SystemClock_Config+0xb8>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005f8:	60bb      	str	r3, [r7, #8]
 80005fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005fc:	2300      	movs	r3, #0
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	4b1d      	ldr	r3, [pc, #116]	@ (8000678 <SystemClock_Config+0xbc>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000608:	4a1b      	ldr	r2, [pc, #108]	@ (8000678 <SystemClock_Config+0xbc>)
 800060a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800060e:	6013      	str	r3, [r2, #0]
 8000610:	4b19      	ldr	r3, [pc, #100]	@ (8000678 <SystemClock_Config+0xbc>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800061c:	2302      	movs	r3, #2
 800061e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000620:	2301      	movs	r3, #1
 8000622:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000624:	2310      	movs	r3, #16
 8000626:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000628:	2300      	movs	r3, #0
 800062a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062c:	f107 0320 	add.w	r3, r7, #32
 8000630:	4618      	mov	r0, r3
 8000632:	f003 fe2b 	bl	800428c <HAL_RCC_OscConfig>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800063c:	f000 f81e 	bl	800067c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000640:	230f      	movs	r3, #15
 8000642:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000644:	2300      	movs	r3, #0
 8000646:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800064c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000650:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000652:	2300      	movs	r3, #0
 8000654:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000656:	f107 030c 	add.w	r3, r7, #12
 800065a:	2100      	movs	r1, #0
 800065c:	4618      	mov	r0, r3
 800065e:	f004 f88d 	bl	800477c <HAL_RCC_ClockConfig>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000668:	f000 f808 	bl	800067c <Error_Handler>
  }
}
 800066c:	bf00      	nop
 800066e:	3750      	adds	r7, #80	@ 0x50
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	40023800 	.word	0x40023800
 8000678:	40007000 	.word	0x40007000

0800067c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	uartSendString("error nashe");
 8000680:	4803      	ldr	r0, [pc, #12]	@ (8000690 <Error_Handler+0x14>)
 8000682:	f000 ffa7 	bl	80015d4 <uartSendString>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000686:	b672      	cpsid	i
}
 8000688:	bf00      	nop
  __disable_irq();
  while (1)
 800068a:	bf00      	nop
 800068c:	e7fd      	b.n	800068a <Error_Handler+0xe>
 800068e:	bf00      	nop
 8000690:	080068cc 	.word	0x080068cc

08000694 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	4b10      	ldr	r3, [pc, #64]	@ (80006e0 <HAL_MspInit+0x4c>)
 80006a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006a2:	4a0f      	ldr	r2, [pc, #60]	@ (80006e0 <HAL_MspInit+0x4c>)
 80006a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80006aa:	4b0d      	ldr	r3, [pc, #52]	@ (80006e0 <HAL_MspInit+0x4c>)
 80006ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	603b      	str	r3, [r7, #0]
 80006ba:	4b09      	ldr	r3, [pc, #36]	@ (80006e0 <HAL_MspInit+0x4c>)
 80006bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006be:	4a08      	ldr	r2, [pc, #32]	@ (80006e0 <HAL_MspInit+0x4c>)
 80006c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80006c6:	4b06      	ldr	r3, [pc, #24]	@ (80006e0 <HAL_MspInit+0x4c>)
 80006c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006ce:	603b      	str	r3, [r7, #0]
 80006d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006d2:	bf00      	nop
 80006d4:	370c      	adds	r7, #12
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	40023800 	.word	0x40023800

080006e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08c      	sub	sp, #48	@ 0x30
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ec:	f107 031c 	add.w	r3, r7, #28
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a3b      	ldr	r2, [pc, #236]	@ (80007f0 <HAL_I2C_MspInit+0x10c>)
 8000702:	4293      	cmp	r3, r2
 8000704:	d12d      	bne.n	8000762 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	61bb      	str	r3, [r7, #24]
 800070a:	4b3a      	ldr	r3, [pc, #232]	@ (80007f4 <HAL_I2C_MspInit+0x110>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070e:	4a39      	ldr	r2, [pc, #228]	@ (80007f4 <HAL_I2C_MspInit+0x110>)
 8000710:	f043 0302 	orr.w	r3, r3, #2
 8000714:	6313      	str	r3, [r2, #48]	@ 0x30
 8000716:	4b37      	ldr	r3, [pc, #220]	@ (80007f4 <HAL_I2C_MspInit+0x110>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071a:	f003 0302 	and.w	r3, r3, #2
 800071e:	61bb      	str	r3, [r7, #24]
 8000720:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000722:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000726:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000728:	2312      	movs	r3, #18
 800072a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000730:	2303      	movs	r3, #3
 8000732:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000734:	2304      	movs	r3, #4
 8000736:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000738:	f107 031c 	add.w	r3, r7, #28
 800073c:	4619      	mov	r1, r3
 800073e:	482e      	ldr	r0, [pc, #184]	@ (80007f8 <HAL_I2C_MspInit+0x114>)
 8000740:	f002 fb50 	bl	8002de4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000744:	2300      	movs	r3, #0
 8000746:	617b      	str	r3, [r7, #20]
 8000748:	4b2a      	ldr	r3, [pc, #168]	@ (80007f4 <HAL_I2C_MspInit+0x110>)
 800074a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800074c:	4a29      	ldr	r2, [pc, #164]	@ (80007f4 <HAL_I2C_MspInit+0x110>)
 800074e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000752:	6413      	str	r3, [r2, #64]	@ 0x40
 8000754:	4b27      	ldr	r3, [pc, #156]	@ (80007f4 <HAL_I2C_MspInit+0x110>)
 8000756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000758:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800075c:	617b      	str	r3, [r7, #20]
 800075e:	697b      	ldr	r3, [r7, #20]
      __HAL_RCC_I2C2_CLK_ENABLE();
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
    }
}
 8000760:	e042      	b.n	80007e8 <HAL_I2C_MspInit+0x104>
  else if(hi2c->Instance==I2C2)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4a25      	ldr	r2, [pc, #148]	@ (80007fc <HAL_I2C_MspInit+0x118>)
 8000768:	4293      	cmp	r3, r2
 800076a:	d13d      	bne.n	80007e8 <HAL_I2C_MspInit+0x104>
      __HAL_RCC_GPIOB_CLK_ENABLE();
 800076c:	2300      	movs	r3, #0
 800076e:	613b      	str	r3, [r7, #16]
 8000770:	4b20      	ldr	r3, [pc, #128]	@ (80007f4 <HAL_I2C_MspInit+0x110>)
 8000772:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000774:	4a1f      	ldr	r2, [pc, #124]	@ (80007f4 <HAL_I2C_MspInit+0x110>)
 8000776:	f043 0302 	orr.w	r3, r3, #2
 800077a:	6313      	str	r3, [r2, #48]	@ 0x30
 800077c:	4b1d      	ldr	r3, [pc, #116]	@ (80007f4 <HAL_I2C_MspInit+0x110>)
 800077e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000780:	f003 0302 	and.w	r3, r3, #2
 8000784:	613b      	str	r3, [r7, #16]
 8000786:	693b      	ldr	r3, [r7, #16]
      GPIO_InitStruct.Pin = RTC_SCL_Pin;
 8000788:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800078c:	61fb      	str	r3, [r7, #28]
      GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800078e:	2312      	movs	r3, #18
 8000790:	623b      	str	r3, [r7, #32]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000792:	2300      	movs	r3, #0
 8000794:	627b      	str	r3, [r7, #36]	@ 0x24
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000796:	2303      	movs	r3, #3
 8000798:	62bb      	str	r3, [r7, #40]	@ 0x28
      GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800079a:	2304      	movs	r3, #4
 800079c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      HAL_GPIO_Init(RTC_SCL_GPIO_Port, &GPIO_InitStruct);
 800079e:	f107 031c 	add.w	r3, r7, #28
 80007a2:	4619      	mov	r1, r3
 80007a4:	4814      	ldr	r0, [pc, #80]	@ (80007f8 <HAL_I2C_MspInit+0x114>)
 80007a6:	f002 fb1d 	bl	8002de4 <HAL_GPIO_Init>
      GPIO_InitStruct.Pin = RTC_SDA_Pin;
 80007aa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80007ae:	61fb      	str	r3, [r7, #28]
      GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007b0:	2312      	movs	r3, #18
 80007b2:	623b      	str	r3, [r7, #32]
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007b4:	2301      	movs	r3, #1
 80007b6:	627b      	str	r3, [r7, #36]	@ 0x24
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007b8:	2303      	movs	r3, #3
 80007ba:	62bb      	str	r3, [r7, #40]	@ 0x28
      GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80007bc:	2304      	movs	r3, #4
 80007be:	62fb      	str	r3, [r7, #44]	@ 0x2c
      HAL_GPIO_Init(RTC_SDA_GPIO_Port, &GPIO_InitStruct);
 80007c0:	f107 031c 	add.w	r3, r7, #28
 80007c4:	4619      	mov	r1, r3
 80007c6:	480c      	ldr	r0, [pc, #48]	@ (80007f8 <HAL_I2C_MspInit+0x114>)
 80007c8:	f002 fb0c 	bl	8002de4 <HAL_GPIO_Init>
      __HAL_RCC_I2C2_CLK_ENABLE();
 80007cc:	2300      	movs	r3, #0
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	4b08      	ldr	r3, [pc, #32]	@ (80007f4 <HAL_I2C_MspInit+0x110>)
 80007d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007d4:	4a07      	ldr	r2, [pc, #28]	@ (80007f4 <HAL_I2C_MspInit+0x110>)
 80007d6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80007da:	6413      	str	r3, [r2, #64]	@ 0x40
 80007dc:	4b05      	ldr	r3, [pc, #20]	@ (80007f4 <HAL_I2C_MspInit+0x110>)
 80007de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80007e4:	60fb      	str	r3, [r7, #12]
 80007e6:	68fb      	ldr	r3, [r7, #12]
}
 80007e8:	bf00      	nop
 80007ea:	3730      	adds	r7, #48	@ 0x30
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	40005400 	.word	0x40005400
 80007f4:	40023800 	.word	0x40023800
 80007f8:	40020400 	.word	0x40020400
 80007fc:	40005800 	.word	0x40005800

08000800 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08a      	sub	sp, #40	@ 0x28
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000808:	f107 0314 	add.w	r3, r7, #20
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a1d      	ldr	r2, [pc, #116]	@ (8000894 <HAL_UART_MspInit+0x94>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d134      	bne.n	800088c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	613b      	str	r3, [r7, #16]
 8000826:	4b1c      	ldr	r3, [pc, #112]	@ (8000898 <HAL_UART_MspInit+0x98>)
 8000828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800082a:	4a1b      	ldr	r2, [pc, #108]	@ (8000898 <HAL_UART_MspInit+0x98>)
 800082c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000830:	6413      	str	r3, [r2, #64]	@ 0x40
 8000832:	4b19      	ldr	r3, [pc, #100]	@ (8000898 <HAL_UART_MspInit+0x98>)
 8000834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000836:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800083a:	613b      	str	r3, [r7, #16]
 800083c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	60fb      	str	r3, [r7, #12]
 8000842:	4b15      	ldr	r3, [pc, #84]	@ (8000898 <HAL_UART_MspInit+0x98>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	4a14      	ldr	r2, [pc, #80]	@ (8000898 <HAL_UART_MspInit+0x98>)
 8000848:	f043 0308 	orr.w	r3, r3, #8
 800084c:	6313      	str	r3, [r2, #48]	@ 0x30
 800084e:	4b12      	ldr	r3, [pc, #72]	@ (8000898 <HAL_UART_MspInit+0x98>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	f003 0308 	and.w	r3, r3, #8
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800085a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800085e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000860:	2302      	movs	r3, #2
 8000862:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000864:	2301      	movs	r3, #1
 8000866:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000868:	2303      	movs	r3, #3
 800086a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800086c:	2307      	movs	r3, #7
 800086e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000870:	f107 0314 	add.w	r3, r7, #20
 8000874:	4619      	mov	r1, r3
 8000876:	4809      	ldr	r0, [pc, #36]	@ (800089c <HAL_UART_MspInit+0x9c>)
 8000878:	f002 fab4 	bl	8002de4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */
    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800087c:	2200      	movs	r2, #0
 800087e:	2100      	movs	r1, #0
 8000880:	2027      	movs	r0, #39	@ 0x27
 8000882:	f002 f9e6 	bl	8002c52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000886:	2027      	movs	r0, #39	@ 0x27
 8000888:	f002 f9ff 	bl	8002c8a <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART3_MspInit 1 */
  }

}
 800088c:	bf00      	nop
 800088e:	3728      	adds	r7, #40	@ 0x28
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	40004800 	.word	0x40004800
 8000898:	40023800 	.word	0x40023800
 800089c:	40020c00 	.word	0x40020c00

080008a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008a4:	bf00      	nop
 80008a6:	e7fd      	b.n	80008a4 <NMI_Handler+0x4>

080008a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ac:	bf00      	nop
 80008ae:	e7fd      	b.n	80008ac <HardFault_Handler+0x4>

080008b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b4:	bf00      	nop
 80008b6:	e7fd      	b.n	80008b4 <MemManage_Handler+0x4>

080008b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008bc:	bf00      	nop
 80008be:	e7fd      	b.n	80008bc <BusFault_Handler+0x4>

080008c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008c4:	bf00      	nop
 80008c6:	e7fd      	b.n	80008c4 <UsageFault_Handler+0x4>

080008c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008cc:	bf00      	nop
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr

080008d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008d6:	b480      	push	{r7}
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008da:	bf00      	nop
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr

080008e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr

080008f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008f2:	b580      	push	{r7, lr}
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008f6:	f002 f88d 	bl	8002a14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
	...

08000900 <USART3_IRQHandler>:
/* USER CODE BEGIN 1 */
/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000904:	4802      	ldr	r0, [pc, #8]	@ (8000910 <USART3_IRQHandler+0x10>)
 8000906:	f004 fa59 	bl	8004dbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	2000014c 	.word	0x2000014c

08000914 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b086      	sub	sp, #24
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800091c:	4a14      	ldr	r2, [pc, #80]	@ (8000970 <_sbrk+0x5c>)
 800091e:	4b15      	ldr	r3, [pc, #84]	@ (8000974 <_sbrk+0x60>)
 8000920:	1ad3      	subs	r3, r2, r3
 8000922:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000928:	4b13      	ldr	r3, [pc, #76]	@ (8000978 <_sbrk+0x64>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d102      	bne.n	8000936 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000930:	4b11      	ldr	r3, [pc, #68]	@ (8000978 <_sbrk+0x64>)
 8000932:	4a12      	ldr	r2, [pc, #72]	@ (800097c <_sbrk+0x68>)
 8000934:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000936:	4b10      	ldr	r3, [pc, #64]	@ (8000978 <_sbrk+0x64>)
 8000938:	681a      	ldr	r2, [r3, #0]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	4413      	add	r3, r2
 800093e:	693a      	ldr	r2, [r7, #16]
 8000940:	429a      	cmp	r2, r3
 8000942:	d207      	bcs.n	8000954 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000944:	f005 f9c4 	bl	8005cd0 <__errno>
 8000948:	4603      	mov	r3, r0
 800094a:	220c      	movs	r2, #12
 800094c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800094e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000952:	e009      	b.n	8000968 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000954:	4b08      	ldr	r3, [pc, #32]	@ (8000978 <_sbrk+0x64>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800095a:	4b07      	ldr	r3, [pc, #28]	@ (8000978 <_sbrk+0x64>)
 800095c:	681a      	ldr	r2, [r3, #0]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	4413      	add	r3, r2
 8000962:	4a05      	ldr	r2, [pc, #20]	@ (8000978 <_sbrk+0x64>)
 8000964:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000966:	68fb      	ldr	r3, [r7, #12]
}
 8000968:	4618      	mov	r0, r3
 800096a:	3718      	adds	r7, #24
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	20030000 	.word	0x20030000
 8000974:	00000400 	.word	0x00000400
 8000978:	20000080 	.word	0x20000080
 800097c:	20000338 	.word	0x20000338

08000980 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000984:	4b06      	ldr	r3, [pc, #24]	@ (80009a0 <SystemInit+0x20>)
 8000986:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800098a:	4a05      	ldr	r2, [pc, #20]	@ (80009a0 <SystemInit+0x20>)
 800098c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000990:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	e000ed00 	.word	0xe000ed00

080009a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80009a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009dc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009a8:	f7ff ffea 	bl	8000980 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009ac:	480c      	ldr	r0, [pc, #48]	@ (80009e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009ae:	490d      	ldr	r1, [pc, #52]	@ (80009e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009b0:	4a0d      	ldr	r2, [pc, #52]	@ (80009e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009b4:	e002      	b.n	80009bc <LoopCopyDataInit>

080009b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ba:	3304      	adds	r3, #4

080009bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009c0:	d3f9      	bcc.n	80009b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009c2:	4a0a      	ldr	r2, [pc, #40]	@ (80009ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009c4:	4c0a      	ldr	r4, [pc, #40]	@ (80009f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009c8:	e001      	b.n	80009ce <LoopFillZerobss>

080009ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009cc:	3204      	adds	r2, #4

080009ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009d0:	d3fb      	bcc.n	80009ca <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80009d2:	f005 f983 	bl	8005cdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009d6:	f7ff fddb 	bl	8000590 <main>
  bx  lr    
 80009da:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80009dc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80009e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009e4:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80009e8:	08006d08 	.word	0x08006d08
  ldr r2, =_sbss
 80009ec:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80009f0:	20000338 	.word	0x20000338

080009f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009f4:	e7fe      	b.n	80009f4 <ADC_IRQHandler>
	...

080009f8 <MX_I2C1_Init>:

/************************************
 * STATIC FUNCTIONS
 ************************************/
static void MX_I2C1_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 80009fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000a70 <MX_I2C1_Init+0x78>)
 80009fe:	4a1d      	ldr	r2, [pc, #116]	@ (8000a74 <MX_I2C1_Init+0x7c>)
 8000a00:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 10000;
 8000a02:	4b1b      	ldr	r3, [pc, #108]	@ (8000a70 <MX_I2C1_Init+0x78>)
 8000a04:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000a08:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a0a:	4b19      	ldr	r3, [pc, #100]	@ (8000a70 <MX_I2C1_Init+0x78>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a10:	4b17      	ldr	r3, [pc, #92]	@ (8000a70 <MX_I2C1_Init+0x78>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a16:	4b16      	ldr	r3, [pc, #88]	@ (8000a70 <MX_I2C1_Init+0x78>)
 8000a18:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a1c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a1e:	4b14      	ldr	r3, [pc, #80]	@ (8000a70 <MX_I2C1_Init+0x78>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a24:	4b12      	ldr	r3, [pc, #72]	@ (8000a70 <MX_I2C1_Init+0x78>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a2a:	4b11      	ldr	r3, [pc, #68]	@ (8000a70 <MX_I2C1_Init+0x78>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a30:	4b0f      	ldr	r3, [pc, #60]	@ (8000a70 <MX_I2C1_Init+0x78>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a36:	480e      	ldr	r0, [pc, #56]	@ (8000a70 <MX_I2C1_Init+0x78>)
 8000a38:	f002 fbb2 	bl	80031a0 <HAL_I2C_Init>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8000a42:	f7ff fe1b 	bl	800067c <Error_Handler>
  }

  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a46:	2100      	movs	r1, #0
 8000a48:	4809      	ldr	r0, [pc, #36]	@ (8000a70 <MX_I2C1_Init+0x78>)
 8000a4a:	f003 fba3 	bl	8004194 <HAL_I2CEx_ConfigAnalogFilter>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_I2C1_Init+0x60>
  {
    Error_Handler();
 8000a54:	f7ff fe12 	bl	800067c <Error_Handler>
  }

  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a58:	2100      	movs	r1, #0
 8000a5a:	4805      	ldr	r0, [pc, #20]	@ (8000a70 <MX_I2C1_Init+0x78>)
 8000a5c:	f003 fbd6 	bl	800420c <HAL_I2CEx_ConfigDigitalFilter>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_I2C1_Init+0x72>
  {
    Error_Handler();
 8000a66:	f7ff fe09 	bl	800067c <Error_Handler>
  }
}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	20000084 	.word	0x20000084
 8000a74:	40005400 	.word	0x40005400

08000a78 <lcdSendCommand>:
static void lcdSendCommand (uint8_t cmd)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b086      	sub	sp, #24
 8000a7c:	af02      	add	r7, sp, #8
 8000a7e:	4603      	mov	r3, r0
 8000a80:	71fb      	strb	r3, [r7, #7]
	uint8_t highNibble, lowNibble;
	uint8_t txData[4];

	highNibble = (cmd & 0xF0) | BL_BIT;
 8000a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a86:	f023 030f 	bic.w	r3, r3, #15
 8000a8a:	b25b      	sxtb	r3, r3
 8000a8c:	f043 0308 	orr.w	r3, r3, #8
 8000a90:	b25b      	sxtb	r3, r3
 8000a92:	73bb      	strb	r3, [r7, #14]
	lowNibble = ((cmd<<4) & 0xF0) | BL_BIT;
 8000a94:	79fb      	ldrb	r3, [r7, #7]
 8000a96:	011b      	lsls	r3, r3, #4
 8000a98:	b25b      	sxtb	r3, r3
 8000a9a:	f043 0308 	orr.w	r3, r3, #8
 8000a9e:	b25b      	sxtb	r3, r3
 8000aa0:	737b      	strb	r3, [r7, #13]

	txData[0] = highNibble | EN_BIT;
 8000aa2:	7bbb      	ldrb	r3, [r7, #14]
 8000aa4:	f043 0304 	orr.w	r3, r3, #4
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	723b      	strb	r3, [r7, #8]
	txData[1] = highNibble;
 8000aac:	7bbb      	ldrb	r3, [r7, #14]
 8000aae:	727b      	strb	r3, [r7, #9]
	txData[2] = lowNibble | EN_BIT;
 8000ab0:	7b7b      	ldrb	r3, [r7, #13]
 8000ab2:	f043 0304 	orr.w	r3, r3, #4
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	72bb      	strb	r3, [r7, #10]
	txData[3] = lowNibble;
 8000aba:	7b7b      	ldrb	r3, [r7, #13]
 8000abc:	72fb      	strb	r3, [r7, #11]

	for (uint8_t i = 0; i<sizeof(txData); i++)
 8000abe:	2300      	movs	r3, #0
 8000ac0:	73fb      	strb	r3, [r7, #15]
 8000ac2:	e016      	b.n	8000af2 <lcdSendCommand+0x7a>
	{
		if ((HAL_I2C_Master_Transmit(&hi2c1, (LCD_ADDRESS<<1), (txData+i), 1, HAL_MAX_DELAY)) != HAL_OK)
 8000ac4:	7bfb      	ldrb	r3, [r7, #15]
 8000ac6:	f107 0208 	add.w	r2, r7, #8
 8000aca:	441a      	add	r2, r3
 8000acc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ad0:	9300      	str	r3, [sp, #0]
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	214e      	movs	r1, #78	@ 0x4e
 8000ad6:	480c      	ldr	r0, [pc, #48]	@ (8000b08 <lcdSendCommand+0x90>)
 8000ad8:	f002 fca6 	bl	8003428 <HAL_I2C_Master_Transmit>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d004      	beq.n	8000aec <lcdSendCommand+0x74>
		{
			uartSendString((uint8_t)"tx de lcd broken");
 8000ae2:	4b0a      	ldr	r3, [pc, #40]	@ (8000b0c <lcdSendCommand+0x94>)
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f000 fd74 	bl	80015d4 <uartSendString>
	for (uint8_t i = 0; i<sizeof(txData); i++)
 8000aec:	7bfb      	ldrb	r3, [r7, #15]
 8000aee:	3301      	adds	r3, #1
 8000af0:	73fb      	strb	r3, [r7, #15]
 8000af2:	7bfb      	ldrb	r3, [r7, #15]
 8000af4:	2b03      	cmp	r3, #3
 8000af6:	d9e5      	bls.n	8000ac4 <lcdSendCommand+0x4c>
		}
	}
	HAL_Delay(5);
 8000af8:	2005      	movs	r0, #5
 8000afa:	f001 ffab 	bl	8002a54 <HAL_Delay>
}
 8000afe:	bf00      	nop
 8000b00:	3710      	adds	r7, #16
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000084 	.word	0x20000084
 8000b0c:	080068d8 	.word	0x080068d8

08000b10 <lcdSendData>:
static void lcdSendData (uint8_t data)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af02      	add	r7, sp, #8
 8000b16:	4603      	mov	r3, r0
 8000b18:	71fb      	strb	r3, [r7, #7]
	uint8_t highNibble, lowNibble;
	uint8_t txData[4];

	highNibble = (data & 0xF0) | BL_BIT | RS_BIT;
 8000b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1e:	f023 030f 	bic.w	r3, r3, #15
 8000b22:	b25b      	sxtb	r3, r3
 8000b24:	f043 0309 	orr.w	r3, r3, #9
 8000b28:	b25b      	sxtb	r3, r3
 8000b2a:	73bb      	strb	r3, [r7, #14]
	lowNibble = ((data<<4) & 0xF0) | BL_BIT | RS_BIT;
 8000b2c:	79fb      	ldrb	r3, [r7, #7]
 8000b2e:	011b      	lsls	r3, r3, #4
 8000b30:	b25b      	sxtb	r3, r3
 8000b32:	f043 0309 	orr.w	r3, r3, #9
 8000b36:	b25b      	sxtb	r3, r3
 8000b38:	737b      	strb	r3, [r7, #13]

	txData[0] = highNibble | EN_BIT;
 8000b3a:	7bbb      	ldrb	r3, [r7, #14]
 8000b3c:	f043 0304 	orr.w	r3, r3, #4
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	723b      	strb	r3, [r7, #8]
	txData[1] = highNibble;
 8000b44:	7bbb      	ldrb	r3, [r7, #14]
 8000b46:	727b      	strb	r3, [r7, #9]
	txData[2] = lowNibble | EN_BIT;
 8000b48:	7b7b      	ldrb	r3, [r7, #13]
 8000b4a:	f043 0304 	orr.w	r3, r3, #4
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	72bb      	strb	r3, [r7, #10]
	txData[3] = lowNibble;
 8000b52:	7b7b      	ldrb	r3, [r7, #13]
 8000b54:	72fb      	strb	r3, [r7, #11]

	for (uint8_t i = 0; i<sizeof(txData); i++)
 8000b56:	2300      	movs	r3, #0
 8000b58:	73fb      	strb	r3, [r7, #15]
 8000b5a:	e016      	b.n	8000b8a <lcdSendData+0x7a>
	{
		if ((HAL_I2C_Master_Transmit(&hi2c1, (LCD_ADDRESS<<1), (txData+i), 1, HAL_MAX_DELAY)) != HAL_OK)
 8000b5c:	7bfb      	ldrb	r3, [r7, #15]
 8000b5e:	f107 0208 	add.w	r2, r7, #8
 8000b62:	441a      	add	r2, r3
 8000b64:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b68:	9300      	str	r3, [sp, #0]
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	214e      	movs	r1, #78	@ 0x4e
 8000b6e:	480c      	ldr	r0, [pc, #48]	@ (8000ba0 <lcdSendData+0x90>)
 8000b70:	f002 fc5a 	bl	8003428 <HAL_I2C_Master_Transmit>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d004      	beq.n	8000b84 <lcdSendData+0x74>
		{
			uartSendString((uint8_t)"tx de lcd broken");
 8000b7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ba4 <lcdSendData+0x94>)
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f000 fd28 	bl	80015d4 <uartSendString>
	for (uint8_t i = 0; i<sizeof(txData); i++)
 8000b84:	7bfb      	ldrb	r3, [r7, #15]
 8000b86:	3301      	adds	r3, #1
 8000b88:	73fb      	strb	r3, [r7, #15]
 8000b8a:	7bfb      	ldrb	r3, [r7, #15]
 8000b8c:	2b03      	cmp	r3, #3
 8000b8e:	d9e5      	bls.n	8000b5c <lcdSendData+0x4c>
		}
	}
	HAL_Delay(5);
 8000b90:	2005      	movs	r0, #5
 8000b92:	f001 ff5f 	bl	8002a54 <HAL_Delay>
}
 8000b96:	bf00      	nop
 8000b98:	3710      	adds	r7, #16
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20000084 	.word	0x20000084
 8000ba4:	080068d8 	.word	0x080068d8

08000ba8 <lcdPrintf>:
static void lcdPrintf(const uint8_t* format, uint8_t c, int16_t num, const uint8_t* str)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	607b      	str	r3, [r7, #4]
 8000bb2:	460b      	mov	r3, r1
 8000bb4:	72fb      	strb	r3, [r7, #11]
 8000bb6:	4613      	mov	r3, r2
 8000bb8:	813b      	strh	r3, [r7, #8]
    while (*format != '\0')
 8000bba:	e028      	b.n	8000c0e <lcdPrintf+0x66>
    {
        if (*format == '%')
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	2b25      	cmp	r3, #37	@ 0x25
 8000bc2:	d11c      	bne.n	8000bfe <lcdPrintf+0x56>
        {
            format++;
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	60fb      	str	r3, [r7, #12]
            switch (*format)
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	2b73      	cmp	r3, #115	@ 0x73
 8000bd0:	d011      	beq.n	8000bf6 <lcdPrintf+0x4e>
 8000bd2:	2b73      	cmp	r3, #115	@ 0x73
 8000bd4:	dc18      	bgt.n	8000c08 <lcdPrintf+0x60>
 8000bd6:	2b63      	cmp	r3, #99	@ 0x63
 8000bd8:	d002      	beq.n	8000be0 <lcdPrintf+0x38>
 8000bda:	2b64      	cmp	r3, #100	@ 0x64
 8000bdc:	d005      	beq.n	8000bea <lcdPrintf+0x42>
 8000bde:	e013      	b.n	8000c08 <lcdPrintf+0x60>
            {
                case 'c':
                    lcdPrintChar(c);
 8000be0:	7afb      	ldrb	r3, [r7, #11]
 8000be2:	4618      	mov	r0, r3
 8000be4:	f000 f970 	bl	8000ec8 <lcdPrintChar>
                    break;
 8000be8:	e00e      	b.n	8000c08 <lcdPrintf+0x60>
                case 'd':
                    lcdPrintInt(num);
 8000bea:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f000 f8f0 	bl	8000dd4 <lcdPrintInt>
                    break;
 8000bf4:	e008      	b.n	8000c08 <lcdPrintf+0x60>
                case 's':
                    lcdPrintString((uint8_t*)str);
 8000bf6:	6878      	ldr	r0, [r7, #4]
 8000bf8:	f000 f973 	bl	8000ee2 <lcdPrintString>
                    break;
 8000bfc:	e004      	b.n	8000c08 <lcdPrintf+0x60>
            }
        }
        else
        {
            lcdPrintChar(*format);
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	4618      	mov	r0, r3
 8000c04:	f000 f960 	bl	8000ec8 <lcdPrintChar>
        }
        format++;
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	60fb      	str	r3, [r7, #12]
    while (*format != '\0')
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d1d2      	bne.n	8000bbc <lcdPrintf+0x14>
    }
}
 8000c16:	bf00      	nop
 8000c18:	bf00      	nop
 8000c1a:	3710      	adds	r7, #16
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <lcdInit>:

/************************************
 * GLOBAL FUNCTIONS
 ************************************/
void lcdInit ()
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08a      	sub	sp, #40	@ 0x28
 8000c24:	af02      	add	r7, sp, #8
	MX_I2C1_Init();
 8000c26:	f7ff fee7 	bl	80009f8 <MX_I2C1_Init>
	HAL_Delay(100);
 8000c2a:	2064      	movs	r0, #100	@ 0x64
 8000c2c:	f001 ff12 	bl	8002a54 <HAL_Delay>

	HAL_I2C_Master_Transmit(&hi2c1, (LCD_ADDRESS<<1), (uint8_t[]){(0x30) | EN_BIT | BL_BIT}, 1, HAL_MAX_DELAY);
 8000c30:	233c      	movs	r3, #60	@ 0x3c
 8000c32:	773b      	strb	r3, [r7, #28]
 8000c34:	f107 021c 	add.w	r2, r7, #28
 8000c38:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c3c:	9300      	str	r3, [sp, #0]
 8000c3e:	2301      	movs	r3, #1
 8000c40:	214e      	movs	r1, #78	@ 0x4e
 8000c42:	4845      	ldr	r0, [pc, #276]	@ (8000d58 <lcdInit+0x138>)
 8000c44:	f002 fbf0 	bl	8003428 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8000c48:	2001      	movs	r0, #1
 8000c4a:	f001 ff03 	bl	8002a54 <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c1, (LCD_ADDRESS<<1), (uint8_t[]){0x30}, 1, HAL_MAX_DELAY);
 8000c4e:	2330      	movs	r3, #48	@ 0x30
 8000c50:	763b      	strb	r3, [r7, #24]
 8000c52:	f107 0218 	add.w	r2, r7, #24
 8000c56:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c5a:	9300      	str	r3, [sp, #0]
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	214e      	movs	r1, #78	@ 0x4e
 8000c60:	483d      	ldr	r0, [pc, #244]	@ (8000d58 <lcdInit+0x138>)
 8000c62:	f002 fbe1 	bl	8003428 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 8000c66:	2014      	movs	r0, #20
 8000c68:	f001 fef4 	bl	8002a54 <HAL_Delay>

	HAL_I2C_Master_Transmit(&hi2c1, (LCD_ADDRESS<<1), (uint8_t[]){(0x30) | EN_BIT | BL_BIT}, 1, HAL_MAX_DELAY);
 8000c6c:	233c      	movs	r3, #60	@ 0x3c
 8000c6e:	753b      	strb	r3, [r7, #20]
 8000c70:	f107 0214 	add.w	r2, r7, #20
 8000c74:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c78:	9300      	str	r3, [sp, #0]
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	214e      	movs	r1, #78	@ 0x4e
 8000c7e:	4836      	ldr	r0, [pc, #216]	@ (8000d58 <lcdInit+0x138>)
 8000c80:	f002 fbd2 	bl	8003428 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8000c84:	2001      	movs	r0, #1
 8000c86:	f001 fee5 	bl	8002a54 <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c1, (LCD_ADDRESS<<1), (uint8_t[]){0x30}, 1, HAL_MAX_DELAY);
 8000c8a:	2330      	movs	r3, #48	@ 0x30
 8000c8c:	743b      	strb	r3, [r7, #16]
 8000c8e:	f107 0210 	add.w	r2, r7, #16
 8000c92:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c96:	9300      	str	r3, [sp, #0]
 8000c98:	2301      	movs	r3, #1
 8000c9a:	214e      	movs	r1, #78	@ 0x4e
 8000c9c:	482e      	ldr	r0, [pc, #184]	@ (8000d58 <lcdInit+0x138>)
 8000c9e:	f002 fbc3 	bl	8003428 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8000ca2:	200a      	movs	r0, #10
 8000ca4:	f001 fed6 	bl	8002a54 <HAL_Delay>

	HAL_I2C_Master_Transmit(&hi2c1, (LCD_ADDRESS<<1), (uint8_t[]){(0x30) | EN_BIT | BL_BIT}, 1, HAL_MAX_DELAY);
 8000ca8:	233c      	movs	r3, #60	@ 0x3c
 8000caa:	733b      	strb	r3, [r7, #12]
 8000cac:	f107 020c 	add.w	r2, r7, #12
 8000cb0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000cb4:	9300      	str	r3, [sp, #0]
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	214e      	movs	r1, #78	@ 0x4e
 8000cba:	4827      	ldr	r0, [pc, #156]	@ (8000d58 <lcdInit+0x138>)
 8000cbc:	f002 fbb4 	bl	8003428 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8000cc0:	2001      	movs	r0, #1
 8000cc2:	f001 fec7 	bl	8002a54 <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c1, (LCD_ADDRESS<<1), (uint8_t[]){0x30}, 1, HAL_MAX_DELAY);
 8000cc6:	2330      	movs	r3, #48	@ 0x30
 8000cc8:	723b      	strb	r3, [r7, #8]
 8000cca:	f107 0208 	add.w	r2, r7, #8
 8000cce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000cd2:	9300      	str	r3, [sp, #0]
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	214e      	movs	r1, #78	@ 0x4e
 8000cd8:	481f      	ldr	r0, [pc, #124]	@ (8000d58 <lcdInit+0x138>)
 8000cda:	f002 fba5 	bl	8003428 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8000cde:	2001      	movs	r0, #1
 8000ce0:	f001 feb8 	bl	8002a54 <HAL_Delay>

	HAL_I2C_Master_Transmit(&hi2c1, (LCD_ADDRESS<<1), (uint8_t[]){(0x20) | EN_BIT | BL_BIT}, 1, HAL_MAX_DELAY);
 8000ce4:	232c      	movs	r3, #44	@ 0x2c
 8000ce6:	713b      	strb	r3, [r7, #4]
 8000ce8:	1d3a      	adds	r2, r7, #4
 8000cea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000cee:	9300      	str	r3, [sp, #0]
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	214e      	movs	r1, #78	@ 0x4e
 8000cf4:	4818      	ldr	r0, [pc, #96]	@ (8000d58 <lcdInit+0x138>)
 8000cf6:	f002 fb97 	bl	8003428 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	f001 feaa 	bl	8002a54 <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c1, (LCD_ADDRESS<<1), (uint8_t[]){0x20}, 1, HAL_MAX_DELAY);
 8000d00:	2320      	movs	r3, #32
 8000d02:	703b      	strb	r3, [r7, #0]
 8000d04:	463a      	mov	r2, r7
 8000d06:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d0a:	9300      	str	r3, [sp, #0]
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	214e      	movs	r1, #78	@ 0x4e
 8000d10:	4811      	ldr	r0, [pc, #68]	@ (8000d58 <lcdInit+0x138>)
 8000d12:	f002 fb89 	bl	8003428 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8000d16:	2001      	movs	r0, #1
 8000d18:	f001 fe9c 	bl	8002a54 <HAL_Delay>

	//End of hardcoded 8bit to 4Bit initialization, now ill start wrapping commands
	lcdSendCommand(FUNCTIONSET | MODE_4BITMODE| LINES_2LINE | FONT_5x8DOTS);
 8000d1c:	2028      	movs	r0, #40	@ 0x28
 8000d1e:	f7ff feab 	bl	8000a78 <lcdSendCommand>
	HAL_Delay(1);
 8000d22:	2001      	movs	r0, #1
 8000d24:	f001 fe96 	bl	8002a54 <HAL_Delay>
	lcdSendCommand(DISPLAYCONTROL);
 8000d28:	2008      	movs	r0, #8
 8000d2a:	f7ff fea5 	bl	8000a78 <lcdSendCommand>
	HAL_Delay(1);
 8000d2e:	2001      	movs	r0, #1
 8000d30:	f001 fe90 	bl	8002a54 <HAL_Delay>

	lcdSendCommand(RETURNHOME);
 8000d34:	2002      	movs	r0, #2
 8000d36:	f7ff fe9f 	bl	8000a78 <lcdSendCommand>
	lcdSendCommand(ENTRYMODESET | ENTRYLEFT | SHIFTDECREMENT);
 8000d3a:	2006      	movs	r0, #6
 8000d3c:	f7ff fe9c 	bl	8000a78 <lcdSendCommand>
	lcdSendCommand(DISPLAYCONTROL | DISPLAYON | CURSORON | BLINKON);
 8000d40:	200f      	movs	r0, #15
 8000d42:	f7ff fe99 	bl	8000a78 <lcdSendCommand>
	lcdClear();
 8000d46:	f000 f809 	bl	8000d5c <lcdClear>
	lcdHome();
 8000d4a:	f000 f811 	bl	8000d70 <lcdHome>
}
 8000d4e:	bf00      	nop
 8000d50:	3720      	adds	r7, #32
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20000084 	.word	0x20000084

08000d5c <lcdClear>:

void lcdClear ()
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
	lcdSendCommand(CLEARDISPLAY);
 8000d60:	2001      	movs	r0, #1
 8000d62:	f7ff fe89 	bl	8000a78 <lcdSendCommand>
	HAL_Delay(5);
 8000d66:	2005      	movs	r0, #5
 8000d68:	f001 fe74 	bl	8002a54 <HAL_Delay>
}
 8000d6c:	bf00      	nop
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <lcdHome>:
void lcdHome ()
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
	lcdSendCommand(RETURNHOME);
 8000d74:	2002      	movs	r0, #2
 8000d76:	f7ff fe7f 	bl	8000a78 <lcdSendCommand>
	HAL_Delay(5);
 8000d7a:	2005      	movs	r0, #5
 8000d7c:	f001 fe6a 	bl	8002a54 <HAL_Delay>
}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <lcdSetCursor>:
void lcdSetCursor (uint8_t row, uint8_t col)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	460a      	mov	r2, r1
 8000d8e:	71fb      	strb	r3, [r7, #7]
 8000d90:	4613      	mov	r3, r2
 8000d92:	71bb      	strb	r3, [r7, #6]
	uint8_t rowOffsets[] = {0x00, 0x40, 0x14, 0x54};
 8000d94:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd0 <lcdSetCursor+0x4c>)
 8000d96:	60fb      	str	r3, [r7, #12]
	row = row % ROWS;
 8000d98:	79fb      	ldrb	r3, [r7, #7]
 8000d9a:	f003 0303 	and.w	r3, r3, #3
 8000d9e:	71fb      	strb	r3, [r7, #7]
	lcdSendCommand(SETDDRAM | (col + rowOffsets[row]));
 8000da0:	79fb      	ldrb	r3, [r7, #7]
 8000da2:	3310      	adds	r3, #16
 8000da4:	443b      	add	r3, r7
 8000da6:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 8000daa:	79bb      	ldrb	r3, [r7, #6]
 8000dac:	4413      	add	r3, r2
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	b25b      	sxtb	r3, r3
 8000db2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000db6:	b25b      	sxtb	r3, r3
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff fe5c 	bl	8000a78 <lcdSendCommand>
	HAL_Delay(5);
 8000dc0:	2005      	movs	r0, #5
 8000dc2:	f001 fe47 	bl	8002a54 <HAL_Delay>
}
 8000dc6:	bf00      	nop
 8000dc8:	3710      	adds	r7, #16
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	54144000 	.word	0x54144000

08000dd4 <lcdPrintInt>:
	lcdSendCommand(DISPLAYCONTROL | BLINKOFF);
	HAL_Delay(5);
}

void lcdPrintInt(int16_t num)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b086      	sub	sp, #24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	80fb      	strh	r3, [r7, #6]
    uint8_t str[5];  // Buffer for the converted string
    uint8_t i = 0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	75fb      	strb	r3, [r7, #23]
    bool_t isNegative = false;
 8000de2:	2300      	movs	r3, #0
 8000de4:	75bb      	strb	r3, [r7, #22]

    // Handle negative numbers
    if (num < 0) {
 8000de6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	da05      	bge.n	8000dfa <lcdPrintInt+0x26>
        isNegative = true;
 8000dee:	2301      	movs	r3, #1
 8000df0:	75bb      	strb	r3, [r7, #22]
        num = -num;
 8000df2:	88fb      	ldrh	r3, [r7, #6]
 8000df4:	425b      	negs	r3, r3
 8000df6:	b29b      	uxth	r3, r3
 8000df8:	80fb      	strh	r3, [r7, #6]
    }

    // Convert to string (in reverse order)
    do {
        str[i++] = (num % 10) + '0'; // Get digit and convert to character
 8000dfa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000dfe:	4b31      	ldr	r3, [pc, #196]	@ (8000ec4 <lcdPrintInt+0xf0>)
 8000e00:	fb83 1302 	smull	r1, r3, r3, r2
 8000e04:	1099      	asrs	r1, r3, #2
 8000e06:	17d3      	asrs	r3, r2, #31
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	460b      	mov	r3, r1
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	440b      	add	r3, r1
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	1ad3      	subs	r3, r2, r3
 8000e14:	b21b      	sxth	r3, r3
 8000e16:	b2da      	uxtb	r2, r3
 8000e18:	7dfb      	ldrb	r3, [r7, #23]
 8000e1a:	1c59      	adds	r1, r3, #1
 8000e1c:	75f9      	strb	r1, [r7, #23]
 8000e1e:	3230      	adds	r2, #48	@ 0x30
 8000e20:	b2d2      	uxtb	r2, r2
 8000e22:	3318      	adds	r3, #24
 8000e24:	443b      	add	r3, r7
 8000e26:	f803 2c0c 	strb.w	r2, [r3, #-12]
        num /= 10;
 8000e2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e2e:	4a25      	ldr	r2, [pc, #148]	@ (8000ec4 <lcdPrintInt+0xf0>)
 8000e30:	fb82 1203 	smull	r1, r2, r2, r3
 8000e34:	1092      	asrs	r2, r2, #2
 8000e36:	17db      	asrs	r3, r3, #31
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	80fb      	strh	r3, [r7, #6]
    } while (num > 0);
 8000e3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	dcda      	bgt.n	8000dfa <lcdPrintInt+0x26>

    if (isNegative) {
 8000e44:	7dbb      	ldrb	r3, [r7, #22]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d007      	beq.n	8000e5a <lcdPrintInt+0x86>
        str[i++] = '-';
 8000e4a:	7dfb      	ldrb	r3, [r7, #23]
 8000e4c:	1c5a      	adds	r2, r3, #1
 8000e4e:	75fa      	strb	r2, [r7, #23]
 8000e50:	3318      	adds	r3, #24
 8000e52:	443b      	add	r3, r7
 8000e54:	222d      	movs	r2, #45	@ 0x2d
 8000e56:	f803 2c0c 	strb.w	r2, [r3, #-12]
    }

    str[i] = '\0'; // Add null terminator
 8000e5a:	7dfb      	ldrb	r3, [r7, #23]
 8000e5c:	3318      	adds	r3, #24
 8000e5e:	443b      	add	r3, r7
 8000e60:	2200      	movs	r2, #0
 8000e62:	f803 2c0c 	strb.w	r2, [r3, #-12]

    // Reverse the string
    for (uint8_t j = 0, k = i - 1; j < k; j++, k--) {
 8000e66:	2300      	movs	r3, #0
 8000e68:	757b      	strb	r3, [r7, #21]
 8000e6a:	7dfb      	ldrb	r3, [r7, #23]
 8000e6c:	3b01      	subs	r3, #1
 8000e6e:	753b      	strb	r3, [r7, #20]
 8000e70:	e01b      	b.n	8000eaa <lcdPrintInt+0xd6>
        char temp = str[j];
 8000e72:	7d7b      	ldrb	r3, [r7, #21]
 8000e74:	3318      	adds	r3, #24
 8000e76:	443b      	add	r3, r7
 8000e78:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000e7c:	74fb      	strb	r3, [r7, #19]
        str[j] = str[k];
 8000e7e:	7d3a      	ldrb	r2, [r7, #20]
 8000e80:	7d7b      	ldrb	r3, [r7, #21]
 8000e82:	3218      	adds	r2, #24
 8000e84:	443a      	add	r2, r7
 8000e86:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8000e8a:	3318      	adds	r3, #24
 8000e8c:	443b      	add	r3, r7
 8000e8e:	f803 2c0c 	strb.w	r2, [r3, #-12]
        str[k] = temp;
 8000e92:	7d3b      	ldrb	r3, [r7, #20]
 8000e94:	3318      	adds	r3, #24
 8000e96:	443b      	add	r3, r7
 8000e98:	7cfa      	ldrb	r2, [r7, #19]
 8000e9a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (uint8_t j = 0, k = i - 1; j < k; j++, k--) {
 8000e9e:	7d7b      	ldrb	r3, [r7, #21]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	757b      	strb	r3, [r7, #21]
 8000ea4:	7d3b      	ldrb	r3, [r7, #20]
 8000ea6:	3b01      	subs	r3, #1
 8000ea8:	753b      	strb	r3, [r7, #20]
 8000eaa:	7d7a      	ldrb	r2, [r7, #21]
 8000eac:	7d3b      	ldrb	r3, [r7, #20]
 8000eae:	429a      	cmp	r2, r3
 8000eb0:	d3df      	bcc.n	8000e72 <lcdPrintInt+0x9e>
    }

    lcdPrintString((uint8_t*)str); // Write directly to the current position
 8000eb2:	f107 030c 	add.w	r3, r7, #12
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f000 f813 	bl	8000ee2 <lcdPrintString>
}
 8000ebc:	bf00      	nop
 8000ebe:	3718      	adds	r7, #24
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	66666667 	.word	0x66666667

08000ec8 <lcdPrintChar>:
void lcdPrintChar (uint8_t c)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	71fb      	strb	r3, [r7, #7]
	lcdSendData(c);
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff fe1b 	bl	8000b10 <lcdSendData>
}
 8000eda:	bf00      	nop
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <lcdPrintString>:
void lcdPrintString (uint8_t* str)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b082      	sub	sp, #8
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
	while (*str != '\0')
 8000eea:	e006      	b.n	8000efa <lcdPrintString+0x18>
	{
		lcdSendData(*str++);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	1c5a      	adds	r2, r3, #1
 8000ef0:	607a      	str	r2, [r7, #4]
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff fe0b 	bl	8000b10 <lcdSendData>
	while (*str != '\0')
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d1f4      	bne.n	8000eec <lcdPrintString+0xa>
	}
}
 8000f02:	bf00      	nop
 8000f04:	bf00      	nop
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <lcdPrintfCenteredString>:

void lcdPrintfCenteredString(uint8_t* str, uint8_t c, int16_t num, const uint8_t* string)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b086      	sub	sp, #24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	607b      	str	r3, [r7, #4]
 8000f16:	460b      	mov	r3, r1
 8000f18:	72fb      	strb	r3, [r7, #11]
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	813b      	strh	r3, [r7, #8]
    if (str == NULL) {
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d103      	bne.n	8000f2c <lcdPrintfCenteredString+0x20>
        uartSendString((uint8_t*)"error printeo lcd\n\r");
 8000f24:	4822      	ldr	r0, [pc, #136]	@ (8000fb0 <lcdPrintfCenteredString+0xa4>)
 8000f26:	f000 fb55 	bl	80015d4 <uartSendString>
        return;
 8000f2a:	e03d      	b.n	8000fa8 <lcdPrintfCenteredString+0x9c>
    }

    uint8_t strLen = 0;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	75fb      	strb	r3, [r7, #23]
    while (str[strLen] != '\0' && strLen < COLS) {
 8000f30:	e002      	b.n	8000f38 <lcdPrintfCenteredString+0x2c>
        strLen++;
 8000f32:	7dfb      	ldrb	r3, [r7, #23]
 8000f34:	3301      	adds	r3, #1
 8000f36:	75fb      	strb	r3, [r7, #23]
    while (str[strLen] != '\0' && strLen < COLS) {
 8000f38:	7dfb      	ldrb	r3, [r7, #23]
 8000f3a:	68fa      	ldr	r2, [r7, #12]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d002      	beq.n	8000f4a <lcdPrintfCenteredString+0x3e>
 8000f44:	7dfb      	ldrb	r3, [r7, #23]
 8000f46:	2b13      	cmp	r3, #19
 8000f48:	d9f3      	bls.n	8000f32 <lcdPrintfCenteredString+0x26>
    }

    uint8_t paddingBefore = (COLS - strLen) / 2; // Integer division for even padding
 8000f4a:	7dfb      	ldrb	r3, [r7, #23]
 8000f4c:	f1c3 0314 	rsb	r3, r3, #20
 8000f50:	0fda      	lsrs	r2, r3, #31
 8000f52:	4413      	add	r3, r2
 8000f54:	105b      	asrs	r3, r3, #1
 8000f56:	753b      	strb	r3, [r7, #20]

    // Write padding (spaces) before the string
    for (uint8_t i = 0; i < paddingBefore; i++) {
 8000f58:	2300      	movs	r3, #0
 8000f5a:	75bb      	strb	r3, [r7, #22]
 8000f5c:	e005      	b.n	8000f6a <lcdPrintfCenteredString+0x5e>
        lcdPrintChar(' ');
 8000f5e:	2020      	movs	r0, #32
 8000f60:	f7ff ffb2 	bl	8000ec8 <lcdPrintChar>
    for (uint8_t i = 0; i < paddingBefore; i++) {
 8000f64:	7dbb      	ldrb	r3, [r7, #22]
 8000f66:	3301      	adds	r3, #1
 8000f68:	75bb      	strb	r3, [r7, #22]
 8000f6a:	7dba      	ldrb	r2, [r7, #22]
 8000f6c:	7d3b      	ldrb	r3, [r7, #20]
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	d3f5      	bcc.n	8000f5e <lcdPrintfCenteredString+0x52>
    }

    lcdPrintf(str, c, num, string);
 8000f72:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000f76:	7af9      	ldrb	r1, [r7, #11]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	68f8      	ldr	r0, [r7, #12]
 8000f7c:	f7ff fe14 	bl	8000ba8 <lcdPrintf>

    // Write padding (spaces) after the string
    uint8_t paddingAfter = COLS - strLen - paddingBefore;
 8000f80:	7dfa      	ldrb	r2, [r7, #23]
 8000f82:	7d3b      	ldrb	r3, [r7, #20]
 8000f84:	4413      	add	r3, r2
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	f1c3 0314 	rsb	r3, r3, #20
 8000f8c:	74fb      	strb	r3, [r7, #19]
    for (uint8_t i = 0; i < paddingAfter; i++) {
 8000f8e:	2300      	movs	r3, #0
 8000f90:	757b      	strb	r3, [r7, #21]
 8000f92:	e005      	b.n	8000fa0 <lcdPrintfCenteredString+0x94>
        lcdPrintChar(' ');
 8000f94:	2020      	movs	r0, #32
 8000f96:	f7ff ff97 	bl	8000ec8 <lcdPrintChar>
    for (uint8_t i = 0; i < paddingAfter; i++) {
 8000f9a:	7d7b      	ldrb	r3, [r7, #21]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	757b      	strb	r3, [r7, #21]
 8000fa0:	7d7a      	ldrb	r2, [r7, #21]
 8000fa2:	7cfb      	ldrb	r3, [r7, #19]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d3f5      	bcc.n	8000f94 <lcdPrintfCenteredString+0x88>
    }
}
 8000fa8:	3718      	adds	r7, #24
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	080068ec 	.word	0x080068ec

08000fb4 <lcdPrintfTwoInts>:
void lcdPrintfTwoInts(const uint8_t* format, int16_t num1, int16_t num2) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	807b      	strh	r3, [r7, #2]
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	803b      	strh	r3, [r7, #0]
    uint8_t numArgsPrinted = 0;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	73fb      	strb	r3, [r7, #15]
    while (*format != '\0') {
 8000fc8:	e028      	b.n	800101c <lcdPrintfTwoInts+0x68>
        if (*format == '%') {
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	2b25      	cmp	r3, #37	@ 0x25
 8000fd0:	d11c      	bne.n	800100c <lcdPrintfTwoInts+0x58>
            format++;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	607b      	str	r3, [r7, #4]
            if (*format == 'd') {
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	2b64      	cmp	r3, #100	@ 0x64
 8000fde:	d11a      	bne.n	8001016 <lcdPrintfTwoInts+0x62>
                switch (numArgsPrinted) {
 8000fe0:	7bfb      	ldrb	r3, [r7, #15]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d002      	beq.n	8000fec <lcdPrintfTwoInts+0x38>
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d006      	beq.n	8000ff8 <lcdPrintfTwoInts+0x44>
 8000fea:	e00b      	b.n	8001004 <lcdPrintfTwoInts+0x50>
                    case 0:
                        lcdPrintInt(num1);
 8000fec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff feef 	bl	8000dd4 <lcdPrintInt>
                        break;
 8000ff6:	e005      	b.n	8001004 <lcdPrintfTwoInts+0x50>
                    case 1:
                        lcdPrintInt(num2);
 8000ff8:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff fee9 	bl	8000dd4 <lcdPrintInt>
                        break;
 8001002:	bf00      	nop
                }
                numArgsPrinted++;
 8001004:	7bfb      	ldrb	r3, [r7, #15]
 8001006:	3301      	adds	r3, #1
 8001008:	73fb      	strb	r3, [r7, #15]
 800100a:	e004      	b.n	8001016 <lcdPrintfTwoInts+0x62>
            }
        } else {
            lcdPrintChar(*format);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff ff59 	bl	8000ec8 <lcdPrintChar>
        }
        format++;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	3301      	adds	r3, #1
 800101a:	607b      	str	r3, [r7, #4]
    while (*format != '\0') {
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d1d2      	bne.n	8000fca <lcdPrintfTwoInts+0x16>
    }
}
 8001024:	bf00      	nop
 8001026:	bf00      	nop
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <lcdPrintfThreeInts>:
void lcdPrintfThreeInts(const uint8_t* format, int16_t num1, int16_t num2, int16_t num3)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b086      	sub	sp, #24
 8001032:	af00      	add	r7, sp, #0
 8001034:	60f8      	str	r0, [r7, #12]
 8001036:	4608      	mov	r0, r1
 8001038:	4611      	mov	r1, r2
 800103a:	461a      	mov	r2, r3
 800103c:	4603      	mov	r3, r0
 800103e:	817b      	strh	r3, [r7, #10]
 8001040:	460b      	mov	r3, r1
 8001042:	813b      	strh	r3, [r7, #8]
 8001044:	4613      	mov	r3, r2
 8001046:	80fb      	strh	r3, [r7, #6]
    uint8_t numArgsPrinted = 0;
 8001048:	2300      	movs	r3, #0
 800104a:	75fb      	strb	r3, [r7, #23]
    while (*format != '\0')
 800104c:	e032      	b.n	80010b4 <lcdPrintfThreeInts+0x86>
    {
        if (*format == '%')
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	2b25      	cmp	r3, #37	@ 0x25
 8001054:	d126      	bne.n	80010a4 <lcdPrintfThreeInts+0x76>
        {
            format++; // Move to the character after '%'
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	3301      	adds	r3, #1
 800105a:	60fb      	str	r3, [r7, #12]
            if (*format == 'd')
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b64      	cmp	r3, #100	@ 0x64
 8001062:	d124      	bne.n	80010ae <lcdPrintfThreeInts+0x80>
            {
                switch (numArgsPrinted)
 8001064:	7dfb      	ldrb	r3, [r7, #23]
 8001066:	2b02      	cmp	r3, #2
 8001068:	d012      	beq.n	8001090 <lcdPrintfThreeInts+0x62>
 800106a:	2b02      	cmp	r3, #2
 800106c:	dc16      	bgt.n	800109c <lcdPrintfThreeInts+0x6e>
 800106e:	2b00      	cmp	r3, #0
 8001070:	d002      	beq.n	8001078 <lcdPrintfThreeInts+0x4a>
 8001072:	2b01      	cmp	r3, #1
 8001074:	d006      	beq.n	8001084 <lcdPrintfThreeInts+0x56>
 8001076:	e011      	b.n	800109c <lcdPrintfThreeInts+0x6e>
                {
                    case 0:
                        lcdPrintInt(num1);
 8001078:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff fea9 	bl	8000dd4 <lcdPrintInt>
                        break;
 8001082:	e00b      	b.n	800109c <lcdPrintfThreeInts+0x6e>
                    case 1:
                        lcdPrintInt(num2);
 8001084:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff fea3 	bl	8000dd4 <lcdPrintInt>
                        break;
 800108e:	e005      	b.n	800109c <lcdPrintfThreeInts+0x6e>
                    case 2:
                        lcdPrintInt(num3);
 8001090:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff fe9d 	bl	8000dd4 <lcdPrintInt>
                        break;
 800109a:	bf00      	nop
                }
                numArgsPrinted++;
 800109c:	7dfb      	ldrb	r3, [r7, #23]
 800109e:	3301      	adds	r3, #1
 80010a0:	75fb      	strb	r3, [r7, #23]
 80010a2:	e004      	b.n	80010ae <lcdPrintfThreeInts+0x80>
            }
        } else
        {
            lcdPrintChar(*format);
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff ff0d 	bl	8000ec8 <lcdPrintChar>
        }
        format++;
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	3301      	adds	r3, #1
 80010b2:	60fb      	str	r3, [r7, #12]
    while (*format != '\0')
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d1c8      	bne.n	800104e <lcdPrintfThreeInts+0x20>
    }
}
 80010bc:	bf00      	nop
 80010be:	bf00      	nop
 80010c0:	3718      	adds	r7, #24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <MX_I2C2_Init>:

/************************************
 * STATIC FUNCTIONS
 ************************************/
static void MX_I2C2_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80010cc:	4b1b      	ldr	r3, [pc, #108]	@ (800113c <MX_I2C2_Init+0x74>)
 80010ce:	4a1c      	ldr	r2, [pc, #112]	@ (8001140 <MX_I2C2_Init+0x78>)
 80010d0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = CLOCKSPEED;
 80010d2:	4b1a      	ldr	r3, [pc, #104]	@ (800113c <MX_I2C2_Init+0x74>)
 80010d4:	4a1b      	ldr	r2, [pc, #108]	@ (8001144 <MX_I2C2_Init+0x7c>)
 80010d6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010d8:	4b18      	ldr	r3, [pc, #96]	@ (800113c <MX_I2C2_Init+0x74>)
 80010da:	2200      	movs	r2, #0
 80010dc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80010de:	4b17      	ldr	r3, [pc, #92]	@ (800113c <MX_I2C2_Init+0x74>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010e4:	4b15      	ldr	r3, [pc, #84]	@ (800113c <MX_I2C2_Init+0x74>)
 80010e6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80010ea:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010ec:	4b13      	ldr	r3, [pc, #76]	@ (800113c <MX_I2C2_Init+0x74>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80010f2:	4b12      	ldr	r3, [pc, #72]	@ (800113c <MX_I2C2_Init+0x74>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010f8:	4b10      	ldr	r3, [pc, #64]	@ (800113c <MX_I2C2_Init+0x74>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010fe:	4b0f      	ldr	r3, [pc, #60]	@ (800113c <MX_I2C2_Init+0x74>)
 8001100:	2200      	movs	r2, #0
 8001102:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001104:	480d      	ldr	r0, [pc, #52]	@ (800113c <MX_I2C2_Init+0x74>)
 8001106:	f002 f84b 	bl	80031a0 <HAL_I2C_Init>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001110:	f7ff fab4 	bl	800067c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001114:	2100      	movs	r1, #0
 8001116:	4809      	ldr	r0, [pc, #36]	@ (800113c <MX_I2C2_Init+0x74>)
 8001118:	f003 f83c 	bl	8004194 <HAL_I2CEx_ConfigAnalogFilter>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001122:	f7ff faab 	bl	800067c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001126:	2100      	movs	r1, #0
 8001128:	4804      	ldr	r0, [pc, #16]	@ (800113c <MX_I2C2_Init+0x74>)
 800112a:	f003 f86f 	bl	800420c <HAL_I2CEx_ConfigDigitalFilter>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001134:	f7ff faa2 	bl	800067c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}
 800113c:	200000d8 	.word	0x200000d8
 8001140:	40005800 	.word	0x40005800
 8001144:	000186a0 	.word	0x000186a0

08001148 <rtcSetRegByte>:
static void rtcSetRegByte (uint8_t regAddr, uint8_t val)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af02      	add	r7, sp, #8
 800114e:	4603      	mov	r3, r0
 8001150:	460a      	mov	r2, r1
 8001152:	71fb      	strb	r3, [r7, #7]
 8001154:	4613      	mov	r3, r2
 8001156:	71bb      	strb	r3, [r7, #6]
	uint8_t bytes[2]= {regAddr, val};
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	733b      	strb	r3, [r7, #12]
 800115c:	79bb      	ldrb	r3, [r7, #6]
 800115e:	737b      	strb	r3, [r7, #13]
	if (HAL_I2C_Master_Transmit(rtcHandle.hi2c, (rtcHandle.address<<1), bytes, 2, 100)!= HAL_OK)
 8001160:	4b0b      	ldr	r3, [pc, #44]	@ (8001190 <rtcSetRegByte+0x48>)
 8001162:	6818      	ldr	r0, [r3, #0]
 8001164:	4b0a      	ldr	r3, [pc, #40]	@ (8001190 <rtcSetRegByte+0x48>)
 8001166:	791b      	ldrb	r3, [r3, #4]
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	b299      	uxth	r1, r3
 800116c:	f107 020c 	add.w	r2, r7, #12
 8001170:	2364      	movs	r3, #100	@ 0x64
 8001172:	9300      	str	r3, [sp, #0]
 8001174:	2302      	movs	r3, #2
 8001176:	f002 f957 	bl	8003428 <HAL_I2C_Master_Transmit>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d002      	beq.n	8001186 <rtcSetRegByte+0x3e>
		{
		uartSendString((uint8_t*)"error tx RTC\n\r");
 8001180:	4804      	ldr	r0, [pc, #16]	@ (8001194 <rtcSetRegByte+0x4c>)
 8001182:	f000 fa27 	bl	80015d4 <uartSendString>
		}
}
 8001186:	bf00      	nop
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000004 	.word	0x20000004
 8001194:	08006900 	.word	0x08006900

08001198 <rtcGetRegByte>:
static uint8_t rtcGetRegByte (uint8_t regAddr)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af02      	add	r7, sp, #8
 800119e:	4603      	mov	r3, r0
 80011a0:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	if (HAL_I2C_Master_Transmit(rtcHandle.hi2c, (rtcHandle.address<<1), &regAddr, 1, RTC_TIMEOUT)!= HAL_OK)
 80011a2:	4b16      	ldr	r3, [pc, #88]	@ (80011fc <rtcGetRegByte+0x64>)
 80011a4:	6818      	ldr	r0, [r3, #0]
 80011a6:	4b15      	ldr	r3, [pc, #84]	@ (80011fc <rtcGetRegByte+0x64>)
 80011a8:	791b      	ldrb	r3, [r3, #4]
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	b299      	uxth	r1, r3
 80011ae:	1dfa      	adds	r2, r7, #7
 80011b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011b4:	9300      	str	r3, [sp, #0]
 80011b6:	2301      	movs	r3, #1
 80011b8:	f002 f936 	bl	8003428 <HAL_I2C_Master_Transmit>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d002      	beq.n	80011c8 <rtcGetRegByte+0x30>
		{
		uartSendString((uint8_t*)"error tx RTC \n\r");
 80011c2:	480f      	ldr	r0, [pc, #60]	@ (8001200 <rtcGetRegByte+0x68>)
 80011c4:	f000 fa06 	bl	80015d4 <uartSendString>
		}
	if (HAL_I2C_Master_Receive(rtcHandle.hi2c, (rtcHandle.address<<1), &val, 1, RTC_TIMEOUT)!= HAL_OK)
 80011c8:	4b0c      	ldr	r3, [pc, #48]	@ (80011fc <rtcGetRegByte+0x64>)
 80011ca:	6818      	ldr	r0, [r3, #0]
 80011cc:	4b0b      	ldr	r3, [pc, #44]	@ (80011fc <rtcGetRegByte+0x64>)
 80011ce:	791b      	ldrb	r3, [r3, #4]
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	b299      	uxth	r1, r3
 80011d4:	f107 020f 	add.w	r2, r7, #15
 80011d8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011dc:	9300      	str	r3, [sp, #0]
 80011de:	2301      	movs	r3, #1
 80011e0:	f002 fa20 	bl	8003624 <HAL_I2C_Master_Receive>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d002      	beq.n	80011f0 <rtcGetRegByte+0x58>
		{
		uartSendString((uint8_t*)"error rx RTC \n\r");
 80011ea:	4806      	ldr	r0, [pc, #24]	@ (8001204 <rtcGetRegByte+0x6c>)
 80011ec:	f000 f9f2 	bl	80015d4 <uartSendString>
		}
	return val;
 80011f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000004 	.word	0x20000004
 8001200:	08006910 	.word	0x08006910
 8001204:	08006920 	.word	0x08006920

08001208 <decodeBCD>:
static uint8_t decodeBCD (uint8_t bcd)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	71fb      	strb	r3, [r7, #7]
	return (((bcd & 0xf0) >> 4) * 10) + (bcd & 0x0f);
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	091b      	lsrs	r3, r3, #4
 8001216:	b2db      	uxtb	r3, r3
 8001218:	461a      	mov	r2, r3
 800121a:	0092      	lsls	r2, r2, #2
 800121c:	4413      	add	r3, r2
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	b2da      	uxtb	r2, r3
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	f003 030f 	and.w	r3, r3, #15
 8001228:	b2db      	uxtb	r3, r3
 800122a:	4413      	add	r3, r2
 800122c:	b2db      	uxtb	r3, r3
}
 800122e:	4618      	mov	r0, r3
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
	...

0800123c <encodeBCD>:
static uint8_t encodeBCD (uint8_t dec)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	71fb      	strb	r3, [r7, #7]
	return (dec % 10 + ((dec / 10) << 4));
 8001246:	79fa      	ldrb	r2, [r7, #7]
 8001248:	4b0c      	ldr	r3, [pc, #48]	@ (800127c <encodeBCD+0x40>)
 800124a:	fba3 1302 	umull	r1, r3, r3, r2
 800124e:	08d9      	lsrs	r1, r3, #3
 8001250:	460b      	mov	r3, r1
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	440b      	add	r3, r1
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	b2da      	uxtb	r2, r3
 800125c:	79fb      	ldrb	r3, [r7, #7]
 800125e:	4907      	ldr	r1, [pc, #28]	@ (800127c <encodeBCD+0x40>)
 8001260:	fba1 1303 	umull	r1, r3, r1, r3
 8001264:	08db      	lsrs	r3, r3, #3
 8001266:	b2db      	uxtb	r3, r3
 8001268:	011b      	lsls	r3, r3, #4
 800126a:	b2db      	uxtb	r3, r3
 800126c:	4413      	add	r3, r2
 800126e:	b2db      	uxtb	r3, r3
}
 8001270:	4618      	mov	r0, r3
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	cccccccd 	.word	0xcccccccd

08001280 <rtcInit>:
/************************************
 * GLOBAL FUNCTIONS
 ************************************/
void rtcInit()
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
	MX_I2C2_Init();
 8001284:	f7ff ff20 	bl	80010c8 <MX_I2C2_Init>
	rtcHaltnt();
 8001288:	f000 f806 	bl	8001298 <rtcHaltnt>
	rtcSetTimeZone(4,0); //Montevideo
 800128c:	2100      	movs	r1, #0
 800128e:	2004      	movs	r0, #4
 8001290:	f000 f920 	bl	80014d4 <rtcSetTimeZone>
}
 8001294:	bf00      	nop
 8001296:	bd80      	pop	{r7, pc}

08001298 <rtcHaltnt>:
{
	rtcSetRegByte(RTC_SECOND, HALT_BIT);
	rtcHandle.halt = true;
}
void rtcHaltnt()
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
	rtcSetRegByte(RTC_SECOND, 0x00);
 800129c:	2100      	movs	r1, #0
 800129e:	2000      	movs	r0, #0
 80012a0:	f7ff ff52 	bl	8001148 <rtcSetRegByte>
	rtcHandle.halt = false;
 80012a4:	4b02      	ldr	r3, [pc, #8]	@ (80012b0 <rtcHaltnt+0x18>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	715a      	strb	r2, [r3, #5]
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20000004 	.word	0x20000004

080012b4 <rtcGetDate>:
bool_t rtcIsHalted()
{
	return (bool_t)(rtcGetRegByte(RTC_SECOND)&0x80)>>7;
}
uint8_t rtcGetDate(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
	return decodeBCD(rtcGetRegByte(RTC_DATE));
 80012b8:	2004      	movs	r0, #4
 80012ba:	f7ff ff6d 	bl	8001198 <rtcGetRegByte>
 80012be:	4603      	mov	r3, r0
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff ffa1 	bl	8001208 <decodeBCD>
 80012c6:	4603      	mov	r3, r0
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	bd80      	pop	{r7, pc}

080012cc <rtcGetMonth>:
uint8_t rtcGetMonth(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
	return decodeBCD(rtcGetRegByte(RTC_MONTH));
 80012d0:	2005      	movs	r0, #5
 80012d2:	f7ff ff61 	bl	8001198 <rtcGetRegByte>
 80012d6:	4603      	mov	r3, r0
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff ff95 	bl	8001208 <decodeBCD>
 80012de:	4603      	mov	r3, r0
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <rtcGetYear>:
uint16_t rtcGetYear(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
	return decodeBCD(rtcGetRegByte(RTC_YEAR));
 80012e8:	2006      	movs	r0, #6
 80012ea:	f7ff ff55 	bl	8001198 <rtcGetRegByte>
 80012ee:	4603      	mov	r3, r0
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff ff89 	bl	8001208 <decodeBCD>
 80012f6:	4603      	mov	r3, r0
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	bd80      	pop	{r7, pc}

080012fc <rtcGetHour>:

uint8_t rtcGetHour(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
	return decodeBCD(rtcGetRegByte(RTC_HOUR));
 8001300:	2002      	movs	r0, #2
 8001302:	f7ff ff49 	bl	8001198 <rtcGetRegByte>
 8001306:	4603      	mov	r3, r0
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff ff7d 	bl	8001208 <decodeBCD>
 800130e:	4603      	mov	r3, r0
}
 8001310:	4618      	mov	r0, r3
 8001312:	bd80      	pop	{r7, pc}

08001314 <rtcGetMinute>:
uint8_t rtcGetMinute(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
	return decodeBCD(rtcGetRegByte(RTC_MINUTE));
 8001318:	2001      	movs	r0, #1
 800131a:	f7ff ff3d 	bl	8001198 <rtcGetRegByte>
 800131e:	4603      	mov	r3, r0
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff ff71 	bl	8001208 <decodeBCD>
 8001326:	4603      	mov	r3, r0
}
 8001328:	4618      	mov	r0, r3
 800132a:	bd80      	pop	{r7, pc}

0800132c <rtcGetSecond>:
uint8_t rtcGetSecond(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
	return decodeBCD(rtcGetRegByte(RTC_SECOND));
 8001330:	2000      	movs	r0, #0
 8001332:	f7ff ff31 	bl	8001198 <rtcGetRegByte>
 8001336:	4603      	mov	r3, r0
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff ff65 	bl	8001208 <decodeBCD>
 800133e:	4603      	mov	r3, r0
}
 8001340:	4618      	mov	r0, r3
 8001342:	bd80      	pop	{r7, pc}

08001344 <rtcSetDate>:
uint8_t rtcGetTimeZoneMin(void)
{
	return decodeBCD(rtcGetRegByte(RTC_UTC_MIN));
}
void rtcSetDate(uint8_t date)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	71fb      	strb	r3, [r7, #7]
	if ((date>31) | (date<1))
 800134e:	79fb      	ldrb	r3, [r7, #7]
 8001350:	2b1f      	cmp	r3, #31
 8001352:	bf8c      	ite	hi
 8001354:	2301      	movhi	r3, #1
 8001356:	2300      	movls	r3, #0
 8001358:	b2da      	uxtb	r2, r3
 800135a:	79fb      	ldrb	r3, [r7, #7]
 800135c:	2b00      	cmp	r3, #0
 800135e:	bf0c      	ite	eq
 8001360:	2301      	moveq	r3, #1
 8001362:	2300      	movne	r3, #0
 8001364:	b2db      	uxtb	r3, r3
 8001366:	4313      	orrs	r3, r2
 8001368:	b2db      	uxtb	r3, r3
 800136a:	2b00      	cmp	r3, #0
 800136c:	d002      	beq.n	8001374 <rtcSetDate+0x30>
	{
		uartSendString((uint8_t*)"wrongDateValidation");
 800136e:	4808      	ldr	r0, [pc, #32]	@ (8001390 <rtcSetDate+0x4c>)
 8001370:	f000 f930 	bl	80015d4 <uartSendString>
	}
	rtcSetRegByte(RTC_DATE, encodeBCD(date));
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff ff60 	bl	800123c <encodeBCD>
 800137c:	4603      	mov	r3, r0
 800137e:	4619      	mov	r1, r3
 8001380:	2004      	movs	r0, #4
 8001382:	f7ff fee1 	bl	8001148 <rtcSetRegByte>
}
 8001386:	bf00      	nop
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	08006930 	.word	0x08006930

08001394 <rtcSetMonth>:
void rtcSetMonth(uint8_t month)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	71fb      	strb	r3, [r7, #7]
	if ((month >12) | (month <1))
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	2b0c      	cmp	r3, #12
 80013a2:	bf8c      	ite	hi
 80013a4:	2301      	movhi	r3, #1
 80013a6:	2300      	movls	r3, #0
 80013a8:	b2da      	uxtb	r2, r3
 80013aa:	79fb      	ldrb	r3, [r7, #7]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	bf0c      	ite	eq
 80013b0:	2301      	moveq	r3, #1
 80013b2:	2300      	movne	r3, #0
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	4313      	orrs	r3, r2
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d002      	beq.n	80013c4 <rtcSetMonth+0x30>
	{
		uartSendString((uint8_t*)"wrongMonthValidation");
 80013be:	4808      	ldr	r0, [pc, #32]	@ (80013e0 <rtcSetMonth+0x4c>)
 80013c0:	f000 f908 	bl	80015d4 <uartSendString>
	}
	rtcSetRegByte(RTC_MONTH, encodeBCD(month));
 80013c4:	79fb      	ldrb	r3, [r7, #7]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff ff38 	bl	800123c <encodeBCD>
 80013cc:	4603      	mov	r3, r0
 80013ce:	4619      	mov	r1, r3
 80013d0:	2005      	movs	r0, #5
 80013d2:	f7ff feb9 	bl	8001148 <rtcSetRegByte>
}
 80013d6:	bf00      	nop
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	08006944 	.word	0x08006944

080013e4 <rtcSetYear>:
void rtcSetYear(uint16_t year)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	80fb      	strh	r3, [r7, #6]
	if ((year>99) | (year<0))
 80013ee:	88fb      	ldrh	r3, [r7, #6]
 80013f0:	2b63      	cmp	r3, #99	@ 0x63
 80013f2:	d902      	bls.n	80013fa <rtcSetYear+0x16>
	{
		uartSendString((uint8_t*)"wrongYearValidation");
 80013f4:	4808      	ldr	r0, [pc, #32]	@ (8001418 <rtcSetYear+0x34>)
 80013f6:	f000 f8ed 	bl	80015d4 <uartSendString>
	}
	rtcSetRegByte(RTC_YEAR, encodeBCD(year));
 80013fa:	88fb      	ldrh	r3, [r7, #6]
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff ff1c 	bl	800123c <encodeBCD>
 8001404:	4603      	mov	r3, r0
 8001406:	4619      	mov	r1, r3
 8001408:	2006      	movs	r0, #6
 800140a:	f7ff fe9d 	bl	8001148 <rtcSetRegByte>
}
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	0800695c 	.word	0x0800695c

0800141c <rtcSetHour>:

void rtcSetHour(uint8_t hour_24mode)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	71fb      	strb	r3, [r7, #7]
	if ((hour_24mode>23) | (hour_24mode<0))
 8001426:	79fb      	ldrb	r3, [r7, #7]
 8001428:	2b17      	cmp	r3, #23
 800142a:	d902      	bls.n	8001432 <rtcSetHour+0x16>
	{
		uartSendString((uint8_t*)"wrongHourValidation");
 800142c:	4807      	ldr	r0, [pc, #28]	@ (800144c <rtcSetHour+0x30>)
 800142e:	f000 f8d1 	bl	80015d4 <uartSendString>
	}
	rtcSetRegByte(RTC_HOUR, encodeBCD(hour_24mode));
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff ff01 	bl	800123c <encodeBCD>
 800143a:	4603      	mov	r3, r0
 800143c:	4619      	mov	r1, r3
 800143e:	2002      	movs	r0, #2
 8001440:	f7ff fe82 	bl	8001148 <rtcSetRegByte>
}
 8001444:	bf00      	nop
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	08006970 	.word	0x08006970

08001450 <rtcSetMinute>:
void rtcSetMinute(uint8_t minute)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	71fb      	strb	r3, [r7, #7]
	if ((minute>59) | (minute<0))
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	2b3b      	cmp	r3, #59	@ 0x3b
 800145e:	d902      	bls.n	8001466 <rtcSetMinute+0x16>
	{
		uartSendString((uint8_t*)"wrongMinuteValidation");
 8001460:	4807      	ldr	r0, [pc, #28]	@ (8001480 <rtcSetMinute+0x30>)
 8001462:	f000 f8b7 	bl	80015d4 <uartSendString>
	}
	rtcSetRegByte(RTC_MINUTE, encodeBCD(minute));
 8001466:	79fb      	ldrb	r3, [r7, #7]
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff fee7 	bl	800123c <encodeBCD>
 800146e:	4603      	mov	r3, r0
 8001470:	4619      	mov	r1, r3
 8001472:	2001      	movs	r0, #1
 8001474:	f7ff fe68 	bl	8001148 <rtcSetRegByte>
}
 8001478:	bf00      	nop
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	08006984 	.word	0x08006984

08001484 <rtcSetSecond>:
void rtcSetSecond(uint8_t second)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	71fb      	strb	r3, [r7, #7]
	if ((second>59) | (second<1))
 800148e:	79fb      	ldrb	r3, [r7, #7]
 8001490:	2b3b      	cmp	r3, #59	@ 0x3b
 8001492:	bf8c      	ite	hi
 8001494:	2301      	movhi	r3, #1
 8001496:	2300      	movls	r3, #0
 8001498:	b2da      	uxtb	r2, r3
 800149a:	79fb      	ldrb	r3, [r7, #7]
 800149c:	2b00      	cmp	r3, #0
 800149e:	bf0c      	ite	eq
 80014a0:	2301      	moveq	r3, #1
 80014a2:	2300      	movne	r3, #0
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	4313      	orrs	r3, r2
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d002      	beq.n	80014b4 <rtcSetSecond+0x30>
	{
		uartSendString((uint8_t*)"wrongSecondsValidation");
 80014ae:	4808      	ldr	r0, [pc, #32]	@ (80014d0 <rtcSetSecond+0x4c>)
 80014b0:	f000 f890 	bl	80015d4 <uartSendString>
	}
	rtcSetRegByte(RTC_SECOND, encodeBCD(second));
 80014b4:	79fb      	ldrb	r3, [r7, #7]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff fec0 	bl	800123c <encodeBCD>
 80014bc:	4603      	mov	r3, r0
 80014be:	4619      	mov	r1, r3
 80014c0:	2000      	movs	r0, #0
 80014c2:	f7ff fe41 	bl	8001148 <rtcSetRegByte>
}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	0800699c 	.word	0x0800699c

080014d4 <rtcSetTimeZone>:
void rtcSetTimeZone(int8_t hr, uint8_t min)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	460a      	mov	r2, r1
 80014de:	71fb      	strb	r3, [r7, #7]
 80014e0:	4613      	mov	r3, r2
 80014e2:	71bb      	strb	r3, [r7, #6]
	if ((hr>12) | (hr<-12))
 80014e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e8:	2b0c      	cmp	r3, #12
 80014ea:	bfcc      	ite	gt
 80014ec:	2301      	movgt	r3, #1
 80014ee:	2300      	movle	r3, #0
 80014f0:	b2da      	uxtb	r2, r3
 80014f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f6:	f113 0f0c 	cmn.w	r3, #12
 80014fa:	bfb4      	ite	lt
 80014fc:	2301      	movlt	r3, #1
 80014fe:	2300      	movge	r3, #0
 8001500:	b2db      	uxtb	r3, r3
 8001502:	4313      	orrs	r3, r2
 8001504:	b2db      	uxtb	r3, r3
 8001506:	2b00      	cmp	r3, #0
 8001508:	d002      	beq.n	8001510 <rtcSetTimeZone+0x3c>
	{
		uartSendString((uint8_t*)"wrongTimeZoneValidation");
 800150a:	480f      	ldr	r0, [pc, #60]	@ (8001548 <rtcSetTimeZone+0x74>)
 800150c:	f000 f862 	bl	80015d4 <uartSendString>
	}
	if ((min>59) | (min<0))
 8001510:	79bb      	ldrb	r3, [r7, #6]
 8001512:	2b3b      	cmp	r3, #59	@ 0x3b
 8001514:	d902      	bls.n	800151c <rtcSetTimeZone+0x48>
	{
		uartSendString((uint8_t*)"wrongTimeZoneValidation");
 8001516:	480c      	ldr	r0, [pc, #48]	@ (8001548 <rtcSetTimeZone+0x74>)
 8001518:	f000 f85c 	bl	80015d4 <uartSendString>
	}
	rtcSetRegByte(RTC_UTC_HR, encodeBCD(hr));
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff fe8c 	bl	800123c <encodeBCD>
 8001524:	4603      	mov	r3, r0
 8001526:	4619      	mov	r1, r3
 8001528:	2008      	movs	r0, #8
 800152a:	f7ff fe0d 	bl	8001148 <rtcSetRegByte>
	rtcSetRegByte(RTC_UTC_MIN, encodeBCD(min));
 800152e:	79bb      	ldrb	r3, [r7, #6]
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff fe83 	bl	800123c <encodeBCD>
 8001536:	4603      	mov	r3, r0
 8001538:	4619      	mov	r1, r3
 800153a:	2009      	movs	r0, #9
 800153c:	f7ff fe04 	bl	8001148 <rtcSetRegByte>
}
 8001540:	bf00      	nop
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	080069b4 	.word	0x080069b4

0800154c <MX_USART3_UART_Init>:

/************************************
 * STATIC FUNCTIONS
 ************************************/
static void MX_USART3_UART_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  huart3.Instance = USART3;
 8001550:	4b11      	ldr	r3, [pc, #68]	@ (8001598 <MX_USART3_UART_Init+0x4c>)
 8001552:	4a12      	ldr	r2, [pc, #72]	@ (800159c <MX_USART3_UART_Init+0x50>)
 8001554:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = BAUDRATE;
 8001556:	4b10      	ldr	r3, [pc, #64]	@ (8001598 <MX_USART3_UART_Init+0x4c>)
 8001558:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800155c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800155e:	4b0e      	ldr	r3, [pc, #56]	@ (8001598 <MX_USART3_UART_Init+0x4c>)
 8001560:	2200      	movs	r2, #0
 8001562:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001564:	4b0c      	ldr	r3, [pc, #48]	@ (8001598 <MX_USART3_UART_Init+0x4c>)
 8001566:	2200      	movs	r2, #0
 8001568:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800156a:	4b0b      	ldr	r3, [pc, #44]	@ (8001598 <MX_USART3_UART_Init+0x4c>)
 800156c:	2200      	movs	r2, #0
 800156e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001570:	4b09      	ldr	r3, [pc, #36]	@ (8001598 <MX_USART3_UART_Init+0x4c>)
 8001572:	220c      	movs	r2, #12
 8001574:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001576:	4b08      	ldr	r3, [pc, #32]	@ (8001598 <MX_USART3_UART_Init+0x4c>)
 8001578:	2200      	movs	r2, #0
 800157a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800157c:	4b06      	ldr	r3, [pc, #24]	@ (8001598 <MX_USART3_UART_Init+0x4c>)
 800157e:	2200      	movs	r2, #0
 8001580:	61da      	str	r2, [r3, #28]

  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001582:	4805      	ldr	r0, [pc, #20]	@ (8001598 <MX_USART3_UART_Init+0x4c>)
 8001584:	f003 fb1a 	bl	8004bbc <HAL_UART_Init>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800158e:	f7ff f875 	bl	800067c <Error_Handler>
  }
}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	2000014c 	.word	0x2000014c
 800159c:	40004800 	.word	0x40004800

080015a0 <uartInit>:
/************************************
 * GLOBAL FUNCTIONS
 ************************************/
void uartInit ()
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
	MX_USART3_UART_Init();
 80015a4:	f7ff ffd2 	bl	800154c <MX_USART3_UART_Init>
	uartSendString(UART_CONFIG_STRING);
 80015a8:	4806      	ldr	r0, [pc, #24]	@ (80015c4 <uartInit+0x24>)
 80015aa:	f000 f813 	bl	80015d4 <uartSendString>
	circularBufferInit(&uartUserBuffer);
 80015ae:	4806      	ldr	r0, [pc, #24]	@ (80015c8 <uartInit+0x28>)
 80015b0:	f000 fa96 	bl	8001ae0 <circularBufferInit>
	HAL_UART_Receive_IT(&huart3, &rxBuffer, 1);
 80015b4:	2201      	movs	r2, #1
 80015b6:	4905      	ldr	r1, [pc, #20]	@ (80015cc <uartInit+0x2c>)
 80015b8:	4805      	ldr	r0, [pc, #20]	@ (80015d0 <uartInit+0x30>)
 80015ba:	f003 fbda 	bl	8004d72 <HAL_UART_Receive_IT>
}
 80015be:	bf00      	nop
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	080069cc 	.word	0x080069cc
 80015c8:	20000130 	.word	0x20000130
 80015cc:	2000012c 	.word	0x2000012c
 80015d0:	2000014c 	.word	0x2000014c

080015d4 <uartSendString>:
void uartDeInit ()
{
	HAL_UART_MspDeInit(&huart3);
}
void uartSendString (uint8_t* pstring)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef uartStatus;
	uint16_t size = 0;
 80015dc:	2300      	movs	r3, #0
 80015de:	81fb      	strh	r3, [r7, #14]

	if (pstring == NULL)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d105      	bne.n	80015f2 <uartSendString+0x1e>
	{
		Error_Handler();
 80015e6:	f7ff f849 	bl	800067c <Error_Handler>
	}

	while (pstring[size] != '\0')
 80015ea:	e002      	b.n	80015f2 <uartSendString+0x1e>
	{
		size++;
 80015ec:	89fb      	ldrh	r3, [r7, #14]
 80015ee:	3301      	adds	r3, #1
 80015f0:	81fb      	strh	r3, [r7, #14]
	while (pstring[size] != '\0')
 80015f2:	89fb      	ldrh	r3, [r7, #14]
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	4413      	add	r3, r2
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d1f6      	bne.n	80015ec <uartSendString+0x18>
	}

	//TX and Status
	uartStatus = HAL_UART_Transmit(&huart3, pstring, size, HAL_MAX_DELAY);
 80015fe:	89fa      	ldrh	r2, [r7, #14]
 8001600:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001604:	6879      	ldr	r1, [r7, #4]
 8001606:	4807      	ldr	r0, [pc, #28]	@ (8001624 <uartSendString+0x50>)
 8001608:	f003 fb28 	bl	8004c5c <HAL_UART_Transmit>
 800160c:	4603      	mov	r3, r0
 800160e:	737b      	strb	r3, [r7, #13]
	if (uartStatus != HAL_OK)
 8001610:	7b7b      	ldrb	r3, [r7, #13]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <uartSendString+0x46>
	{
		Error_Handler();
 8001616:	f7ff f831 	bl	800067c <Error_Handler>
	}
}
 800161a:	bf00      	nop
 800161c:	3710      	adds	r7, #16
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	2000014c 	.word	0x2000014c

08001628 <HAL_UART_RxCpltCallback>:
		Error_Handler();
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a0c      	ldr	r2, [pc, #48]	@ (8001668 <HAL_UART_RxCpltCallback+0x40>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d112      	bne.n	8001660 <HAL_UART_RxCpltCallback+0x38>
    {
    	if ((rxBuffer >= ' ') && (rxBuffer <= 126)) //Valid ascii character
 800163a:	4b0c      	ldr	r3, [pc, #48]	@ (800166c <HAL_UART_RxCpltCallback+0x44>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	2b1f      	cmp	r3, #31
 8001640:	d909      	bls.n	8001656 <HAL_UART_RxCpltCallback+0x2e>
 8001642:	4b0a      	ldr	r3, [pc, #40]	@ (800166c <HAL_UART_RxCpltCallback+0x44>)
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	2b7e      	cmp	r3, #126	@ 0x7e
 8001648:	d805      	bhi.n	8001656 <HAL_UART_RxCpltCallback+0x2e>
    	{
        	//Write into userBuffer
            circularBufferWriteByte(&uartUserBuffer, rxBuffer);
 800164a:	4b08      	ldr	r3, [pc, #32]	@ (800166c <HAL_UART_RxCpltCallback+0x44>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	4619      	mov	r1, r3
 8001650:	4807      	ldr	r0, [pc, #28]	@ (8001670 <HAL_UART_RxCpltCallback+0x48>)
 8001652:	f000 fa7b 	bl	8001b4c <circularBufferWriteByte>
    	}

        HAL_UART_Receive_IT(&huart3, &rxBuffer, 1);
 8001656:	2201      	movs	r2, #1
 8001658:	4904      	ldr	r1, [pc, #16]	@ (800166c <HAL_UART_RxCpltCallback+0x44>)
 800165a:	4806      	ldr	r0, [pc, #24]	@ (8001674 <HAL_UART_RxCpltCallback+0x4c>)
 800165c:	f003 fb89 	bl	8004d72 <HAL_UART_Receive_IT>
    }
}
 8001660:	bf00      	nop
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40004800 	.word	0x40004800
 800166c:	2000012c 	.word	0x2000012c
 8001670:	20000130 	.word	0x20000130
 8001674:	2000014c 	.word	0x2000014c

08001678 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b08c      	sub	sp, #48	@ 0x30
 800167c:	af00      	add	r7, sp, #0
 GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167e:	f107 031c 	add.w	r3, r7, #28
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	605a      	str	r2, [r3, #4]
 8001688:	609a      	str	r2, [r3, #8]
 800168a:	60da      	str	r2, [r3, #12]
 800168c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

 /* GPIO Ports Clock Enable */
 __HAL_RCC_GPIOC_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	61bb      	str	r3, [r7, #24]
 8001692:	4b7c      	ldr	r3, [pc, #496]	@ (8001884 <MX_GPIO_Init+0x20c>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001696:	4a7b      	ldr	r2, [pc, #492]	@ (8001884 <MX_GPIO_Init+0x20c>)
 8001698:	f043 0304 	orr.w	r3, r3, #4
 800169c:	6313      	str	r3, [r2, #48]	@ 0x30
 800169e:	4b79      	ldr	r3, [pc, #484]	@ (8001884 <MX_GPIO_Init+0x20c>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a2:	f003 0304 	and.w	r3, r3, #4
 80016a6:	61bb      	str	r3, [r7, #24]
 80016a8:	69bb      	ldr	r3, [r7, #24]
 __HAL_RCC_GPIOH_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	617b      	str	r3, [r7, #20]
 80016ae:	4b75      	ldr	r3, [pc, #468]	@ (8001884 <MX_GPIO_Init+0x20c>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b2:	4a74      	ldr	r2, [pc, #464]	@ (8001884 <MX_GPIO_Init+0x20c>)
 80016b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ba:	4b72      	ldr	r3, [pc, #456]	@ (8001884 <MX_GPIO_Init+0x20c>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016c2:	617b      	str	r3, [r7, #20]
 80016c4:	697b      	ldr	r3, [r7, #20]
 __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	613b      	str	r3, [r7, #16]
 80016ca:	4b6e      	ldr	r3, [pc, #440]	@ (8001884 <MX_GPIO_Init+0x20c>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ce:	4a6d      	ldr	r2, [pc, #436]	@ (8001884 <MX_GPIO_Init+0x20c>)
 80016d0:	f043 0301 	orr.w	r3, r3, #1
 80016d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016d6:	4b6b      	ldr	r3, [pc, #428]	@ (8001884 <MX_GPIO_Init+0x20c>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	613b      	str	r3, [r7, #16]
 80016e0:	693b      	ldr	r3, [r7, #16]
 __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	60fb      	str	r3, [r7, #12]
 80016e6:	4b67      	ldr	r3, [pc, #412]	@ (8001884 <MX_GPIO_Init+0x20c>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ea:	4a66      	ldr	r2, [pc, #408]	@ (8001884 <MX_GPIO_Init+0x20c>)
 80016ec:	f043 0302 	orr.w	r3, r3, #2
 80016f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016f2:	4b64      	ldr	r3, [pc, #400]	@ (8001884 <MX_GPIO_Init+0x20c>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	60fb      	str	r3, [r7, #12]
 80016fc:	68fb      	ldr	r3, [r7, #12]
 __HAL_RCC_GPIOD_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	60bb      	str	r3, [r7, #8]
 8001702:	4b60      	ldr	r3, [pc, #384]	@ (8001884 <MX_GPIO_Init+0x20c>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001706:	4a5f      	ldr	r2, [pc, #380]	@ (8001884 <MX_GPIO_Init+0x20c>)
 8001708:	f043 0308 	orr.w	r3, r3, #8
 800170c:	6313      	str	r3, [r2, #48]	@ 0x30
 800170e:	4b5d      	ldr	r3, [pc, #372]	@ (8001884 <MX_GPIO_Init+0x20c>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001712:	f003 0308 	and.w	r3, r3, #8
 8001716:	60bb      	str	r3, [r7, #8]
 8001718:	68bb      	ldr	r3, [r7, #8]
 __HAL_RCC_GPIOG_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	607b      	str	r3, [r7, #4]
 800171e:	4b59      	ldr	r3, [pc, #356]	@ (8001884 <MX_GPIO_Init+0x20c>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001722:	4a58      	ldr	r2, [pc, #352]	@ (8001884 <MX_GPIO_Init+0x20c>)
 8001724:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001728:	6313      	str	r3, [r2, #48]	@ 0x30
 800172a:	4b56      	ldr	r3, [pc, #344]	@ (8001884 <MX_GPIO_Init+0x20c>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001732:	607b      	str	r3, [r7, #4]
 8001734:	687b      	ldr	r3, [r7, #4]

 /*Configure GPIO pin Output Level */
 HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 8001736:	2200      	movs	r2, #0
 8001738:	f244 0181 	movw	r1, #16513	@ 0x4081
 800173c:	4852      	ldr	r0, [pc, #328]	@ (8001888 <MX_GPIO_Init+0x210>)
 800173e:	f001 fd15 	bl	800316c <HAL_GPIO_WritePin>

 /*Configure GPIO pin Output Level */
 HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8001742:	2200      	movs	r2, #0
 8001744:	2140      	movs	r1, #64	@ 0x40
 8001746:	4851      	ldr	r0, [pc, #324]	@ (800188c <MX_GPIO_Init+0x214>)
 8001748:	f001 fd10 	bl	800316c <HAL_GPIO_WritePin>

 /*Configure GPIO pin : USER_BUTTON_Pin */
 GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 800174c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001750:	61fb      	str	r3, [r7, #28]
 GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001752:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001756:	623b      	str	r3, [r7, #32]
 GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001758:	2300      	movs	r3, #0
 800175a:	627b      	str	r3, [r7, #36]	@ 0x24
 HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800175c:	f107 031c 	add.w	r3, r7, #28
 8001760:	4619      	mov	r1, r3
 8001762:	484b      	ldr	r0, [pc, #300]	@ (8001890 <MX_GPIO_Init+0x218>)
 8001764:	f001 fb3e 	bl	8002de4 <HAL_GPIO_Init>

 /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
 GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001768:	2332      	movs	r3, #50	@ 0x32
 800176a:	61fb      	str	r3, [r7, #28]
 GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176c:	2302      	movs	r3, #2
 800176e:	623b      	str	r3, [r7, #32]
 GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	627b      	str	r3, [r7, #36]	@ 0x24
 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001774:	2303      	movs	r3, #3
 8001776:	62bb      	str	r3, [r7, #40]	@ 0x28
 GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001778:	230b      	movs	r3, #11
 800177a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800177c:	f107 031c 	add.w	r3, r7, #28
 8001780:	4619      	mov	r1, r3
 8001782:	4843      	ldr	r0, [pc, #268]	@ (8001890 <MX_GPIO_Init+0x218>)
 8001784:	f001 fb2e 	bl	8002de4 <HAL_GPIO_Init>

 /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
 GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001788:	2386      	movs	r3, #134	@ 0x86
 800178a:	61fb      	str	r3, [r7, #28]
 GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178c:	2302      	movs	r3, #2
 800178e:	623b      	str	r3, [r7, #32]
 GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	627b      	str	r3, [r7, #36]	@ 0x24
 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001794:	2303      	movs	r3, #3
 8001796:	62bb      	str	r3, [r7, #40]	@ 0x28
 GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001798:	230b      	movs	r3, #11
 800179a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800179c:	f107 031c 	add.w	r3, r7, #28
 80017a0:	4619      	mov	r1, r3
 80017a2:	483c      	ldr	r0, [pc, #240]	@ (8001894 <MX_GPIO_Init+0x21c>)
 80017a4:	f001 fb1e 	bl	8002de4 <HAL_GPIO_Init>

 /*Configure GPIO pins : LED1_Pin LED3_Pin LED2_Pin */
 GPIO_InitStruct.Pin = LED1_Pin|LED3_Pin|LED2_Pin;
 80017a8:	f244 0381 	movw	r3, #16513	@ 0x4081
 80017ac:	61fb      	str	r3, [r7, #28]
 GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ae:	2301      	movs	r3, #1
 80017b0:	623b      	str	r3, [r7, #32]
 GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b2:	2300      	movs	r3, #0
 80017b4:	627b      	str	r3, [r7, #36]	@ 0x24
 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b6:	2300      	movs	r3, #0
 80017b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ba:	f107 031c 	add.w	r3, r7, #28
 80017be:	4619      	mov	r1, r3
 80017c0:	4831      	ldr	r0, [pc, #196]	@ (8001888 <MX_GPIO_Init+0x210>)
 80017c2:	f001 fb0f 	bl	8002de4 <HAL_GPIO_Init>

 /*Configure GPIO pin : RMII_TXD1_Pin */
 GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80017c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017ca:	61fb      	str	r3, [r7, #28]
 GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017cc:	2302      	movs	r3, #2
 80017ce:	623b      	str	r3, [r7, #32]
 GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d0:	2300      	movs	r3, #0
 80017d2:	627b      	str	r3, [r7, #36]	@ 0x24
 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d4:	2303      	movs	r3, #3
 80017d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80017d8:	230b      	movs	r3, #11
 80017da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80017dc:	f107 031c 	add.w	r3, r7, #28
 80017e0:	4619      	mov	r1, r3
 80017e2:	4829      	ldr	r0, [pc, #164]	@ (8001888 <MX_GPIO_Init+0x210>)
 80017e4:	f001 fafe 	bl	8002de4 <HAL_GPIO_Init>

 /*Configure GPIO pin : PG6 */
 GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017e8:	2340      	movs	r3, #64	@ 0x40
 80017ea:	61fb      	str	r3, [r7, #28]
 GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ec:	2301      	movs	r3, #1
 80017ee:	623b      	str	r3, [r7, #32]
 GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f0:	2300      	movs	r3, #0
 80017f2:	627b      	str	r3, [r7, #36]	@ 0x24
 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f4:	2300      	movs	r3, #0
 80017f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017f8:	f107 031c 	add.w	r3, r7, #28
 80017fc:	4619      	mov	r1, r3
 80017fe:	4823      	ldr	r0, [pc, #140]	@ (800188c <MX_GPIO_Init+0x214>)
 8001800:	f001 faf0 	bl	8002de4 <HAL_GPIO_Init>

 /*Configure GPIO pin : USB_OverCurrent_Pin */
 GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001804:	2380      	movs	r3, #128	@ 0x80
 8001806:	61fb      	str	r3, [r7, #28]
 GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001808:	2300      	movs	r3, #0
 800180a:	623b      	str	r3, [r7, #32]
 GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	2300      	movs	r3, #0
 800180e:	627b      	str	r3, [r7, #36]	@ 0x24
 HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001810:	f107 031c 	add.w	r3, r7, #28
 8001814:	4619      	mov	r1, r3
 8001816:	481d      	ldr	r0, [pc, #116]	@ (800188c <MX_GPIO_Init+0x214>)
 8001818:	f001 fae4 	bl	8002de4 <HAL_GPIO_Init>

 /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
 GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800181c:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001820:	61fb      	str	r3, [r7, #28]
 GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001822:	2302      	movs	r3, #2
 8001824:	623b      	str	r3, [r7, #32]
 GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	2300      	movs	r3, #0
 8001828:	627b      	str	r3, [r7, #36]	@ 0x24
 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800182a:	2303      	movs	r3, #3
 800182c:	62bb      	str	r3, [r7, #40]	@ 0x28
 GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800182e:	230a      	movs	r3, #10
 8001830:	62fb      	str	r3, [r7, #44]	@ 0x2c
 HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001832:	f107 031c 	add.w	r3, r7, #28
 8001836:	4619      	mov	r1, r3
 8001838:	4816      	ldr	r0, [pc, #88]	@ (8001894 <MX_GPIO_Init+0x21c>)
 800183a:	f001 fad3 	bl	8002de4 <HAL_GPIO_Init>

 /*Configure GPIO pin : USB_VBUS_Pin */
 GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800183e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001842:	61fb      	str	r3, [r7, #28]
 GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001844:	2300      	movs	r3, #0
 8001846:	623b      	str	r3, [r7, #32]
 GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	627b      	str	r3, [r7, #36]	@ 0x24
 HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800184c:	f107 031c 	add.w	r3, r7, #28
 8001850:	4619      	mov	r1, r3
 8001852:	4810      	ldr	r0, [pc, #64]	@ (8001894 <MX_GPIO_Init+0x21c>)
 8001854:	f001 fac6 	bl	8002de4 <HAL_GPIO_Init>

 /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
 GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001858:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800185c:	61fb      	str	r3, [r7, #28]
 GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185e:	2302      	movs	r3, #2
 8001860:	623b      	str	r3, [r7, #32]
 GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001862:	2300      	movs	r3, #0
 8001864:	627b      	str	r3, [r7, #36]	@ 0x24
 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001866:	2303      	movs	r3, #3
 8001868:	62bb      	str	r3, [r7, #40]	@ 0x28
 GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800186a:	230b      	movs	r3, #11
 800186c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800186e:	f107 031c 	add.w	r3, r7, #28
 8001872:	4619      	mov	r1, r3
 8001874:	4805      	ldr	r0, [pc, #20]	@ (800188c <MX_GPIO_Init+0x214>)
 8001876:	f001 fab5 	bl	8002de4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800187a:	bf00      	nop
 800187c:	3730      	adds	r7, #48	@ 0x30
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40023800 	.word	0x40023800
 8001888:	40020400 	.word	0x40020400
 800188c:	40021800 	.word	0x40021800
 8001890:	40020800 	.word	0x40020800
 8001894:	40020000 	.word	0x40020000

08001898 <delayRead>:
static void delayRead (delay_t* delay)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
	delay->elapsedTime = HAL_GetTick() - delay->startTime;
 80018a0:	f001 f8cc 	bl	8002a3c <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	1ad2      	subs	r2, r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	605a      	str	r2, [r3, #4]
	delay->running = (delay->elapsedTime <= delay->duration);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685a      	ldr	r2, [r3, #4]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	bf94      	ite	ls
 80018bc:	2301      	movls	r3, #1
 80018be:	2300      	movhi	r3, #0
 80018c0:	b2da      	uxtb	r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	731a      	strb	r2, [r3, #12]
}
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
	...

080018d0 <buttonInit>:
/************************************
 * BUTTON GLOBAL FUNCTIONS
 ************************************/
void buttonInit ()
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
	MX_GPIO_Init();
 80018d4:	f7ff fed0 	bl	8001678 <MX_GPIO_Init>
	userButton.State = BUTTON_UP;
 80018d8:	4b07      	ldr	r3, [pc, #28]	@ (80018f8 <buttonInit+0x28>)
 80018da:	2200      	movs	r2, #0
 80018dc:	701a      	strb	r2, [r3, #0]
	userButton.isPressed = NOT_PRESSED;
 80018de:	4b06      	ldr	r3, [pc, #24]	@ (80018f8 <buttonInit+0x28>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	751a      	strb	r2, [r3, #20]
	delayInit(&userButton.debounceDelay);
 80018e4:	4805      	ldr	r0, [pc, #20]	@ (80018fc <buttonInit+0x2c>)
 80018e6:	f000 f8b3 	bl	8001a50 <delayInit>
	delayWrite(&userButton.debounceDelay, DEBOUNCE);
 80018ea:	2164      	movs	r1, #100	@ 0x64
 80018ec:	4803      	ldr	r0, [pc, #12]	@ (80018fc <buttonInit+0x2c>)
 80018ee:	f000 f8dc 	bl	8001aaa <delayWrite>
}
 80018f2:	bf00      	nop
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	20000194 	.word	0x20000194
 80018fc:	20000198 	.word	0x20000198

08001900 <buttonFSM>:

void buttonFSM()
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
	switch (userButton.State)
 8001904:	4b41      	ldr	r3, [pc, #260]	@ (8001a0c <buttonFSM+0x10c>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	2b03      	cmp	r3, #3
 800190a:	d873      	bhi.n	80019f4 <buttonFSM+0xf4>
 800190c:	a201      	add	r2, pc, #4	@ (adr r2, 8001914 <buttonFSM+0x14>)
 800190e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001912:	bf00      	nop
 8001914:	08001925 	.word	0x08001925
 8001918:	0800196d 	.word	0x0800196d
 800191c:	08001949 	.word	0x08001949
 8001920:	080019b1 	.word	0x080019b1
	{

	case BUTTON_UP:

		userButton.isPressed = NOT_PRESSED;
 8001924:	4b39      	ldr	r3, [pc, #228]	@ (8001a0c <buttonFSM+0x10c>)
 8001926:	2200      	movs	r2, #0
 8001928:	751a      	strb	r2, [r3, #20]
		if (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin))
 800192a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800192e:	4838      	ldr	r0, [pc, #224]	@ (8001a10 <buttonFSM+0x110>)
 8001930:	f001 fc04 	bl	800313c <HAL_GPIO_ReadPin>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d05f      	beq.n	80019fa <buttonFSM+0xfa>
		{
			userButton.State = BUTTON_FALLING;
 800193a:	4b34      	ldr	r3, [pc, #208]	@ (8001a0c <buttonFSM+0x10c>)
 800193c:	2201      	movs	r2, #1
 800193e:	701a      	strb	r2, [r3, #0]
			delayStart(&userButton.debounceDelay);
 8001940:	4834      	ldr	r0, [pc, #208]	@ (8001a14 <buttonFSM+0x114>)
 8001942:	f000 f89b 	bl	8001a7c <delayStart>
		}
		break;
 8001946:	e058      	b.n	80019fa <buttonFSM+0xfa>

	case BUTTON_DOWN:

		userButton.isPressed = PRESSED;
 8001948:	4b30      	ldr	r3, [pc, #192]	@ (8001a0c <buttonFSM+0x10c>)
 800194a:	2201      	movs	r2, #1
 800194c:	751a      	strb	r2, [r3, #20]
		if (!HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin))
 800194e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001952:	482f      	ldr	r0, [pc, #188]	@ (8001a10 <buttonFSM+0x110>)
 8001954:	f001 fbf2 	bl	800313c <HAL_GPIO_ReadPin>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d14f      	bne.n	80019fe <buttonFSM+0xfe>
		{
			userButton.State = BUTTON_RISING;
 800195e:	4b2b      	ldr	r3, [pc, #172]	@ (8001a0c <buttonFSM+0x10c>)
 8001960:	2203      	movs	r2, #3
 8001962:	701a      	strb	r2, [r3, #0]
			delayStart(&userButton.debounceDelay);
 8001964:	482b      	ldr	r0, [pc, #172]	@ (8001a14 <buttonFSM+0x114>)
 8001966:	f000 f889 	bl	8001a7c <delayStart>
		}
		break;
 800196a:	e048      	b.n	80019fe <buttonFSM+0xfe>

	case BUTTON_FALLING:

		if (!delayIsRunning(&userButton.debounceDelay))
 800196c:	4829      	ldr	r0, [pc, #164]	@ (8001a14 <buttonFSM+0x114>)
 800196e:	f000 f8aa 	bl	8001ac6 <delayIsRunning>
 8001972:	4603      	mov	r3, r0
 8001974:	f083 0301 	eor.w	r3, r3, #1
 8001978:	b2db      	uxtb	r3, r3
 800197a:	2b00      	cmp	r3, #0
 800197c:	d041      	beq.n	8001a02 <buttonFSM+0x102>
		{
			if (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin))
 800197e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001982:	4823      	ldr	r0, [pc, #140]	@ (8001a10 <buttonFSM+0x110>)
 8001984:	f001 fbda 	bl	800313c <HAL_GPIO_ReadPin>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d00c      	beq.n	80019a8 <buttonFSM+0xa8>
			{
				userButton.lowFlankCount++;
 800198e:	4b1f      	ldr	r3, [pc, #124]	@ (8001a0c <buttonFSM+0x10c>)
 8001990:	789b      	ldrb	r3, [r3, #2]
 8001992:	3301      	adds	r3, #1
 8001994:	b2da      	uxtb	r2, r3
 8001996:	4b1d      	ldr	r3, [pc, #116]	@ (8001a0c <buttonFSM+0x10c>)
 8001998:	709a      	strb	r2, [r3, #2]
				uartSendString((uint8_t*)"downFlank");
 800199a:	481f      	ldr	r0, [pc, #124]	@ (8001a18 <buttonFSM+0x118>)
 800199c:	f7ff fe1a 	bl	80015d4 <uartSendString>
				userButton.State = BUTTON_DOWN;
 80019a0:	4b1a      	ldr	r3, [pc, #104]	@ (8001a0c <buttonFSM+0x10c>)
 80019a2:	2202      	movs	r2, #2
 80019a4:	701a      	strb	r2, [r3, #0]
				break;
 80019a6:	e02f      	b.n	8001a08 <buttonFSM+0x108>
			} else
			{
				userButton.State = BUTTON_UP;
 80019a8:	4b18      	ldr	r3, [pc, #96]	@ (8001a0c <buttonFSM+0x10c>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	701a      	strb	r2, [r3, #0]
				break;
 80019ae:	e02b      	b.n	8001a08 <buttonFSM+0x108>
		}
		break;

	case BUTTON_RISING:

		if (!delayIsRunning(&userButton.debounceDelay))
 80019b0:	4818      	ldr	r0, [pc, #96]	@ (8001a14 <buttonFSM+0x114>)
 80019b2:	f000 f888 	bl	8001ac6 <delayIsRunning>
 80019b6:	4603      	mov	r3, r0
 80019b8:	f083 0301 	eor.w	r3, r3, #1
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d021      	beq.n	8001a06 <buttonFSM+0x106>
		{
			if (!HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin))
 80019c2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80019c6:	4812      	ldr	r0, [pc, #72]	@ (8001a10 <buttonFSM+0x110>)
 80019c8:	f001 fbb8 	bl	800313c <HAL_GPIO_ReadPin>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d10c      	bne.n	80019ec <buttonFSM+0xec>
			{
				userButton.highFlankCount++;
 80019d2:	4b0e      	ldr	r3, [pc, #56]	@ (8001a0c <buttonFSM+0x10c>)
 80019d4:	785b      	ldrb	r3, [r3, #1]
 80019d6:	3301      	adds	r3, #1
 80019d8:	b2da      	uxtb	r2, r3
 80019da:	4b0c      	ldr	r3, [pc, #48]	@ (8001a0c <buttonFSM+0x10c>)
 80019dc:	705a      	strb	r2, [r3, #1]
				uartSendString((uint8_t*)"upFlank");
 80019de:	480f      	ldr	r0, [pc, #60]	@ (8001a1c <buttonFSM+0x11c>)
 80019e0:	f7ff fdf8 	bl	80015d4 <uartSendString>
				userButton.State = BUTTON_UP;
 80019e4:	4b09      	ldr	r3, [pc, #36]	@ (8001a0c <buttonFSM+0x10c>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	701a      	strb	r2, [r3, #0]
				break;
 80019ea:	e00d      	b.n	8001a08 <buttonFSM+0x108>
			} else
			{
				userButton.State = BUTTON_DOWN;
 80019ec:	4b07      	ldr	r3, [pc, #28]	@ (8001a0c <buttonFSM+0x10c>)
 80019ee:	2202      	movs	r2, #2
 80019f0:	701a      	strb	r2, [r3, #0]
				break;
 80019f2:	e009      	b.n	8001a08 <buttonFSM+0x108>
			}
		}
		break;
	default:
		Error_Handler();
 80019f4:	f7fe fe42 	bl	800067c <Error_Handler>
	}
}
 80019f8:	e006      	b.n	8001a08 <buttonFSM+0x108>
		break;
 80019fa:	bf00      	nop
 80019fc:	e004      	b.n	8001a08 <buttonFSM+0x108>
		break;
 80019fe:	bf00      	nop
 8001a00:	e002      	b.n	8001a08 <buttonFSM+0x108>
		break;
 8001a02:	bf00      	nop
 8001a04:	e000      	b.n	8001a08 <buttonFSM+0x108>
		break;
 8001a06:	bf00      	nop
}
 8001a08:	bf00      	nop
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	20000194 	.word	0x20000194
 8001a10:	40020800 	.word	0x40020800
 8001a14:	20000198 	.word	0x20000198
 8001a18:	080069f0 	.word	0x080069f0
 8001a1c:	080069fc 	.word	0x080069fc

08001a20 <getHighFlankCount>:
bool_t readUserButton()
{
	return userButton.isPressed;
}
uint8_t getHighFlankCount ()
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
	return userButton.highFlankCount;
 8001a24:	4b03      	ldr	r3, [pc, #12]	@ (8001a34 <getHighFlankCount+0x14>)
 8001a26:	785b      	ldrb	r3, [r3, #1]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	20000194 	.word	0x20000194

08001a38 <getLowFlankCount>:
uint8_t getLowFlankCount ()
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
	return userButton.lowFlankCount;
 8001a3c:	4b03      	ldr	r3, [pc, #12]	@ (8001a4c <getLowFlankCount+0x14>)
 8001a3e:	789b      	ldrb	r3, [r3, #2]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	20000194 	.word	0x20000194

08001a50 <delayInit>:
/************************************
 * DELAY GLOBAL FUNCTIONS
 ************************************/
void delayInit (delay_t* delay)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
	delay->duration = NO_DURATION;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	609a      	str	r2, [r3, #8]
	delay->startTime = HAL_GetTick();
 8001a5e:	f000 ffed 	bl	8002a3c <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	601a      	str	r2, [r3, #0]
	delay->elapsedTime = NO_DURATION;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	605a      	str	r2, [r3, #4]
	delay->running = NOT_RUNNING;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2200      	movs	r2, #0
 8001a72:	731a      	strb	r2, [r3, #12]
}
 8001a74:	bf00      	nop
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <delayStart>:

void delayStart (delay_t* delay)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
	if (!(delay->running))
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	7b1b      	ldrb	r3, [r3, #12]
 8001a88:	f083 0301 	eor.w	r3, r3, #1
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d007      	beq.n	8001aa2 <delayStart+0x26>
	{
		delay->startTime = HAL_GetTick();
 8001a92:	f000 ffd3 	bl	8002a3c <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	601a      	str	r2, [r3, #0]
		delay->running = RUNNING;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	731a      	strb	r2, [r3, #12]
	}
}
 8001aa2:	bf00      	nop
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <delayWrite>:

void delayWrite (delay_t* delay, tick_t duration)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b083      	sub	sp, #12
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
 8001ab2:	6039      	str	r1, [r7, #0]
	delay->duration = duration;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	683a      	ldr	r2, [r7, #0]
 8001ab8:	609a      	str	r2, [r3, #8]
}
 8001aba:	bf00      	nop
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr

08001ac6 <delayIsRunning>:

bool_t delayIsRunning (delay_t* delay)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b082      	sub	sp, #8
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
	delayRead(delay);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f7ff fee2 	bl	8001898 <delayRead>
	return delay->running;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	7b1b      	ldrb	r3, [r3, #12]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3708      	adds	r7, #8
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <circularBufferInit>:
/************************************
 * BUFFER GLOBAL FUNCTIONS
 ************************************/
void circularBufferInit (circularBuffer_t *cb)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
    cb->head = 0;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	829a      	strh	r2, [r3, #20]
    cb->tail = 0;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	82da      	strh	r2, [r3, #22]
    cb->count = 0;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	831a      	strh	r2, [r3, #24]
}
 8001afa:	bf00      	nop
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <circularBufferIsFull>:
bool_t circularBufferIsFull (circularBuffer_t *cb)
{
 8001b06:	b480      	push	{r7}
 8001b08:	b083      	sub	sp, #12
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
    return cb->count == CIRCULAR_BUFFER_SIZE;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	8b1b      	ldrh	r3, [r3, #24]
 8001b12:	2b14      	cmp	r3, #20
 8001b14:	bf0c      	ite	eq
 8001b16:	2301      	moveq	r3, #1
 8001b18:	2300      	movne	r3, #0
 8001b1a:	b2db      	uxtb	r3, r3
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <circularBufferIsEmpty>:
bool_t circularBufferIsEmpty (circularBuffer_t *cb)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
    return cb->count == 0;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	8b1b      	ldrh	r3, [r3, #24]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	bf0c      	ite	eq
 8001b38:	2301      	moveq	r3, #1
 8001b3a:	2300      	movne	r3, #0
 8001b3c:	b2db      	uxtb	r3, r3
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
	...

08001b4c <circularBufferWriteByte>:
bool_t circularBufferWriteByte (circularBuffer_t *cb, uint8_t data)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	460b      	mov	r3, r1
 8001b56:	70fb      	strb	r3, [r7, #3]
    if (circularBufferIsFull(cb))
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f7ff ffd4 	bl	8001b06 <circularBufferIsFull>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <circularBufferWriteByte+0x1c>
    {
        return false;
 8001b64:	2300      	movs	r3, #0
 8001b66:	e01d      	b.n	8001ba4 <circularBufferWriteByte+0x58>
    }
    cb->buffer[cb->head] = data;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	8a9b      	ldrh	r3, [r3, #20]
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	78fa      	ldrb	r2, [r7, #3]
 8001b72:	545a      	strb	r2, [r3, r1]
    cb->head = (cb->head + 1) % CIRCULAR_BUFFER_SIZE;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	8a9b      	ldrh	r3, [r3, #20]
 8001b78:	1c5a      	adds	r2, r3, #1
 8001b7a:	4b0c      	ldr	r3, [pc, #48]	@ (8001bac <circularBufferWriteByte+0x60>)
 8001b7c:	fb83 1302 	smull	r1, r3, r3, r2
 8001b80:	10d9      	asrs	r1, r3, #3
 8001b82:	17d3      	asrs	r3, r2, #31
 8001b84:	1ac9      	subs	r1, r1, r3
 8001b86:	460b      	mov	r3, r1
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	440b      	add	r3, r1
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	1ad1      	subs	r1, r2, r3
 8001b90:	b28a      	uxth	r2, r1
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	829a      	strh	r2, [r3, #20]
    cb->count++;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	8b1b      	ldrh	r3, [r3, #24]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	b29a      	uxth	r2, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	831a      	strh	r2, [r3, #24]
    return true;
 8001ba2:	2301      	movs	r3, #1
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	66666667 	.word	0x66666667

08001bb0 <circularBufferReadByte>:
bool_t circularBufferReadByte (circularBuffer_t *cb, uint8_t *data)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
    if (circularBufferIsEmpty(cb))
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f7ff ffb4 	bl	8001b28 <circularBufferIsEmpty>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <circularBufferReadByte+0x1a>
    {
        return false;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	e01e      	b.n	8001c08 <circularBufferReadByte+0x58>
    }
    *data = cb->buffer[cb->tail];
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	8adb      	ldrh	r3, [r3, #22]
 8001bce:	461a      	mov	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	5c9a      	ldrb	r2, [r3, r2]
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	701a      	strb	r2, [r3, #0]
    cb->tail = (cb->tail + 1) % CIRCULAR_BUFFER_SIZE;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	8adb      	ldrh	r3, [r3, #22]
 8001bdc:	1c5a      	adds	r2, r3, #1
 8001bde:	4b0c      	ldr	r3, [pc, #48]	@ (8001c10 <circularBufferReadByte+0x60>)
 8001be0:	fb83 1302 	smull	r1, r3, r3, r2
 8001be4:	10d9      	asrs	r1, r3, #3
 8001be6:	17d3      	asrs	r3, r2, #31
 8001be8:	1ac9      	subs	r1, r1, r3
 8001bea:	460b      	mov	r3, r1
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	440b      	add	r3, r1
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	1ad1      	subs	r1, r2, r3
 8001bf4:	b28a      	uxth	r2, r1
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	82da      	strh	r2, [r3, #22]
    cb->count--;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	8b1b      	ldrh	r3, [r3, #24]
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	b29a      	uxth	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	831a      	strh	r2, [r3, #24]
    return true;
 8001c06:	2301      	movs	r3, #1
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	66666667 	.word	0x66666667

08001c14 <circularBufferAvailableBytes>:
uint8_t circularBufferAvailableBytes (circularBuffer_t *cb)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
    return cb->count;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	8b1b      	ldrh	r3, [r3, #24]
 8001c20:	b2db      	uxtb	r3, r3
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
	...

08001c30 <circularBufferReadAllBytes>:

bool_t circularBufferReadAllBytes (circularBuffer_t* or, uint8_t* ds)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	6039      	str	r1, [r7, #0]
	uint8_t index = 0;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	73fb      	strb	r3, [r7, #15]

	if (circularBufferAvailableBytes(or) == 0)
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f7ff ffe8 	bl	8001c14 <circularBufferAvailableBytes>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d118      	bne.n	8001c7c <circularBufferReadAllBytes+0x4c>
	{
		return false;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	e01d      	b.n	8001c8a <circularBufferReadAllBytes+0x5a>
	}

	while (0 < circularBufferAvailableBytes(or))
	{
		if (!circularBufferReadByte(or, (ds+index)))
 8001c4e:	7bfb      	ldrb	r3, [r7, #15]
 8001c50:	683a      	ldr	r2, [r7, #0]
 8001c52:	4413      	add	r3, r2
 8001c54:	4619      	mov	r1, r3
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f7ff ffaa 	bl	8001bb0 <circularBufferReadByte>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	f083 0301 	eor.w	r3, r3, #1
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d006      	beq.n	8001c76 <circularBufferReadAllBytes+0x46>
		{
			uartSendString((uint8_t)"ver bien esto");
 8001c68:	4b0a      	ldr	r3, [pc, #40]	@ (8001c94 <circularBufferReadAllBytes+0x64>)
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff fcb1 	bl	80015d4 <uartSendString>
			return false;
 8001c72:	2300      	movs	r3, #0
 8001c74:	e009      	b.n	8001c8a <circularBufferReadAllBytes+0x5a>
		}
		index++;
 8001c76:	7bfb      	ldrb	r3, [r7, #15]
 8001c78:	3301      	adds	r3, #1
 8001c7a:	73fb      	strb	r3, [r7, #15]
	while (0 < circularBufferAvailableBytes(or))
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f7ff ffc9 	bl	8001c14 <circularBufferAvailableBytes>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d1e2      	bne.n	8001c4e <circularBufferReadAllBytes+0x1e>
	}
	return true;
 8001c88:	2301      	movs	r3, #1
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3710      	adds	r7, #16
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	08006a04 	.word	0x08006a04

08001c98 <clockFSM>:

/************************************
 * GLOBAL FUNCTIONS
 ************************************/
void clockFSM ()
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
	switch (state)
 8001c9c:	4b71      	ldr	r3, [pc, #452]	@ (8001e64 <clockFSM+0x1cc>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	2b04      	cmp	r3, #4
 8001ca2:	f200 80d2 	bhi.w	8001e4a <clockFSM+0x1b2>
 8001ca6:	a201      	add	r2, pc, #4	@ (adr r2, 8001cac <clockFSM+0x14>)
 8001ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cac:	08001cc1 	.word	0x08001cc1
 8001cb0:	08001d1b 	.word	0x08001d1b
 8001cb4:	08001d61 	.word	0x08001d61
 8001cb8:	08001dab 	.word	0x08001dab
 8001cbc:	08001df5 	.word	0x08001df5

	case CLOCK_INIT:

		static dateTime_t newDateTime;

		newDateTime.seconds = rtcGetSecond();
 8001cc0:	f7ff fb34 	bl	800132c <rtcGetSecond>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	4b67      	ldr	r3, [pc, #412]	@ (8001e68 <clockFSM+0x1d0>)
 8001cca:	701a      	strb	r2, [r3, #0]
		newDateTime.minutes = rtcGetMinute();
 8001ccc:	f7ff fb22 	bl	8001314 <rtcGetMinute>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	4b64      	ldr	r3, [pc, #400]	@ (8001e68 <clockFSM+0x1d0>)
 8001cd6:	705a      	strb	r2, [r3, #1]
		newDateTime.hours = rtcGetHour();
 8001cd8:	f7ff fb10 	bl	80012fc <rtcGetHour>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	461a      	mov	r2, r3
 8001ce0:	4b61      	ldr	r3, [pc, #388]	@ (8001e68 <clockFSM+0x1d0>)
 8001ce2:	709a      	strb	r2, [r3, #2]
		newDateTime.dayOfMonth = rtcGetDate();
 8001ce4:	f7ff fae6 	bl	80012b4 <rtcGetDate>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	461a      	mov	r2, r3
 8001cec:	4b5e      	ldr	r3, [pc, #376]	@ (8001e68 <clockFSM+0x1d0>)
 8001cee:	70da      	strb	r2, [r3, #3]
		newDateTime.month = rtcGetMonth();
 8001cf0:	f7ff faec 	bl	80012cc <rtcGetMonth>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	4b5b      	ldr	r3, [pc, #364]	@ (8001e68 <clockFSM+0x1d0>)
 8001cfa:	711a      	strb	r2, [r3, #4]
		newDateTime.year = rtcGetYear();
 8001cfc:	f7ff faf2 	bl	80012e4 <rtcGetYear>
 8001d00:	4603      	mov	r3, r0
 8001d02:	461a      	mov	r2, r3
 8001d04:	4b58      	ldr	r3, [pc, #352]	@ (8001e68 <clockFSM+0x1d0>)
 8001d06:	80da      	strh	r2, [r3, #6]

		lastDateTime = newDateTime;
 8001d08:	4b58      	ldr	r3, [pc, #352]	@ (8001e6c <clockFSM+0x1d4>)
 8001d0a:	4a57      	ldr	r2, [pc, #348]	@ (8001e68 <clockFSM+0x1d0>)
 8001d0c:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d0e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		state = UPDATE_SECONDS;
 8001d12:	4b54      	ldr	r3, [pc, #336]	@ (8001e64 <clockFSM+0x1cc>)
 8001d14:	2201      	movs	r2, #1
 8001d16:	701a      	strb	r2, [r3, #0]

		break;
 8001d18:	e0a2      	b.n	8001e60 <clockFSM+0x1c8>

	case UPDATE_SECONDS:

		newDateTime.seconds = rtcGetSecond();
 8001d1a:	f7ff fb07 	bl	800132c <rtcGetSecond>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	461a      	mov	r2, r3
 8001d22:	4b51      	ldr	r3, [pc, #324]	@ (8001e68 <clockFSM+0x1d0>)
 8001d24:	701a      	strb	r2, [r3, #0]
		if ((newDateTime.seconds != lastDateTime.seconds) | (newDateTime.seconds == 0))
 8001d26:	4b50      	ldr	r3, [pc, #320]	@ (8001e68 <clockFSM+0x1d0>)
 8001d28:	781a      	ldrb	r2, [r3, #0]
 8001d2a:	4b50      	ldr	r3, [pc, #320]	@ (8001e6c <clockFSM+0x1d4>)
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	bf14      	ite	ne
 8001d32:	2301      	movne	r3, #1
 8001d34:	2300      	moveq	r3, #0
 8001d36:	b2da      	uxtb	r2, r3
 8001d38:	4b4b      	ldr	r3, [pc, #300]	@ (8001e68 <clockFSM+0x1d0>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	bf0c      	ite	eq
 8001d40:	2301      	moveq	r3, #1
 8001d42:	2300      	movne	r3, #0
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	4313      	orrs	r3, r2
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	f000 8081 	beq.w	8001e52 <clockFSM+0x1ba>
		{
			lastDateTime.seconds = newDateTime.seconds;
 8001d50:	4b45      	ldr	r3, [pc, #276]	@ (8001e68 <clockFSM+0x1d0>)
 8001d52:	781a      	ldrb	r2, [r3, #0]
 8001d54:	4b45      	ldr	r3, [pc, #276]	@ (8001e6c <clockFSM+0x1d4>)
 8001d56:	701a      	strb	r2, [r3, #0]
			state = UPDATE_MINUTES;
 8001d58:	4b42      	ldr	r3, [pc, #264]	@ (8001e64 <clockFSM+0x1cc>)
 8001d5a:	2202      	movs	r2, #2
 8001d5c:	701a      	strb	r2, [r3, #0]
		}

		break;
 8001d5e:	e078      	b.n	8001e52 <clockFSM+0x1ba>

	case UPDATE_MINUTES:

		newDateTime.minutes = rtcGetMinute();
 8001d60:	f7ff fad8 	bl	8001314 <rtcGetMinute>
 8001d64:	4603      	mov	r3, r0
 8001d66:	461a      	mov	r2, r3
 8001d68:	4b3f      	ldr	r3, [pc, #252]	@ (8001e68 <clockFSM+0x1d0>)
 8001d6a:	705a      	strb	r2, [r3, #1]
		state = UPDATE_SECONDS;
 8001d6c:	4b3d      	ldr	r3, [pc, #244]	@ (8001e64 <clockFSM+0x1cc>)
 8001d6e:	2201      	movs	r2, #1
 8001d70:	701a      	strb	r2, [r3, #0]
		if ((newDateTime.minutes != lastDateTime.minutes) | (newDateTime.minutes == 0))
 8001d72:	4b3d      	ldr	r3, [pc, #244]	@ (8001e68 <clockFSM+0x1d0>)
 8001d74:	785a      	ldrb	r2, [r3, #1]
 8001d76:	4b3d      	ldr	r3, [pc, #244]	@ (8001e6c <clockFSM+0x1d4>)
 8001d78:	785b      	ldrb	r3, [r3, #1]
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	bf14      	ite	ne
 8001d7e:	2301      	movne	r3, #1
 8001d80:	2300      	moveq	r3, #0
 8001d82:	b2da      	uxtb	r2, r3
 8001d84:	4b38      	ldr	r3, [pc, #224]	@ (8001e68 <clockFSM+0x1d0>)
 8001d86:	785b      	ldrb	r3, [r3, #1]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	bf0c      	ite	eq
 8001d8c:	2301      	moveq	r3, #1
 8001d8e:	2300      	movne	r3, #0
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	4313      	orrs	r3, r2
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d05d      	beq.n	8001e56 <clockFSM+0x1be>
		{
			lastDateTime.minutes = newDateTime.minutes;
 8001d9a:	4b33      	ldr	r3, [pc, #204]	@ (8001e68 <clockFSM+0x1d0>)
 8001d9c:	785a      	ldrb	r2, [r3, #1]
 8001d9e:	4b33      	ldr	r3, [pc, #204]	@ (8001e6c <clockFSM+0x1d4>)
 8001da0:	705a      	strb	r2, [r3, #1]
			state = UPDATE_HOURS;
 8001da2:	4b30      	ldr	r3, [pc, #192]	@ (8001e64 <clockFSM+0x1cc>)
 8001da4:	2203      	movs	r2, #3
 8001da6:	701a      	strb	r2, [r3, #0]
		}

		break;
 8001da8:	e055      	b.n	8001e56 <clockFSM+0x1be>

	case UPDATE_HOURS:

		newDateTime.hours = rtcGetHour();
 8001daa:	f7ff faa7 	bl	80012fc <rtcGetHour>
 8001dae:	4603      	mov	r3, r0
 8001db0:	461a      	mov	r2, r3
 8001db2:	4b2d      	ldr	r3, [pc, #180]	@ (8001e68 <clockFSM+0x1d0>)
 8001db4:	709a      	strb	r2, [r3, #2]
		state = UPDATE_SECONDS;
 8001db6:	4b2b      	ldr	r3, [pc, #172]	@ (8001e64 <clockFSM+0x1cc>)
 8001db8:	2201      	movs	r2, #1
 8001dba:	701a      	strb	r2, [r3, #0]
		if ((newDateTime.hours != lastDateTime.hours) | (newDateTime.hours == 0))
 8001dbc:	4b2a      	ldr	r3, [pc, #168]	@ (8001e68 <clockFSM+0x1d0>)
 8001dbe:	789a      	ldrb	r2, [r3, #2]
 8001dc0:	4b2a      	ldr	r3, [pc, #168]	@ (8001e6c <clockFSM+0x1d4>)
 8001dc2:	789b      	ldrb	r3, [r3, #2]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	bf14      	ite	ne
 8001dc8:	2301      	movne	r3, #1
 8001dca:	2300      	moveq	r3, #0
 8001dcc:	b2da      	uxtb	r2, r3
 8001dce:	4b26      	ldr	r3, [pc, #152]	@ (8001e68 <clockFSM+0x1d0>)
 8001dd0:	789b      	ldrb	r3, [r3, #2]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	bf0c      	ite	eq
 8001dd6:	2301      	moveq	r3, #1
 8001dd8:	2300      	movne	r3, #0
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d03a      	beq.n	8001e5a <clockFSM+0x1c2>
		{
			lastDateTime.hours = newDateTime.hours;
 8001de4:	4b20      	ldr	r3, [pc, #128]	@ (8001e68 <clockFSM+0x1d0>)
 8001de6:	789a      	ldrb	r2, [r3, #2]
 8001de8:	4b20      	ldr	r3, [pc, #128]	@ (8001e6c <clockFSM+0x1d4>)
 8001dea:	709a      	strb	r2, [r3, #2]
			state = UPDATE_DATE;
 8001dec:	4b1d      	ldr	r3, [pc, #116]	@ (8001e64 <clockFSM+0x1cc>)
 8001dee:	2204      	movs	r2, #4
 8001df0:	701a      	strb	r2, [r3, #0]
		}

		break;
 8001df2:	e032      	b.n	8001e5a <clockFSM+0x1c2>

	case UPDATE_DATE:

		newDateTime.dayOfMonth = rtcGetDate();
 8001df4:	f7ff fa5e 	bl	80012b4 <rtcGetDate>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	4b1a      	ldr	r3, [pc, #104]	@ (8001e68 <clockFSM+0x1d0>)
 8001dfe:	70da      	strb	r2, [r3, #3]
		newDateTime.month = rtcGetMonth();
 8001e00:	f7ff fa64 	bl	80012cc <rtcGetMonth>
 8001e04:	4603      	mov	r3, r0
 8001e06:	461a      	mov	r2, r3
 8001e08:	4b17      	ldr	r3, [pc, #92]	@ (8001e68 <clockFSM+0x1d0>)
 8001e0a:	711a      	strb	r2, [r3, #4]
		newDateTime.year = rtcGetYear();
 8001e0c:	f7ff fa6a 	bl	80012e4 <rtcGetYear>
 8001e10:	4603      	mov	r3, r0
 8001e12:	461a      	mov	r2, r3
 8001e14:	4b14      	ldr	r3, [pc, #80]	@ (8001e68 <clockFSM+0x1d0>)
 8001e16:	80da      	strh	r2, [r3, #6]
		state = UPDATE_SECONDS;
 8001e18:	4b12      	ldr	r3, [pc, #72]	@ (8001e64 <clockFSM+0x1cc>)
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	701a      	strb	r2, [r3, #0]
		if (newDateTime.dayOfMonth != lastDateTime.month)
 8001e1e:	4b12      	ldr	r3, [pc, #72]	@ (8001e68 <clockFSM+0x1d0>)
 8001e20:	78da      	ldrb	r2, [r3, #3]
 8001e22:	4b12      	ldr	r3, [pc, #72]	@ (8001e6c <clockFSM+0x1d4>)
 8001e24:	791b      	ldrb	r3, [r3, #4]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d019      	beq.n	8001e5e <clockFSM+0x1c6>
		{
			lastDateTime.dayOfMonth = newDateTime.dayOfMonth;
 8001e2a:	4b0f      	ldr	r3, [pc, #60]	@ (8001e68 <clockFSM+0x1d0>)
 8001e2c:	78da      	ldrb	r2, [r3, #3]
 8001e2e:	4b0f      	ldr	r3, [pc, #60]	@ (8001e6c <clockFSM+0x1d4>)
 8001e30:	70da      	strb	r2, [r3, #3]
			lastDateTime.month = newDateTime.month;
 8001e32:	4b0d      	ldr	r3, [pc, #52]	@ (8001e68 <clockFSM+0x1d0>)
 8001e34:	791a      	ldrb	r2, [r3, #4]
 8001e36:	4b0d      	ldr	r3, [pc, #52]	@ (8001e6c <clockFSM+0x1d4>)
 8001e38:	711a      	strb	r2, [r3, #4]
			lastDateTime.year = newDateTime.year;
 8001e3a:	4b0b      	ldr	r3, [pc, #44]	@ (8001e68 <clockFSM+0x1d0>)
 8001e3c:	88da      	ldrh	r2, [r3, #6]
 8001e3e:	4b0b      	ldr	r3, [pc, #44]	@ (8001e6c <clockFSM+0x1d4>)
 8001e40:	80da      	strh	r2, [r3, #6]
			state = UPDATE_SECONDS;
 8001e42:	4b08      	ldr	r3, [pc, #32]	@ (8001e64 <clockFSM+0x1cc>)
 8001e44:	2201      	movs	r2, #1
 8001e46:	701a      	strb	r2, [r3, #0]
		}

		break;
 8001e48:	e009      	b.n	8001e5e <clockFSM+0x1c6>

	default:
		uartSendString("error clockfsm");
 8001e4a:	4809      	ldr	r0, [pc, #36]	@ (8001e70 <clockFSM+0x1d8>)
 8001e4c:	f7ff fbc2 	bl	80015d4 <uartSendString>
		break;
 8001e50:	e006      	b.n	8001e60 <clockFSM+0x1c8>
		break;
 8001e52:	bf00      	nop
 8001e54:	e004      	b.n	8001e60 <clockFSM+0x1c8>
		break;
 8001e56:	bf00      	nop
 8001e58:	e002      	b.n	8001e60 <clockFSM+0x1c8>
		break;
 8001e5a:	bf00      	nop
 8001e5c:	e000      	b.n	8001e60 <clockFSM+0x1c8>
		break;
 8001e5e:	bf00      	nop

	}
}
 8001e60:	bf00      	nop
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	200001ac 	.word	0x200001ac
 8001e68:	200001bc 	.word	0x200001bc
 8001e6c:	200001b0 	.word	0x200001b0
 8001e70:	08006a14 	.word	0x08006a14

08001e74 <clockReset>:

void clockReset ()
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
	state = CLOCK_INIT;
 8001e78:	4b03      	ldr	r3, [pc, #12]	@ (8001e88 <clockReset+0x14>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	701a      	strb	r2, [r3, #0]
}
 8001e7e:	bf00      	nop
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	200001ac 	.word	0x200001ac

08001e8c <clockGetSeconds>:

uint8_t clockGetSeconds ()
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
	return lastDateTime.seconds;
 8001e90:	4b03      	ldr	r3, [pc, #12]	@ (8001ea0 <clockGetSeconds+0x14>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	200001b0 	.word	0x200001b0

08001ea4 <clockGetMinutes>:

uint8_t clockGetMinutes ()
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
	return lastDateTime.minutes;
 8001ea8:	4b03      	ldr	r3, [pc, #12]	@ (8001eb8 <clockGetMinutes+0x14>)
 8001eaa:	785b      	ldrb	r3, [r3, #1]
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	200001b0 	.word	0x200001b0

08001ebc <clockGetHours>:

uint8_t clockGetHours ()
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
	return lastDateTime.hours;
 8001ec0:	4b03      	ldr	r3, [pc, #12]	@ (8001ed0 <clockGetHours+0x14>)
 8001ec2:	789b      	ldrb	r3, [r3, #2]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	200001b0 	.word	0x200001b0

08001ed4 <clockGetDate>:

uint8_t clockGetDate ()
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
	return lastDateTime.dayOfMonth;
 8001ed8:	4b03      	ldr	r3, [pc, #12]	@ (8001ee8 <clockGetDate+0x14>)
 8001eda:	78db      	ldrb	r3, [r3, #3]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	200001b0 	.word	0x200001b0

08001eec <clockGetMonth>:

uint8_t clockGetMonth ()
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
	return lastDateTime.month;
 8001ef0:	4b03      	ldr	r3, [pc, #12]	@ (8001f00 <clockGetMonth+0x14>)
 8001ef2:	791b      	ldrb	r3, [r3, #4]
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	200001b0 	.word	0x200001b0

08001f04 <clockGetYear>:

uint16_t clockGetYear ()
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
	return lastDateTime.year;
 8001f08:	4b03      	ldr	r3, [pc, #12]	@ (8001f18 <clockGetYear+0x14>)
 8001f0a:	88db      	ldrh	r3, [r3, #6]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	200001b0 	.word	0x200001b0

08001f1c <inputFunction>:

/************************************
 * STATIC FUNCTION PROTOTYPES
 ************************************/
static void inputFunction (displayState_t state)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af02      	add	r7, sp, #8
 8001f22:	4603      	mov	r3, r0
 8001f24:	71fb      	strb	r3, [r7, #7]
	static uint8_t userBuffer[COLS];
	static uint8_t option;
	static uint8_t day, month, seconds, minutes, hours;
	static uint16_t year;

	switch (state)
 8001f26:	79fb      	ldrb	r3, [r7, #7]
 8001f28:	3b01      	subs	r3, #1
 8001f2a:	2b05      	cmp	r3, #5
 8001f2c:	f200 810f 	bhi.w	800214e <inputFunction+0x232>
 8001f30:	a201      	add	r2, pc, #4	@ (adr r2, 8001f38 <inputFunction+0x1c>)
 8001f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f36:	bf00      	nop
 8001f38:	08001f51 	.word	0x08001f51
 8001f3c:	08001fad 	.word	0x08001fad
 8001f40:	08002065 	.word	0x08002065
 8001f44:	080020db 	.word	0x080020db
 8001f48:	0800214f 	.word	0x0800214f
 8001f4c:	0800214f 	.word	0x0800214f
	{
	case DISPLAY_DATA:
		if (circularBufferAvailableBytes(&uartUserBuffer))
 8001f50:	4885      	ldr	r0, [pc, #532]	@ (8002168 <inputFunction+0x24c>)
 8001f52:	f7ff fe5f 	bl	8001c14 <circularBufferAvailableBytes>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	f000 80fa 	beq.w	8002152 <inputFunction+0x236>
		{
			if (circularBufferReadAllBytes(&uartUserBuffer, userBuffer))
 8001f5e:	4983      	ldr	r1, [pc, #524]	@ (800216c <inputFunction+0x250>)
 8001f60:	4881      	ldr	r0, [pc, #516]	@ (8002168 <inputFunction+0x24c>)
 8001f62:	f7ff fe65 	bl	8001c30 <circularBufferReadAllBytes>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	f000 80f2 	beq.w	8002152 <inputFunction+0x236>
			{
				if (sscanf(userBuffer,"%c",&option))
 8001f6e:	4a80      	ldr	r2, [pc, #512]	@ (8002170 <inputFunction+0x254>)
 8001f70:	4980      	ldr	r1, [pc, #512]	@ (8002174 <inputFunction+0x258>)
 8001f72:	487e      	ldr	r0, [pc, #504]	@ (800216c <inputFunction+0x250>)
 8001f74:	f003 fe78 	bl	8005c68 <siscanf>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f000 80e9 	beq.w	8002152 <inputFunction+0x236>
				{
					switch (option)
 8001f80:	4b7b      	ldr	r3, [pc, #492]	@ (8002170 <inputFunction+0x254>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d00f      	beq.n	8001fa8 <inputFunction+0x8c>
 8001f88:	2b78      	cmp	r3, #120	@ 0x78
 8001f8a:	d106      	bne.n	8001f9a <inputFunction+0x7e>
					{
					case 0:
						break;
					case 'x':
						displayState = DISPLAY_CONFIG;
 8001f8c:	4b7a      	ldr	r3, [pc, #488]	@ (8002178 <inputFunction+0x25c>)
 8001f8e:	2202      	movs	r2, #2
 8001f90:	701a      	strb	r2, [r3, #0]
						option = 0;
 8001f92:	4b77      	ldr	r3, [pc, #476]	@ (8002170 <inputFunction+0x254>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	701a      	strb	r2, [r3, #0]
						break;
 8001f98:	e007      	b.n	8001faa <inputFunction+0x8e>
					default:
						uartSendString((uint8_t*)"msj no reconocido");
 8001f9a:	4878      	ldr	r0, [pc, #480]	@ (800217c <inputFunction+0x260>)
 8001f9c:	f7ff fb1a 	bl	80015d4 <uartSendString>
						option = 0;
 8001fa0:	4b73      	ldr	r3, [pc, #460]	@ (8002170 <inputFunction+0x254>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	701a      	strb	r2, [r3, #0]
						break;
 8001fa6:	e000      	b.n	8001faa <inputFunction+0x8e>
						break;
 8001fa8:	bf00      	nop
					}
				}
			}

		}
		break;
 8001faa:	e0d2      	b.n	8002152 <inputFunction+0x236>

	case DISPLAY_CONFIG:
		if (circularBufferAvailableBytes(&uartUserBuffer))
 8001fac:	486e      	ldr	r0, [pc, #440]	@ (8002168 <inputFunction+0x24c>)
 8001fae:	f7ff fe31 	bl	8001c14 <circularBufferAvailableBytes>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	f000 80ce 	beq.w	8002156 <inputFunction+0x23a>
		{
			if (circularBufferReadAllBytes(&uartUserBuffer, userBuffer))
 8001fba:	496c      	ldr	r1, [pc, #432]	@ (800216c <inputFunction+0x250>)
 8001fbc:	486a      	ldr	r0, [pc, #424]	@ (8002168 <inputFunction+0x24c>)
 8001fbe:	f7ff fe37 	bl	8001c30 <circularBufferReadAllBytes>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	f000 80c6 	beq.w	8002156 <inputFunction+0x23a>
			{
				if (sscanf(userBuffer, "%u", &option))
 8001fca:	4a69      	ldr	r2, [pc, #420]	@ (8002170 <inputFunction+0x254>)
 8001fcc:	496c      	ldr	r1, [pc, #432]	@ (8002180 <inputFunction+0x264>)
 8001fce:	4867      	ldr	r0, [pc, #412]	@ (800216c <inputFunction+0x250>)
 8001fd0:	f003 fe4a 	bl	8005c68 <siscanf>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	f000 80bd 	beq.w	8002156 <inputFunction+0x23a>
				{
					switch (option)
 8001fdc:	4b64      	ldr	r3, [pc, #400]	@ (8002170 <inputFunction+0x254>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	2b04      	cmp	r3, #4
 8001fe2:	d831      	bhi.n	8002048 <inputFunction+0x12c>
 8001fe4:	a201      	add	r2, pc, #4	@ (adr r2, 8001fec <inputFunction+0xd0>)
 8001fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fea:	bf00      	nop
 8001fec:	08002061 	.word	0x08002061
 8001ff0:	08002001 	.word	0x08002001
 8001ff4:	08002013 	.word	0x08002013
 8001ff8:	08002025 	.word	0x08002025
 8001ffc:	08002037 	.word	0x08002037
					{
					case 0:
						break;
					case 1:
						displayState = DISPLAY_SET_DATE;
 8002000:	4b5d      	ldr	r3, [pc, #372]	@ (8002178 <inputFunction+0x25c>)
 8002002:	2203      	movs	r2, #3
 8002004:	701a      	strb	r2, [r3, #0]
						lcdClear();
 8002006:	f7fe fea9 	bl	8000d5c <lcdClear>
						option = 0;
 800200a:	4b59      	ldr	r3, [pc, #356]	@ (8002170 <inputFunction+0x254>)
 800200c:	2200      	movs	r2, #0
 800200e:	701a      	strb	r2, [r3, #0]
						break;
 8002010:	e027      	b.n	8002062 <inputFunction+0x146>
					case 2:
						displayState = DISPLAY_SET_TIME;
 8002012:	4b59      	ldr	r3, [pc, #356]	@ (8002178 <inputFunction+0x25c>)
 8002014:	2204      	movs	r2, #4
 8002016:	701a      	strb	r2, [r3, #0]
						lcdClear();
 8002018:	f7fe fea0 	bl	8000d5c <lcdClear>
						option = 0;
 800201c:	4b54      	ldr	r3, [pc, #336]	@ (8002170 <inputFunction+0x254>)
 800201e:	2200      	movs	r2, #0
 8002020:	701a      	strb	r2, [r3, #0]
						break;
 8002022:	e01e      	b.n	8002062 <inputFunction+0x146>
					case 3:
						displayState = DISPLAY_RESET_COUNT;
 8002024:	4b54      	ldr	r3, [pc, #336]	@ (8002178 <inputFunction+0x25c>)
 8002026:	2205      	movs	r2, #5
 8002028:	701a      	strb	r2, [r3, #0]
						lcdClear();
 800202a:	f7fe fe97 	bl	8000d5c <lcdClear>
						option = 0;
 800202e:	4b50      	ldr	r3, [pc, #320]	@ (8002170 <inputFunction+0x254>)
 8002030:	2200      	movs	r2, #0
 8002032:	701a      	strb	r2, [r3, #0]
						break;
 8002034:	e015      	b.n	8002062 <inputFunction+0x146>
					case 4:
						displayState = DISPLAY_SET_CUSTOM_STRING_INPUT;
 8002036:	4b50      	ldr	r3, [pc, #320]	@ (8002178 <inputFunction+0x25c>)
 8002038:	2206      	movs	r2, #6
 800203a:	701a      	strb	r2, [r3, #0]
						lcdClear();
 800203c:	f7fe fe8e 	bl	8000d5c <lcdClear>
						option = 0;
 8002040:	4b4b      	ldr	r3, [pc, #300]	@ (8002170 <inputFunction+0x254>)
 8002042:	2200      	movs	r2, #0
 8002044:	701a      	strb	r2, [r3, #0]
						break;
 8002046:	e00c      	b.n	8002062 <inputFunction+0x146>
					default:
						displayState = DISPLAY_DATA;
 8002048:	4b4b      	ldr	r3, [pc, #300]	@ (8002178 <inputFunction+0x25c>)
 800204a:	2201      	movs	r2, #1
 800204c:	701a      	strb	r2, [r3, #0]
						lcdClear();
 800204e:	f7fe fe85 	bl	8000d5c <lcdClear>
						option = 0;
 8002052:	4b47      	ldr	r3, [pc, #284]	@ (8002170 <inputFunction+0x254>)
 8002054:	2200      	movs	r2, #0
 8002056:	701a      	strb	r2, [r3, #0]
						uartSendString((uint8_t*)"seleccion erronea, retorno a data");
 8002058:	484a      	ldr	r0, [pc, #296]	@ (8002184 <inputFunction+0x268>)
 800205a:	f7ff fabb 	bl	80015d4 <uartSendString>
						break;
 800205e:	e000      	b.n	8002062 <inputFunction+0x146>
						break;
 8002060:	bf00      	nop
					}
				}
			}
		}
		break;
 8002062:	e078      	b.n	8002156 <inputFunction+0x23a>

	case DISPLAY_SET_DATE:
		if (circularBufferAvailableBytes(&uartUserBuffer)>=6)
 8002064:	4840      	ldr	r0, [pc, #256]	@ (8002168 <inputFunction+0x24c>)
 8002066:	f7ff fdd5 	bl	8001c14 <circularBufferAvailableBytes>
 800206a:	4603      	mov	r3, r0
 800206c:	2b05      	cmp	r3, #5
 800206e:	d974      	bls.n	800215a <inputFunction+0x23e>
		{
			if (circularBufferReadAllBytes(&uartUserBuffer, userBuffer))
 8002070:	493e      	ldr	r1, [pc, #248]	@ (800216c <inputFunction+0x250>)
 8002072:	483d      	ldr	r0, [pc, #244]	@ (8002168 <inputFunction+0x24c>)
 8002074:	f7ff fddc 	bl	8001c30 <circularBufferReadAllBytes>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d06d      	beq.n	800215a <inputFunction+0x23e>
			{
				if (sscanf(&userBuffer, "%2d%2d%2d", &day, &month, &year)<3)
 800207e:	4b42      	ldr	r3, [pc, #264]	@ (8002188 <inputFunction+0x26c>)
 8002080:	9300      	str	r3, [sp, #0]
 8002082:	4b42      	ldr	r3, [pc, #264]	@ (800218c <inputFunction+0x270>)
 8002084:	4a42      	ldr	r2, [pc, #264]	@ (8002190 <inputFunction+0x274>)
 8002086:	4943      	ldr	r1, [pc, #268]	@ (8002194 <inputFunction+0x278>)
 8002088:	4838      	ldr	r0, [pc, #224]	@ (800216c <inputFunction+0x250>)
 800208a:	f003 fded 	bl	8005c68 <siscanf>
 800208e:	4603      	mov	r3, r0
 8002090:	2b02      	cmp	r3, #2
 8002092:	dc09      	bgt.n	80020a8 <inputFunction+0x18c>
				{
					day = 16;
 8002094:	4b3e      	ldr	r3, [pc, #248]	@ (8002190 <inputFunction+0x274>)
 8002096:	2210      	movs	r2, #16
 8002098:	701a      	strb	r2, [r3, #0]
					month = 11;
 800209a:	4b3c      	ldr	r3, [pc, #240]	@ (800218c <inputFunction+0x270>)
 800209c:	220b      	movs	r2, #11
 800209e:	701a      	strb	r2, [r3, #0]
					year = 2005;
 80020a0:	4b39      	ldr	r3, [pc, #228]	@ (8002188 <inputFunction+0x26c>)
 80020a2:	f240 72d5 	movw	r2, #2005	@ 0x7d5
 80020a6:	801a      	strh	r2, [r3, #0]
				}
				rtcSetDate(day);
 80020a8:	4b39      	ldr	r3, [pc, #228]	@ (8002190 <inputFunction+0x274>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7ff f949 	bl	8001344 <rtcSetDate>
				rtcSetMonth(month);
 80020b2:	4b36      	ldr	r3, [pc, #216]	@ (800218c <inputFunction+0x270>)
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff f96c 	bl	8001394 <rtcSetMonth>
				rtcSetYear(year);
 80020bc:	4b32      	ldr	r3, [pc, #200]	@ (8002188 <inputFunction+0x26c>)
 80020be:	881b      	ldrh	r3, [r3, #0]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff f98f 	bl	80013e4 <rtcSetYear>
				clockReset();
 80020c6:	f7ff fed5 	bl	8001e74 <clockReset>
				lcdClear();
 80020ca:	f7fe fe47 	bl	8000d5c <lcdClear>
				lcdHome();
 80020ce:	f7fe fe4f 	bl	8000d70 <lcdHome>
				displayState = DISPLAY_DATA;
 80020d2:	4b29      	ldr	r3, [pc, #164]	@ (8002178 <inputFunction+0x25c>)
 80020d4:	2201      	movs	r2, #1
 80020d6:	701a      	strb	r2, [r3, #0]
			}

		}
		break;
 80020d8:	e03f      	b.n	800215a <inputFunction+0x23e>

	case DISPLAY_SET_TIME:
		if (circularBufferAvailableBytes(&uartUserBuffer)>=6)
 80020da:	4823      	ldr	r0, [pc, #140]	@ (8002168 <inputFunction+0x24c>)
 80020dc:	f7ff fd9a 	bl	8001c14 <circularBufferAvailableBytes>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b05      	cmp	r3, #5
 80020e4:	d93b      	bls.n	800215e <inputFunction+0x242>
		{
			if (circularBufferReadAllBytes(&uartUserBuffer, userBuffer))
 80020e6:	4921      	ldr	r1, [pc, #132]	@ (800216c <inputFunction+0x250>)
 80020e8:	481f      	ldr	r0, [pc, #124]	@ (8002168 <inputFunction+0x24c>)
 80020ea:	f7ff fda1 	bl	8001c30 <circularBufferReadAllBytes>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d034      	beq.n	800215e <inputFunction+0x242>
			{
				if (sscanf(&userBuffer, "%2d%2d%2d", &hours, &minutes, &seconds)<3)
 80020f4:	4b28      	ldr	r3, [pc, #160]	@ (8002198 <inputFunction+0x27c>)
 80020f6:	9300      	str	r3, [sp, #0]
 80020f8:	4b28      	ldr	r3, [pc, #160]	@ (800219c <inputFunction+0x280>)
 80020fa:	4a29      	ldr	r2, [pc, #164]	@ (80021a0 <inputFunction+0x284>)
 80020fc:	4925      	ldr	r1, [pc, #148]	@ (8002194 <inputFunction+0x278>)
 80020fe:	481b      	ldr	r0, [pc, #108]	@ (800216c <inputFunction+0x250>)
 8002100:	f003 fdb2 	bl	8005c68 <siscanf>
 8002104:	4603      	mov	r3, r0
 8002106:	2b02      	cmp	r3, #2
 8002108:	dc08      	bgt.n	800211c <inputFunction+0x200>
				{
					hours = 16;
 800210a:	4b25      	ldr	r3, [pc, #148]	@ (80021a0 <inputFunction+0x284>)
 800210c:	2210      	movs	r2, #16
 800210e:	701a      	strb	r2, [r3, #0]
					minutes = 11;
 8002110:	4b22      	ldr	r3, [pc, #136]	@ (800219c <inputFunction+0x280>)
 8002112:	220b      	movs	r2, #11
 8002114:	701a      	strb	r2, [r3, #0]
					seconds = 05;
 8002116:	4b20      	ldr	r3, [pc, #128]	@ (8002198 <inputFunction+0x27c>)
 8002118:	2205      	movs	r2, #5
 800211a:	701a      	strb	r2, [r3, #0]
				}
				rtcSetHour(hours);
 800211c:	4b20      	ldr	r3, [pc, #128]	@ (80021a0 <inputFunction+0x284>)
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff f97b 	bl	800141c <rtcSetHour>
				rtcSetMinute(minutes);
 8002126:	4b1d      	ldr	r3, [pc, #116]	@ (800219c <inputFunction+0x280>)
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	4618      	mov	r0, r3
 800212c:	f7ff f990 	bl	8001450 <rtcSetMinute>
				rtcSetSecond(seconds);
 8002130:	4b19      	ldr	r3, [pc, #100]	@ (8002198 <inputFunction+0x27c>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	4618      	mov	r0, r3
 8002136:	f7ff f9a5 	bl	8001484 <rtcSetSecond>
				clockReset();
 800213a:	f7ff fe9b 	bl	8001e74 <clockReset>
				lcdClear();
 800213e:	f7fe fe0d 	bl	8000d5c <lcdClear>
				lcdHome();
 8002142:	f7fe fe15 	bl	8000d70 <lcdHome>
				displayState = DISPLAY_DATA;
 8002146:	4b0c      	ldr	r3, [pc, #48]	@ (8002178 <inputFunction+0x25c>)
 8002148:	2201      	movs	r2, #1
 800214a:	701a      	strb	r2, [r3, #0]
			}

		}
		break;
 800214c:	e007      	b.n	800215e <inputFunction+0x242>
	case DISPLAY_RESET_COUNT:
		break;
	case DISPLAY_SET_CUSTOM_STRING_INPUT:
		break;
	default:
		break;
 800214e:	bf00      	nop
 8002150:	e006      	b.n	8002160 <inputFunction+0x244>
		break;
 8002152:	bf00      	nop
 8002154:	e004      	b.n	8002160 <inputFunction+0x244>
		break;
 8002156:	bf00      	nop
 8002158:	e002      	b.n	8002160 <inputFunction+0x244>
		break;
 800215a:	bf00      	nop
 800215c:	e000      	b.n	8002160 <inputFunction+0x244>
		break;
 800215e:	bf00      	nop

	}
}
 8002160:	bf00      	nop
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	20000130 	.word	0x20000130
 800216c:	200001cc 	.word	0x200001cc
 8002170:	200001e0 	.word	0x200001e0
 8002174:	08006a24 	.word	0x08006a24
 8002178:	200001c8 	.word	0x200001c8
 800217c:	08006a28 	.word	0x08006a28
 8002180:	08006a3c 	.word	0x08006a3c
 8002184:	08006a40 	.word	0x08006a40
 8002188:	200001e4 	.word	0x200001e4
 800218c:	200001e2 	.word	0x200001e2
 8002190:	200001e1 	.word	0x200001e1
 8002194:	08006a64 	.word	0x08006a64
 8002198:	200001e8 	.word	0x200001e8
 800219c:	200001e7 	.word	0x200001e7
 80021a0:	200001e6 	.word	0x200001e6

080021a4 <displayFunction>:

static void displayFunction (displayState_t state)
{
 80021a4:	b5b0      	push	{r4, r5, r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	4603      	mov	r3, r0
 80021ac:	71fb      	strb	r3, [r7, #7]
	static uint8_t row = 0;
	switch (state)
 80021ae:	79fb      	ldrb	r3, [r7, #7]
 80021b0:	2b06      	cmp	r3, #6
 80021b2:	f200 835e 	bhi.w	8002872 <displayFunction+0x6ce>
 80021b6:	a201      	add	r2, pc, #4	@ (adr r2, 80021bc <displayFunction+0x18>)
 80021b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021bc:	080021d9 	.word	0x080021d9
 80021c0:	080021f7 	.word	0x080021f7
 80021c4:	0800232d 	.word	0x0800232d
 80021c8:	08002427 	.word	0x08002427
 80021cc:	0800255f 	.word	0x0800255f
 80021d0:	08002657 	.word	0x08002657
 80021d4:	0800274f 	.word	0x0800274f
	{
	case DISPLAY_INIT:
		lcdClear();
 80021d8:	f7fe fdc0 	bl	8000d5c <lcdClear>
		lcdHome();
 80021dc:	f7fe fdc8 	bl	8000d70 <lcdHome>
		lcdPrintfCenteredString((uint8_t*)"holis", ' ', 0, (uint8_t*)" ");
 80021e0:	4bb3      	ldr	r3, [pc, #716]	@ (80024b0 <displayFunction+0x30c>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	2120      	movs	r1, #32
 80021e6:	48b3      	ldr	r0, [pc, #716]	@ (80024b4 <displayFunction+0x310>)
 80021e8:	f7fe fe90 	bl	8000f0c <lcdPrintfCenteredString>
		HAL_Delay(1000);
 80021ec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80021f0:	f000 fc30 	bl	8002a54 <HAL_Delay>
		break;
 80021f4:	e33d      	b.n	8002872 <displayFunction+0x6ce>

	case DISPLAY_DATA:
		switch (row)
 80021f6:	4bb0      	ldr	r3, [pc, #704]	@ (80024b8 <displayFunction+0x314>)
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	2b03      	cmp	r3, #3
 80021fc:	f200 8091 	bhi.w	8002322 <displayFunction+0x17e>
 8002200:	a201      	add	r2, pc, #4	@ (adr r2, 8002208 <displayFunction+0x64>)
 8002202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002206:	bf00      	nop
 8002208:	080022ef 	.word	0x080022ef
 800220c:	080022a5 	.word	0x080022a5
 8002210:	0800225b 	.word	0x0800225b
 8002214:	08002219 	.word	0x08002219
		{
		case 3:
			lcdSetCursor(row, 0);
 8002218:	4ba7      	ldr	r3, [pc, #668]	@ (80024b8 <displayFunction+0x314>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	2100      	movs	r1, #0
 800221e:	4618      	mov	r0, r3
 8002220:	f7fe fdb0 	bl	8000d84 <lcdSetCursor>
			lcdPrintfTwoInts((uint8_t*)"%d %d", getHighFlankCount(), getLowFlankCount());
 8002224:	f7ff fbfc 	bl	8001a20 <getHighFlankCount>
 8002228:	4603      	mov	r3, r0
 800222a:	b21c      	sxth	r4, r3
 800222c:	f7ff fc04 	bl	8001a38 <getLowFlankCount>
 8002230:	4603      	mov	r3, r0
 8002232:	b21b      	sxth	r3, r3
 8002234:	461a      	mov	r2, r3
 8002236:	4621      	mov	r1, r4
 8002238:	48a0      	ldr	r0, [pc, #640]	@ (80024bc <displayFunction+0x318>)
 800223a:	f7fe febb 	bl	8000fb4 <lcdPrintfTwoInts>
			row = (row+1)%ROWS;
 800223e:	4b9e      	ldr	r3, [pc, #632]	@ (80024b8 <displayFunction+0x314>)
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	3301      	adds	r3, #1
 8002244:	425a      	negs	r2, r3
 8002246:	f003 0303 	and.w	r3, r3, #3
 800224a:	f002 0203 	and.w	r2, r2, #3
 800224e:	bf58      	it	pl
 8002250:	4253      	negpl	r3, r2
 8002252:	b2da      	uxtb	r2, r3
 8002254:	4b98      	ldr	r3, [pc, #608]	@ (80024b8 <displayFunction+0x314>)
 8002256:	701a      	strb	r2, [r3, #0]
			break;
 8002258:	e067      	b.n	800232a <displayFunction+0x186>
		case 2:
			lcdSetCursor(row, 0);
 800225a:	4b97      	ldr	r3, [pc, #604]	@ (80024b8 <displayFunction+0x314>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	2100      	movs	r1, #0
 8002260:	4618      	mov	r0, r3
 8002262:	f7fe fd8f 	bl	8000d84 <lcdSetCursor>
			lcdPrintfThreeInts((uint8_t*)"%d:%d:%d", clockGetHours(), clockGetMinutes(), clockGetSeconds());
 8002266:	f7ff fe29 	bl	8001ebc <clockGetHours>
 800226a:	4603      	mov	r3, r0
 800226c:	b21c      	sxth	r4, r3
 800226e:	f7ff fe19 	bl	8001ea4 <clockGetMinutes>
 8002272:	4603      	mov	r3, r0
 8002274:	b21d      	sxth	r5, r3
 8002276:	f7ff fe09 	bl	8001e8c <clockGetSeconds>
 800227a:	4603      	mov	r3, r0
 800227c:	b21b      	sxth	r3, r3
 800227e:	462a      	mov	r2, r5
 8002280:	4621      	mov	r1, r4
 8002282:	488f      	ldr	r0, [pc, #572]	@ (80024c0 <displayFunction+0x31c>)
 8002284:	f7fe fed3 	bl	800102e <lcdPrintfThreeInts>
			row = (row+1)%ROWS;
 8002288:	4b8b      	ldr	r3, [pc, #556]	@ (80024b8 <displayFunction+0x314>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	3301      	adds	r3, #1
 800228e:	425a      	negs	r2, r3
 8002290:	f003 0303 	and.w	r3, r3, #3
 8002294:	f002 0203 	and.w	r2, r2, #3
 8002298:	bf58      	it	pl
 800229a:	4253      	negpl	r3, r2
 800229c:	b2da      	uxtb	r2, r3
 800229e:	4b86      	ldr	r3, [pc, #536]	@ (80024b8 <displayFunction+0x314>)
 80022a0:	701a      	strb	r2, [r3, #0]
			break;
 80022a2:	e042      	b.n	800232a <displayFunction+0x186>
		case 1:
			lcdSetCursor(row, 0);
 80022a4:	4b84      	ldr	r3, [pc, #528]	@ (80024b8 <displayFunction+0x314>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	2100      	movs	r1, #0
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7fe fd6a 	bl	8000d84 <lcdSetCursor>
			lcdPrintfThreeInts((uint8_t*)"%d/%d/%d", clockGetDate(), clockGetMonth(), clockGetYear());
 80022b0:	f7ff fe10 	bl	8001ed4 <clockGetDate>
 80022b4:	4603      	mov	r3, r0
 80022b6:	b21c      	sxth	r4, r3
 80022b8:	f7ff fe18 	bl	8001eec <clockGetMonth>
 80022bc:	4603      	mov	r3, r0
 80022be:	b21d      	sxth	r5, r3
 80022c0:	f7ff fe20 	bl	8001f04 <clockGetYear>
 80022c4:	4603      	mov	r3, r0
 80022c6:	b21b      	sxth	r3, r3
 80022c8:	462a      	mov	r2, r5
 80022ca:	4621      	mov	r1, r4
 80022cc:	487d      	ldr	r0, [pc, #500]	@ (80024c4 <displayFunction+0x320>)
 80022ce:	f7fe feae 	bl	800102e <lcdPrintfThreeInts>
			row = (row+1)%ROWS;
 80022d2:	4b79      	ldr	r3, [pc, #484]	@ (80024b8 <displayFunction+0x314>)
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	3301      	adds	r3, #1
 80022d8:	425a      	negs	r2, r3
 80022da:	f003 0303 	and.w	r3, r3, #3
 80022de:	f002 0203 	and.w	r2, r2, #3
 80022e2:	bf58      	it	pl
 80022e4:	4253      	negpl	r3, r2
 80022e6:	b2da      	uxtb	r2, r3
 80022e8:	4b73      	ldr	r3, [pc, #460]	@ (80024b8 <displayFunction+0x314>)
 80022ea:	701a      	strb	r2, [r3, #0]
			break;
 80022ec:	e01d      	b.n	800232a <displayFunction+0x186>
		case 0:
			lcdSetCursor(row, 0);
 80022ee:	4b72      	ldr	r3, [pc, #456]	@ (80024b8 <displayFunction+0x314>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	2100      	movs	r1, #0
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7fe fd45 	bl	8000d84 <lcdSetCursor>
			lcdPrintfCenteredString((uint8_t*)"bienvenido!", ' ', 0, (uint8_t*)" ");
 80022fa:	4b6d      	ldr	r3, [pc, #436]	@ (80024b0 <displayFunction+0x30c>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	2120      	movs	r1, #32
 8002300:	4871      	ldr	r0, [pc, #452]	@ (80024c8 <displayFunction+0x324>)
 8002302:	f7fe fe03 	bl	8000f0c <lcdPrintfCenteredString>
			row = (row+1)%ROWS;
 8002306:	4b6c      	ldr	r3, [pc, #432]	@ (80024b8 <displayFunction+0x314>)
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	3301      	adds	r3, #1
 800230c:	425a      	negs	r2, r3
 800230e:	f003 0303 	and.w	r3, r3, #3
 8002312:	f002 0203 	and.w	r2, r2, #3
 8002316:	bf58      	it	pl
 8002318:	4253      	negpl	r3, r2
 800231a:	b2da      	uxtb	r2, r3
 800231c:	4b66      	ldr	r3, [pc, #408]	@ (80024b8 <displayFunction+0x314>)
 800231e:	701a      	strb	r2, [r3, #0]
			break;
 8002320:	e003      	b.n	800232a <displayFunction+0x186>
		default:
			uartSendString((uint8_t*)"problems in display_data");
 8002322:	486a      	ldr	r0, [pc, #424]	@ (80024cc <displayFunction+0x328>)
 8002324:	f7ff f956 	bl	80015d4 <uartSendString>
			break;
 8002328:	bf00      	nop
		}
		break;
 800232a:	e2a2      	b.n	8002872 <displayFunction+0x6ce>

	case DISPLAY_CONFIG:
		switch (row)
 800232c:	4b62      	ldr	r3, [pc, #392]	@ (80024b8 <displayFunction+0x314>)
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	2b03      	cmp	r3, #3
 8002332:	d873      	bhi.n	800241c <displayFunction+0x278>
 8002334:	a201      	add	r2, pc, #4	@ (adr r2, 800233c <displayFunction+0x198>)
 8002336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800233a:	bf00      	nop
 800233c:	080023e9 	.word	0x080023e9
 8002340:	080023b5 	.word	0x080023b5
 8002344:	08002381 	.word	0x08002381
 8002348:	0800234d 	.word	0x0800234d
		{
		case 3:
			lcdSetCursor(row, 0);
 800234c:	4b5a      	ldr	r3, [pc, #360]	@ (80024b8 <displayFunction+0x314>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	2100      	movs	r1, #0
 8002352:	4618      	mov	r0, r3
 8002354:	f7fe fd16 	bl	8000d84 <lcdSetCursor>
			lcdPrintfCenteredString((uint8_t*)"4: print custom str", ' ', 0, (uint8_t*)" ");
 8002358:	4b55      	ldr	r3, [pc, #340]	@ (80024b0 <displayFunction+0x30c>)
 800235a:	2200      	movs	r2, #0
 800235c:	2120      	movs	r1, #32
 800235e:	485c      	ldr	r0, [pc, #368]	@ (80024d0 <displayFunction+0x32c>)
 8002360:	f7fe fdd4 	bl	8000f0c <lcdPrintfCenteredString>
			row = (row+1)%ROWS;
 8002364:	4b54      	ldr	r3, [pc, #336]	@ (80024b8 <displayFunction+0x314>)
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	3301      	adds	r3, #1
 800236a:	425a      	negs	r2, r3
 800236c:	f003 0303 	and.w	r3, r3, #3
 8002370:	f002 0203 	and.w	r2, r2, #3
 8002374:	bf58      	it	pl
 8002376:	4253      	negpl	r3, r2
 8002378:	b2da      	uxtb	r2, r3
 800237a:	4b4f      	ldr	r3, [pc, #316]	@ (80024b8 <displayFunction+0x314>)
 800237c:	701a      	strb	r2, [r3, #0]
			break;
 800237e:	e051      	b.n	8002424 <displayFunction+0x280>
		case 2:
			lcdSetCursor(row, 0);
 8002380:	4b4d      	ldr	r3, [pc, #308]	@ (80024b8 <displayFunction+0x314>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	2100      	movs	r1, #0
 8002386:	4618      	mov	r0, r3
 8002388:	f7fe fcfc 	bl	8000d84 <lcdSetCursor>
			lcdPrintfCenteredString((uint8_t*)"3: reset counter", ' ', 0, (uint8_t*)" ");
 800238c:	4b48      	ldr	r3, [pc, #288]	@ (80024b0 <displayFunction+0x30c>)
 800238e:	2200      	movs	r2, #0
 8002390:	2120      	movs	r1, #32
 8002392:	4850      	ldr	r0, [pc, #320]	@ (80024d4 <displayFunction+0x330>)
 8002394:	f7fe fdba 	bl	8000f0c <lcdPrintfCenteredString>
			row = (row+1)%ROWS;
 8002398:	4b47      	ldr	r3, [pc, #284]	@ (80024b8 <displayFunction+0x314>)
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	3301      	adds	r3, #1
 800239e:	425a      	negs	r2, r3
 80023a0:	f003 0303 	and.w	r3, r3, #3
 80023a4:	f002 0203 	and.w	r2, r2, #3
 80023a8:	bf58      	it	pl
 80023aa:	4253      	negpl	r3, r2
 80023ac:	b2da      	uxtb	r2, r3
 80023ae:	4b42      	ldr	r3, [pc, #264]	@ (80024b8 <displayFunction+0x314>)
 80023b0:	701a      	strb	r2, [r3, #0]
			break;
 80023b2:	e037      	b.n	8002424 <displayFunction+0x280>
		case 1:
			lcdSetCursor(row, 0);
 80023b4:	4b40      	ldr	r3, [pc, #256]	@ (80024b8 <displayFunction+0x314>)
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	2100      	movs	r1, #0
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7fe fce2 	bl	8000d84 <lcdSetCursor>
			lcdPrintfCenteredString((uint8_t*)"2: set time", ' ', 0, (uint8_t*)" ");
 80023c0:	4b3b      	ldr	r3, [pc, #236]	@ (80024b0 <displayFunction+0x30c>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	2120      	movs	r1, #32
 80023c6:	4844      	ldr	r0, [pc, #272]	@ (80024d8 <displayFunction+0x334>)
 80023c8:	f7fe fda0 	bl	8000f0c <lcdPrintfCenteredString>
			row = (row+1)%ROWS;
 80023cc:	4b3a      	ldr	r3, [pc, #232]	@ (80024b8 <displayFunction+0x314>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	3301      	adds	r3, #1
 80023d2:	425a      	negs	r2, r3
 80023d4:	f003 0303 	and.w	r3, r3, #3
 80023d8:	f002 0203 	and.w	r2, r2, #3
 80023dc:	bf58      	it	pl
 80023de:	4253      	negpl	r3, r2
 80023e0:	b2da      	uxtb	r2, r3
 80023e2:	4b35      	ldr	r3, [pc, #212]	@ (80024b8 <displayFunction+0x314>)
 80023e4:	701a      	strb	r2, [r3, #0]
			break;
 80023e6:	e01d      	b.n	8002424 <displayFunction+0x280>
		case 0:
			lcdSetCursor(row, 0);
 80023e8:	4b33      	ldr	r3, [pc, #204]	@ (80024b8 <displayFunction+0x314>)
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	2100      	movs	r1, #0
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7fe fcc8 	bl	8000d84 <lcdSetCursor>
			lcdPrintfCenteredString((uint8_t*)"1: set date", ' ', 0, (uint8_t*)" ");
 80023f4:	4b2e      	ldr	r3, [pc, #184]	@ (80024b0 <displayFunction+0x30c>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	2120      	movs	r1, #32
 80023fa:	4838      	ldr	r0, [pc, #224]	@ (80024dc <displayFunction+0x338>)
 80023fc:	f7fe fd86 	bl	8000f0c <lcdPrintfCenteredString>
			row = (row+1)%ROWS;
 8002400:	4b2d      	ldr	r3, [pc, #180]	@ (80024b8 <displayFunction+0x314>)
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	3301      	adds	r3, #1
 8002406:	425a      	negs	r2, r3
 8002408:	f003 0303 	and.w	r3, r3, #3
 800240c:	f002 0203 	and.w	r2, r2, #3
 8002410:	bf58      	it	pl
 8002412:	4253      	negpl	r3, r2
 8002414:	b2da      	uxtb	r2, r3
 8002416:	4b28      	ldr	r3, [pc, #160]	@ (80024b8 <displayFunction+0x314>)
 8002418:	701a      	strb	r2, [r3, #0]
			break;
 800241a:	e003      	b.n	8002424 <displayFunction+0x280>
		default:
			uartSendString((uint8_t*)"problems");
 800241c:	4830      	ldr	r0, [pc, #192]	@ (80024e0 <displayFunction+0x33c>)
 800241e:	f7ff f8d9 	bl	80015d4 <uartSendString>
			break;
 8002422:	bf00      	nop
		}
		break;
 8002424:	e225      	b.n	8002872 <displayFunction+0x6ce>

	case DISPLAY_SET_DATE:
		switch (row)
 8002426:	4b24      	ldr	r3, [pc, #144]	@ (80024b8 <displayFunction+0x314>)
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	2b03      	cmp	r3, #3
 800242c:	f200 8092 	bhi.w	8002554 <displayFunction+0x3b0>
 8002430:	a201      	add	r2, pc, #4	@ (adr r2, 8002438 <displayFunction+0x294>)
 8002432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002436:	bf00      	nop
 8002438:	08002521 	.word	0x08002521
 800243c:	080024ed 	.word	0x080024ed
 8002440:	0800247d 	.word	0x0800247d
 8002444:	08002449 	.word	0x08002449
		{
		case 3:
			lcdSetCursor(row, 0);
 8002448:	4b1b      	ldr	r3, [pc, #108]	@ (80024b8 <displayFunction+0x314>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	2100      	movs	r1, #0
 800244e:	4618      	mov	r0, r3
 8002450:	f7fe fc98 	bl	8000d84 <lcdSetCursor>
			lcdPrintfCenteredString((uint8_t*)"ddmmyy", ' ', 0, (uint8_t*)" ");
 8002454:	4b16      	ldr	r3, [pc, #88]	@ (80024b0 <displayFunction+0x30c>)
 8002456:	2200      	movs	r2, #0
 8002458:	2120      	movs	r1, #32
 800245a:	4822      	ldr	r0, [pc, #136]	@ (80024e4 <displayFunction+0x340>)
 800245c:	f7fe fd56 	bl	8000f0c <lcdPrintfCenteredString>
			row = (row+1)%ROWS;
 8002460:	4b15      	ldr	r3, [pc, #84]	@ (80024b8 <displayFunction+0x314>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	3301      	adds	r3, #1
 8002466:	425a      	negs	r2, r3
 8002468:	f003 0303 	and.w	r3, r3, #3
 800246c:	f002 0203 	and.w	r2, r2, #3
 8002470:	bf58      	it	pl
 8002472:	4253      	negpl	r3, r2
 8002474:	b2da      	uxtb	r2, r3
 8002476:	4b10      	ldr	r3, [pc, #64]	@ (80024b8 <displayFunction+0x314>)
 8002478:	701a      	strb	r2, [r3, #0]
			break;
 800247a:	e06f      	b.n	800255c <displayFunction+0x3b8>
		case 2:
			lcdSetCursor(row, 0);
 800247c:	4b0e      	ldr	r3, [pc, #56]	@ (80024b8 <displayFunction+0x314>)
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	2100      	movs	r1, #0
 8002482:	4618      	mov	r0, r3
 8002484:	f7fe fc7e 	bl	8000d84 <lcdSetCursor>
			lcdPrintfCenteredString((uint8_t*)"send date format:", ' ', 0, (uint8_t*)" ");
 8002488:	4b09      	ldr	r3, [pc, #36]	@ (80024b0 <displayFunction+0x30c>)
 800248a:	2200      	movs	r2, #0
 800248c:	2120      	movs	r1, #32
 800248e:	4816      	ldr	r0, [pc, #88]	@ (80024e8 <displayFunction+0x344>)
 8002490:	f7fe fd3c 	bl	8000f0c <lcdPrintfCenteredString>
			row = (row+1)%ROWS;
 8002494:	4b08      	ldr	r3, [pc, #32]	@ (80024b8 <displayFunction+0x314>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	3301      	adds	r3, #1
 800249a:	425a      	negs	r2, r3
 800249c:	f003 0303 	and.w	r3, r3, #3
 80024a0:	f002 0203 	and.w	r2, r2, #3
 80024a4:	bf58      	it	pl
 80024a6:	4253      	negpl	r3, r2
 80024a8:	b2da      	uxtb	r2, r3
 80024aa:	4b03      	ldr	r3, [pc, #12]	@ (80024b8 <displayFunction+0x314>)
 80024ac:	701a      	strb	r2, [r3, #0]
			break;
 80024ae:	e055      	b.n	800255c <displayFunction+0x3b8>
 80024b0:	08006a70 	.word	0x08006a70
 80024b4:	08006a74 	.word	0x08006a74
 80024b8:	200001e9 	.word	0x200001e9
 80024bc:	08006a7c 	.word	0x08006a7c
 80024c0:	08006a84 	.word	0x08006a84
 80024c4:	08006a90 	.word	0x08006a90
 80024c8:	08006a9c 	.word	0x08006a9c
 80024cc:	08006aa8 	.word	0x08006aa8
 80024d0:	08006ac4 	.word	0x08006ac4
 80024d4:	08006ad8 	.word	0x08006ad8
 80024d8:	08006aec 	.word	0x08006aec
 80024dc:	08006af8 	.word	0x08006af8
 80024e0:	08006b04 	.word	0x08006b04
 80024e4:	08006b10 	.word	0x08006b10
 80024e8:	08006b18 	.word	0x08006b18
		case 1:
			lcdSetCursor(row, 0);
 80024ec:	4bad      	ldr	r3, [pc, #692]	@ (80027a4 <displayFunction+0x600>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	2100      	movs	r1, #0
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7fe fc46 	bl	8000d84 <lcdSetCursor>
			lcdPrintfCenteredString((uint8_t*)"('x' to return)", ' ', 0, (uint8_t*)" ");
 80024f8:	4bab      	ldr	r3, [pc, #684]	@ (80027a8 <displayFunction+0x604>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	2120      	movs	r1, #32
 80024fe:	48ab      	ldr	r0, [pc, #684]	@ (80027ac <displayFunction+0x608>)
 8002500:	f7fe fd04 	bl	8000f0c <lcdPrintfCenteredString>
			row = (row+1)%ROWS;
 8002504:	4ba7      	ldr	r3, [pc, #668]	@ (80027a4 <displayFunction+0x600>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	3301      	adds	r3, #1
 800250a:	425a      	negs	r2, r3
 800250c:	f003 0303 	and.w	r3, r3, #3
 8002510:	f002 0203 	and.w	r2, r2, #3
 8002514:	bf58      	it	pl
 8002516:	4253      	negpl	r3, r2
 8002518:	b2da      	uxtb	r2, r3
 800251a:	4ba2      	ldr	r3, [pc, #648]	@ (80027a4 <displayFunction+0x600>)
 800251c:	701a      	strb	r2, [r3, #0]
			break;
 800251e:	e01d      	b.n	800255c <displayFunction+0x3b8>
		case 0:
			lcdSetCursor(row, 0);
 8002520:	4ba0      	ldr	r3, [pc, #640]	@ (80027a4 <displayFunction+0x600>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	2100      	movs	r1, #0
 8002526:	4618      	mov	r0, r3
 8002528:	f7fe fc2c 	bl	8000d84 <lcdSetCursor>
			lcdPrintfCenteredString((uint8_t*)"CONFIG MENU", ' ', 0, (uint8_t*)" ");
 800252c:	4b9e      	ldr	r3, [pc, #632]	@ (80027a8 <displayFunction+0x604>)
 800252e:	2200      	movs	r2, #0
 8002530:	2120      	movs	r1, #32
 8002532:	489f      	ldr	r0, [pc, #636]	@ (80027b0 <displayFunction+0x60c>)
 8002534:	f7fe fcea 	bl	8000f0c <lcdPrintfCenteredString>
			row = (row+1)%ROWS;
 8002538:	4b9a      	ldr	r3, [pc, #616]	@ (80027a4 <displayFunction+0x600>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	3301      	adds	r3, #1
 800253e:	425a      	negs	r2, r3
 8002540:	f003 0303 	and.w	r3, r3, #3
 8002544:	f002 0203 	and.w	r2, r2, #3
 8002548:	bf58      	it	pl
 800254a:	4253      	negpl	r3, r2
 800254c:	b2da      	uxtb	r2, r3
 800254e:	4b95      	ldr	r3, [pc, #596]	@ (80027a4 <displayFunction+0x600>)
 8002550:	701a      	strb	r2, [r3, #0]
			break;
 8002552:	e003      	b.n	800255c <displayFunction+0x3b8>
		default:
			uartSendString((uint8_t*)"problems");
 8002554:	4897      	ldr	r0, [pc, #604]	@ (80027b4 <displayFunction+0x610>)
 8002556:	f7ff f83d 	bl	80015d4 <uartSendString>
			break;
 800255a:	bf00      	nop
		}
		break;
 800255c:	e189      	b.n	8002872 <displayFunction+0x6ce>

		case DISPLAY_SET_TIME:
		switch (row)
 800255e:	4b91      	ldr	r3, [pc, #580]	@ (80027a4 <displayFunction+0x600>)
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	2b03      	cmp	r3, #3
 8002564:	d872      	bhi.n	800264c <displayFunction+0x4a8>
 8002566:	a201      	add	r2, pc, #4	@ (adr r2, 800256c <displayFunction+0x3c8>)
 8002568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800256c:	08002619 	.word	0x08002619
 8002570:	080025e5 	.word	0x080025e5
 8002574:	080025b1 	.word	0x080025b1
 8002578:	0800257d 	.word	0x0800257d
		{
		case 3:
			lcdSetCursor(row, 0);
 800257c:	4b89      	ldr	r3, [pc, #548]	@ (80027a4 <displayFunction+0x600>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	2100      	movs	r1, #0
 8002582:	4618      	mov	r0, r3
 8002584:	f7fe fbfe 	bl	8000d84 <lcdSetCursor>
			lcdPrintfCenteredString((uint8_t*)"hhmmss", ' ', 0, (uint8_t*)" ");
 8002588:	4b87      	ldr	r3, [pc, #540]	@ (80027a8 <displayFunction+0x604>)
 800258a:	2200      	movs	r2, #0
 800258c:	2120      	movs	r1, #32
 800258e:	488a      	ldr	r0, [pc, #552]	@ (80027b8 <displayFunction+0x614>)
 8002590:	f7fe fcbc 	bl	8000f0c <lcdPrintfCenteredString>
			row = (row+1)%ROWS;
 8002594:	4b83      	ldr	r3, [pc, #524]	@ (80027a4 <displayFunction+0x600>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	3301      	adds	r3, #1
 800259a:	425a      	negs	r2, r3
 800259c:	f003 0303 	and.w	r3, r3, #3
 80025a0:	f002 0203 	and.w	r2, r2, #3
 80025a4:	bf58      	it	pl
 80025a6:	4253      	negpl	r3, r2
 80025a8:	b2da      	uxtb	r2, r3
 80025aa:	4b7e      	ldr	r3, [pc, #504]	@ (80027a4 <displayFunction+0x600>)
 80025ac:	701a      	strb	r2, [r3, #0]
			break;
 80025ae:	e051      	b.n	8002654 <displayFunction+0x4b0>
		case 2:
			lcdSetCursor(row, 0);
 80025b0:	4b7c      	ldr	r3, [pc, #496]	@ (80027a4 <displayFunction+0x600>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	2100      	movs	r1, #0
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7fe fbe4 	bl	8000d84 <lcdSetCursor>
			lcdPrintfCenteredString((uint8_t*)"send time format:", ' ', 0, (uint8_t*)" ");
 80025bc:	4b7a      	ldr	r3, [pc, #488]	@ (80027a8 <displayFunction+0x604>)
 80025be:	2200      	movs	r2, #0
 80025c0:	2120      	movs	r1, #32
 80025c2:	487e      	ldr	r0, [pc, #504]	@ (80027bc <displayFunction+0x618>)
 80025c4:	f7fe fca2 	bl	8000f0c <lcdPrintfCenteredString>
			row = (row+1)%ROWS;
 80025c8:	4b76      	ldr	r3, [pc, #472]	@ (80027a4 <displayFunction+0x600>)
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	3301      	adds	r3, #1
 80025ce:	425a      	negs	r2, r3
 80025d0:	f003 0303 	and.w	r3, r3, #3
 80025d4:	f002 0203 	and.w	r2, r2, #3
 80025d8:	bf58      	it	pl
 80025da:	4253      	negpl	r3, r2
 80025dc:	b2da      	uxtb	r2, r3
 80025de:	4b71      	ldr	r3, [pc, #452]	@ (80027a4 <displayFunction+0x600>)
 80025e0:	701a      	strb	r2, [r3, #0]
			break;
 80025e2:	e037      	b.n	8002654 <displayFunction+0x4b0>
		case 1:
			lcdSetCursor(row, 0);
 80025e4:	4b6f      	ldr	r3, [pc, #444]	@ (80027a4 <displayFunction+0x600>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	2100      	movs	r1, #0
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7fe fbca 	bl	8000d84 <lcdSetCursor>
			lcdPrintfCenteredString((uint8_t*)"('x' to return)", ' ', 0, (uint8_t*)" ");
 80025f0:	4b6d      	ldr	r3, [pc, #436]	@ (80027a8 <displayFunction+0x604>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	2120      	movs	r1, #32
 80025f6:	486d      	ldr	r0, [pc, #436]	@ (80027ac <displayFunction+0x608>)
 80025f8:	f7fe fc88 	bl	8000f0c <lcdPrintfCenteredString>
			row = (row+1)%ROWS;
 80025fc:	4b69      	ldr	r3, [pc, #420]	@ (80027a4 <displayFunction+0x600>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	3301      	adds	r3, #1
 8002602:	425a      	negs	r2, r3
 8002604:	f003 0303 	and.w	r3, r3, #3
 8002608:	f002 0203 	and.w	r2, r2, #3
 800260c:	bf58      	it	pl
 800260e:	4253      	negpl	r3, r2
 8002610:	b2da      	uxtb	r2, r3
 8002612:	4b64      	ldr	r3, [pc, #400]	@ (80027a4 <displayFunction+0x600>)
 8002614:	701a      	strb	r2, [r3, #0]
			break;
 8002616:	e01d      	b.n	8002654 <displayFunction+0x4b0>
		case 0:
			lcdSetCursor(row, 0);
 8002618:	4b62      	ldr	r3, [pc, #392]	@ (80027a4 <displayFunction+0x600>)
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	2100      	movs	r1, #0
 800261e:	4618      	mov	r0, r3
 8002620:	f7fe fbb0 	bl	8000d84 <lcdSetCursor>
			lcdPrintfCenteredString((uint8_t*)"CONFIG MENU", ' ', 0, (uint8_t*)" ");
 8002624:	4b60      	ldr	r3, [pc, #384]	@ (80027a8 <displayFunction+0x604>)
 8002626:	2200      	movs	r2, #0
 8002628:	2120      	movs	r1, #32
 800262a:	4861      	ldr	r0, [pc, #388]	@ (80027b0 <displayFunction+0x60c>)
 800262c:	f7fe fc6e 	bl	8000f0c <lcdPrintfCenteredString>
			row = (row+1)%ROWS;
 8002630:	4b5c      	ldr	r3, [pc, #368]	@ (80027a4 <displayFunction+0x600>)
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	3301      	adds	r3, #1
 8002636:	425a      	negs	r2, r3
 8002638:	f003 0303 	and.w	r3, r3, #3
 800263c:	f002 0203 	and.w	r2, r2, #3
 8002640:	bf58      	it	pl
 8002642:	4253      	negpl	r3, r2
 8002644:	b2da      	uxtb	r2, r3
 8002646:	4b57      	ldr	r3, [pc, #348]	@ (80027a4 <displayFunction+0x600>)
 8002648:	701a      	strb	r2, [r3, #0]
			break;
 800264a:	e003      	b.n	8002654 <displayFunction+0x4b0>
		default:
			uartSendString((uint8_t*)"problems");
 800264c:	4859      	ldr	r0, [pc, #356]	@ (80027b4 <displayFunction+0x610>)
 800264e:	f7fe ffc1 	bl	80015d4 <uartSendString>
			break;
 8002652:	bf00      	nop
		}
		break;
 8002654:	e10d      	b.n	8002872 <displayFunction+0x6ce>

		case DISPLAY_RESET_COUNT:
		switch (row)
 8002656:	4b53      	ldr	r3, [pc, #332]	@ (80027a4 <displayFunction+0x600>)
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	2b03      	cmp	r3, #3
 800265c:	d872      	bhi.n	8002744 <displayFunction+0x5a0>
 800265e:	a201      	add	r2, pc, #4	@ (adr r2, 8002664 <displayFunction+0x4c0>)
 8002660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002664:	08002711 	.word	0x08002711
 8002668:	080026dd 	.word	0x080026dd
 800266c:	080026a9 	.word	0x080026a9
 8002670:	08002675 	.word	0x08002675
		{
		case 3:
			lcdSetCursor(row, 0);
 8002674:	4b4b      	ldr	r3, [pc, #300]	@ (80027a4 <displayFunction+0x600>)
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	2100      	movs	r1, #0
 800267a:	4618      	mov	r0, r3
 800267c:	f7fe fb82 	bl	8000d84 <lcdSetCursor>
			lcdPrintfCenteredString((uint8_t*)"'r' to reset count", ' ', 0, (uint8_t*)" ");
 8002680:	4b49      	ldr	r3, [pc, #292]	@ (80027a8 <displayFunction+0x604>)
 8002682:	2200      	movs	r2, #0
 8002684:	2120      	movs	r1, #32
 8002686:	484e      	ldr	r0, [pc, #312]	@ (80027c0 <displayFunction+0x61c>)
 8002688:	f7fe fc40 	bl	8000f0c <lcdPrintfCenteredString>
			row = (row+1)%ROWS;
 800268c:	4b45      	ldr	r3, [pc, #276]	@ (80027a4 <displayFunction+0x600>)
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	3301      	adds	r3, #1
 8002692:	425a      	negs	r2, r3
 8002694:	f003 0303 	and.w	r3, r3, #3
 8002698:	f002 0203 	and.w	r2, r2, #3
 800269c:	bf58      	it	pl
 800269e:	4253      	negpl	r3, r2
 80026a0:	b2da      	uxtb	r2, r3
 80026a2:	4b40      	ldr	r3, [pc, #256]	@ (80027a4 <displayFunction+0x600>)
 80026a4:	701a      	strb	r2, [r3, #0]
			break;
 80026a6:	e051      	b.n	800274c <displayFunction+0x5a8>
		case 2:
			lcdSetCursor(row, 0);
 80026a8:	4b3e      	ldr	r3, [pc, #248]	@ (80027a4 <displayFunction+0x600>)
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	2100      	movs	r1, #0
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7fe fb68 	bl	8000d84 <lcdSetCursor>
			lcdPrintfCenteredString((uint8_t*)"send:", ' ', 0, (uint8_t*)" ");
 80026b4:	4b3c      	ldr	r3, [pc, #240]	@ (80027a8 <displayFunction+0x604>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	2120      	movs	r1, #32
 80026ba:	4842      	ldr	r0, [pc, #264]	@ (80027c4 <displayFunction+0x620>)
 80026bc:	f7fe fc26 	bl	8000f0c <lcdPrintfCenteredString>
			row = (row+1)%ROWS;
 80026c0:	4b38      	ldr	r3, [pc, #224]	@ (80027a4 <displayFunction+0x600>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	3301      	adds	r3, #1
 80026c6:	425a      	negs	r2, r3
 80026c8:	f003 0303 	and.w	r3, r3, #3
 80026cc:	f002 0203 	and.w	r2, r2, #3
 80026d0:	bf58      	it	pl
 80026d2:	4253      	negpl	r3, r2
 80026d4:	b2da      	uxtb	r2, r3
 80026d6:	4b33      	ldr	r3, [pc, #204]	@ (80027a4 <displayFunction+0x600>)
 80026d8:	701a      	strb	r2, [r3, #0]
			break;
 80026da:	e037      	b.n	800274c <displayFunction+0x5a8>
		case 1:
			lcdSetCursor(row, 0);
 80026dc:	4b31      	ldr	r3, [pc, #196]	@ (80027a4 <displayFunction+0x600>)
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	2100      	movs	r1, #0
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7fe fb4e 	bl	8000d84 <lcdSetCursor>
			lcdPrintfCenteredString((uint8_t*)"('x' to return)", ' ', 0, (uint8_t*)" ");
 80026e8:	4b2f      	ldr	r3, [pc, #188]	@ (80027a8 <displayFunction+0x604>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	2120      	movs	r1, #32
 80026ee:	482f      	ldr	r0, [pc, #188]	@ (80027ac <displayFunction+0x608>)
 80026f0:	f7fe fc0c 	bl	8000f0c <lcdPrintfCenteredString>
			row = (row+1)%ROWS;
 80026f4:	4b2b      	ldr	r3, [pc, #172]	@ (80027a4 <displayFunction+0x600>)
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	3301      	adds	r3, #1
 80026fa:	425a      	negs	r2, r3
 80026fc:	f003 0303 	and.w	r3, r3, #3
 8002700:	f002 0203 	and.w	r2, r2, #3
 8002704:	bf58      	it	pl
 8002706:	4253      	negpl	r3, r2
 8002708:	b2da      	uxtb	r2, r3
 800270a:	4b26      	ldr	r3, [pc, #152]	@ (80027a4 <displayFunction+0x600>)
 800270c:	701a      	strb	r2, [r3, #0]
			break;
 800270e:	e01d      	b.n	800274c <displayFunction+0x5a8>
		case 0:
			lcdSetCursor(row, 0);
 8002710:	4b24      	ldr	r3, [pc, #144]	@ (80027a4 <displayFunction+0x600>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	2100      	movs	r1, #0
 8002716:	4618      	mov	r0, r3
 8002718:	f7fe fb34 	bl	8000d84 <lcdSetCursor>
			lcdPrintfCenteredString((uint8_t*)"CONFIG MENU", ' ', 0, (uint8_t*)" ");
 800271c:	4b22      	ldr	r3, [pc, #136]	@ (80027a8 <displayFunction+0x604>)
 800271e:	2200      	movs	r2, #0
 8002720:	2120      	movs	r1, #32
 8002722:	4823      	ldr	r0, [pc, #140]	@ (80027b0 <displayFunction+0x60c>)
 8002724:	f7fe fbf2 	bl	8000f0c <lcdPrintfCenteredString>
			row = (row+1)%ROWS;
 8002728:	4b1e      	ldr	r3, [pc, #120]	@ (80027a4 <displayFunction+0x600>)
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	3301      	adds	r3, #1
 800272e:	425a      	negs	r2, r3
 8002730:	f003 0303 	and.w	r3, r3, #3
 8002734:	f002 0203 	and.w	r2, r2, #3
 8002738:	bf58      	it	pl
 800273a:	4253      	negpl	r3, r2
 800273c:	b2da      	uxtb	r2, r3
 800273e:	4b19      	ldr	r3, [pc, #100]	@ (80027a4 <displayFunction+0x600>)
 8002740:	701a      	strb	r2, [r3, #0]
			break;
 8002742:	e003      	b.n	800274c <displayFunction+0x5a8>
		default:
			uartSendString((uint8_t*)"problems");
 8002744:	481b      	ldr	r0, [pc, #108]	@ (80027b4 <displayFunction+0x610>)
 8002746:	f7fe ff45 	bl	80015d4 <uartSendString>
			break;
 800274a:	bf00      	nop
		}
		break;
 800274c:	e091      	b.n	8002872 <displayFunction+0x6ce>

		case DISPLAY_SET_CUSTOM_STRING_INPUT:
		switch (row)
 800274e:	4b15      	ldr	r3, [pc, #84]	@ (80027a4 <displayFunction+0x600>)
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	2b03      	cmp	r3, #3
 8002754:	f200 8088 	bhi.w	8002868 <displayFunction+0x6c4>
 8002758:	a201      	add	r2, pc, #4	@ (adr r2, 8002760 <displayFunction+0x5bc>)
 800275a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800275e:	bf00      	nop
 8002760:	08002835 	.word	0x08002835
 8002764:	08002801 	.word	0x08002801
 8002768:	080027cd 	.word	0x080027cd
 800276c:	08002771 	.word	0x08002771
		{
		case 3:
			lcdSetCursor(row, 0);
 8002770:	4b0c      	ldr	r3, [pc, #48]	@ (80027a4 <displayFunction+0x600>)
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	2100      	movs	r1, #0
 8002776:	4618      	mov	r0, r3
 8002778:	f7fe fb04 	bl	8000d84 <lcdSetCursor>
			lcdPrintfCenteredString((uint8_t*)"max 20 chars", ' ', 0, (uint8_t*)" ");
 800277c:	4b0a      	ldr	r3, [pc, #40]	@ (80027a8 <displayFunction+0x604>)
 800277e:	2200      	movs	r2, #0
 8002780:	2120      	movs	r1, #32
 8002782:	4811      	ldr	r0, [pc, #68]	@ (80027c8 <displayFunction+0x624>)
 8002784:	f7fe fbc2 	bl	8000f0c <lcdPrintfCenteredString>
			row = (row+1)%ROWS;
 8002788:	4b06      	ldr	r3, [pc, #24]	@ (80027a4 <displayFunction+0x600>)
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	3301      	adds	r3, #1
 800278e:	425a      	negs	r2, r3
 8002790:	f003 0303 	and.w	r3, r3, #3
 8002794:	f002 0203 	and.w	r2, r2, #3
 8002798:	bf58      	it	pl
 800279a:	4253      	negpl	r3, r2
 800279c:	b2da      	uxtb	r2, r3
 800279e:	4b01      	ldr	r3, [pc, #4]	@ (80027a4 <displayFunction+0x600>)
 80027a0:	701a      	strb	r2, [r3, #0]
			break;
 80027a2:	e065      	b.n	8002870 <displayFunction+0x6cc>
 80027a4:	200001e9 	.word	0x200001e9
 80027a8:	08006a70 	.word	0x08006a70
 80027ac:	08006b2c 	.word	0x08006b2c
 80027b0:	08006b3c 	.word	0x08006b3c
 80027b4:	08006b04 	.word	0x08006b04
 80027b8:	08006b48 	.word	0x08006b48
 80027bc:	08006b50 	.word	0x08006b50
 80027c0:	08006b64 	.word	0x08006b64
 80027c4:	08006b78 	.word	0x08006b78
 80027c8:	08006b80 	.word	0x08006b80
		case 2:
			lcdSetCursor(row, 0);
 80027cc:	4b2b      	ldr	r3, [pc, #172]	@ (800287c <displayFunction+0x6d8>)
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	2100      	movs	r1, #0
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7fe fad6 	bl	8000d84 <lcdSetCursor>
			lcdPrintfCenteredString((uint8_t*)"send string:", ' ', 0, (uint8_t*)" ");
 80027d8:	4b29      	ldr	r3, [pc, #164]	@ (8002880 <displayFunction+0x6dc>)
 80027da:	2200      	movs	r2, #0
 80027dc:	2120      	movs	r1, #32
 80027de:	4829      	ldr	r0, [pc, #164]	@ (8002884 <displayFunction+0x6e0>)
 80027e0:	f7fe fb94 	bl	8000f0c <lcdPrintfCenteredString>
			row = (row+1)%ROWS;
 80027e4:	4b25      	ldr	r3, [pc, #148]	@ (800287c <displayFunction+0x6d8>)
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	3301      	adds	r3, #1
 80027ea:	425a      	negs	r2, r3
 80027ec:	f003 0303 	and.w	r3, r3, #3
 80027f0:	f002 0203 	and.w	r2, r2, #3
 80027f4:	bf58      	it	pl
 80027f6:	4253      	negpl	r3, r2
 80027f8:	b2da      	uxtb	r2, r3
 80027fa:	4b20      	ldr	r3, [pc, #128]	@ (800287c <displayFunction+0x6d8>)
 80027fc:	701a      	strb	r2, [r3, #0]
			break;
 80027fe:	e037      	b.n	8002870 <displayFunction+0x6cc>
		case 1:
			lcdSetCursor(row, 0);
 8002800:	4b1e      	ldr	r3, [pc, #120]	@ (800287c <displayFunction+0x6d8>)
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	2100      	movs	r1, #0
 8002806:	4618      	mov	r0, r3
 8002808:	f7fe fabc 	bl	8000d84 <lcdSetCursor>
			lcdPrintfCenteredString((uint8_t*)"('x' to return)", ' ', 0, (uint8_t*)" ");
 800280c:	4b1c      	ldr	r3, [pc, #112]	@ (8002880 <displayFunction+0x6dc>)
 800280e:	2200      	movs	r2, #0
 8002810:	2120      	movs	r1, #32
 8002812:	481d      	ldr	r0, [pc, #116]	@ (8002888 <displayFunction+0x6e4>)
 8002814:	f7fe fb7a 	bl	8000f0c <lcdPrintfCenteredString>
			row = (row+1)%ROWS;
 8002818:	4b18      	ldr	r3, [pc, #96]	@ (800287c <displayFunction+0x6d8>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	3301      	adds	r3, #1
 800281e:	425a      	negs	r2, r3
 8002820:	f003 0303 	and.w	r3, r3, #3
 8002824:	f002 0203 	and.w	r2, r2, #3
 8002828:	bf58      	it	pl
 800282a:	4253      	negpl	r3, r2
 800282c:	b2da      	uxtb	r2, r3
 800282e:	4b13      	ldr	r3, [pc, #76]	@ (800287c <displayFunction+0x6d8>)
 8002830:	701a      	strb	r2, [r3, #0]
			break;
 8002832:	e01d      	b.n	8002870 <displayFunction+0x6cc>
		case 0:
			lcdSetCursor(row, 0);
 8002834:	4b11      	ldr	r3, [pc, #68]	@ (800287c <displayFunction+0x6d8>)
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	2100      	movs	r1, #0
 800283a:	4618      	mov	r0, r3
 800283c:	f7fe faa2 	bl	8000d84 <lcdSetCursor>
			lcdPrintfCenteredString((uint8_t*)"CONFIG MENU", ' ', 0, (uint8_t*)" ");
 8002840:	4b0f      	ldr	r3, [pc, #60]	@ (8002880 <displayFunction+0x6dc>)
 8002842:	2200      	movs	r2, #0
 8002844:	2120      	movs	r1, #32
 8002846:	4811      	ldr	r0, [pc, #68]	@ (800288c <displayFunction+0x6e8>)
 8002848:	f7fe fb60 	bl	8000f0c <lcdPrintfCenteredString>
			row = (row+1)%ROWS;
 800284c:	4b0b      	ldr	r3, [pc, #44]	@ (800287c <displayFunction+0x6d8>)
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	3301      	adds	r3, #1
 8002852:	425a      	negs	r2, r3
 8002854:	f003 0303 	and.w	r3, r3, #3
 8002858:	f002 0203 	and.w	r2, r2, #3
 800285c:	bf58      	it	pl
 800285e:	4253      	negpl	r3, r2
 8002860:	b2da      	uxtb	r2, r3
 8002862:	4b06      	ldr	r3, [pc, #24]	@ (800287c <displayFunction+0x6d8>)
 8002864:	701a      	strb	r2, [r3, #0]
			break;
 8002866:	e003      	b.n	8002870 <displayFunction+0x6cc>
		default:
			uartSendString((uint8_t*)"problems");
 8002868:	4809      	ldr	r0, [pc, #36]	@ (8002890 <displayFunction+0x6ec>)
 800286a:	f7fe feb3 	bl	80015d4 <uartSendString>
			break;
 800286e:	bf00      	nop
		}
		break;
 8002870:	bf00      	nop
	}
}
 8002872:	bf00      	nop
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bdb0      	pop	{r4, r5, r7, pc}
 800287a:	bf00      	nop
 800287c:	200001e9 	.word	0x200001e9
 8002880:	08006a70 	.word	0x08006a70
 8002884:	08006b90 	.word	0x08006b90
 8002888:	08006b2c 	.word	0x08006b2c
 800288c:	08006b3c 	.word	0x08006b3c
 8002890:	08006b04 	.word	0x08006b04

08002894 <displayFSM>:

/************************************
 * GLOBAL FUNCTIONS
 ************************************/
void displayFSM()
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
	switch (displayState)
 8002898:	4b32      	ldr	r3, [pc, #200]	@ (8002964 <displayFSM+0xd0>)
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	2b06      	cmp	r3, #6
 800289e:	d85a      	bhi.n	8002956 <displayFSM+0xc2>
 80028a0:	a201      	add	r2, pc, #4	@ (adr r2, 80028a8 <displayFSM+0x14>)
 80028a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028a6:	bf00      	nop
 80028a8:	080028c5 	.word	0x080028c5
 80028ac:	080028d3 	.word	0x080028d3
 80028b0:	080028e9 	.word	0x080028e9
 80028b4:	080028ff 	.word	0x080028ff
 80028b8:	08002915 	.word	0x08002915
 80028bc:	0800292b 	.word	0x0800292b
 80028c0:	08002941 	.word	0x08002941
	{

	case DISPLAY_INIT:
		circularBufferInit(&uartUserBuffer);
 80028c4:	4828      	ldr	r0, [pc, #160]	@ (8002968 <displayFSM+0xd4>)
 80028c6:	f7ff f90b 	bl	8001ae0 <circularBufferInit>
		displayState = DISPLAY_DATA;
 80028ca:	4b26      	ldr	r3, [pc, #152]	@ (8002964 <displayFSM+0xd0>)
 80028cc:	2201      	movs	r2, #1
 80028ce:	701a      	strb	r2, [r3, #0]
		break;
 80028d0:	e045      	b.n	800295e <displayFSM+0xca>

	case DISPLAY_DATA:

		displayFunction(displayState);
 80028d2:	4b24      	ldr	r3, [pc, #144]	@ (8002964 <displayFSM+0xd0>)
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7ff fc64 	bl	80021a4 <displayFunction>
		inputFunction(displayState);
 80028dc:	4b21      	ldr	r3, [pc, #132]	@ (8002964 <displayFSM+0xd0>)
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff fb1b 	bl	8001f1c <inputFunction>
		break;
 80028e6:	e03a      	b.n	800295e <displayFSM+0xca>

	case DISPLAY_CONFIG:
		displayFunction(displayState);
 80028e8:	4b1e      	ldr	r3, [pc, #120]	@ (8002964 <displayFSM+0xd0>)
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7ff fc59 	bl	80021a4 <displayFunction>
		inputFunction(displayState);
 80028f2:	4b1c      	ldr	r3, [pc, #112]	@ (8002964 <displayFSM+0xd0>)
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7ff fb10 	bl	8001f1c <inputFunction>
		break;
 80028fc:	e02f      	b.n	800295e <displayFSM+0xca>

	case DISPLAY_SET_DATE:
		displayFunction(displayState);
 80028fe:	4b19      	ldr	r3, [pc, #100]	@ (8002964 <displayFSM+0xd0>)
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	4618      	mov	r0, r3
 8002904:	f7ff fc4e 	bl	80021a4 <displayFunction>
		inputFunction(displayState);
 8002908:	4b16      	ldr	r3, [pc, #88]	@ (8002964 <displayFSM+0xd0>)
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff fb05 	bl	8001f1c <inputFunction>
		break;
 8002912:	e024      	b.n	800295e <displayFSM+0xca>

	case DISPLAY_SET_TIME:
		displayFunction(displayState);
 8002914:	4b13      	ldr	r3, [pc, #76]	@ (8002964 <displayFSM+0xd0>)
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff fc43 	bl	80021a4 <displayFunction>
		inputFunction(displayState);
 800291e:	4b11      	ldr	r3, [pc, #68]	@ (8002964 <displayFSM+0xd0>)
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff fafa 	bl	8001f1c <inputFunction>
		break;
 8002928:	e019      	b.n	800295e <displayFSM+0xca>

	case DISPLAY_RESET_COUNT:
		displayFunction(displayState);
 800292a:	4b0e      	ldr	r3, [pc, #56]	@ (8002964 <displayFSM+0xd0>)
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	4618      	mov	r0, r3
 8002930:	f7ff fc38 	bl	80021a4 <displayFunction>
		inputFunction(displayState);
 8002934:	4b0b      	ldr	r3, [pc, #44]	@ (8002964 <displayFSM+0xd0>)
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	4618      	mov	r0, r3
 800293a:	f7ff faef 	bl	8001f1c <inputFunction>
		break;
 800293e:	e00e      	b.n	800295e <displayFSM+0xca>

	case DISPLAY_SET_CUSTOM_STRING_INPUT:
		displayFunction(displayState);
 8002940:	4b08      	ldr	r3, [pc, #32]	@ (8002964 <displayFSM+0xd0>)
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	4618      	mov	r0, r3
 8002946:	f7ff fc2d 	bl	80021a4 <displayFunction>
		inputFunction(displayState);
 800294a:	4b06      	ldr	r3, [pc, #24]	@ (8002964 <displayFSM+0xd0>)
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	4618      	mov	r0, r3
 8002950:	f7ff fae4 	bl	8001f1c <inputFunction>
		break;
 8002954:	e003      	b.n	800295e <displayFSM+0xca>

	default:
		uartSendString((uint8_t*)"error displayFSM");
 8002956:	4805      	ldr	r0, [pc, #20]	@ (800296c <displayFSM+0xd8>)
 8002958:	f7fe fe3c 	bl	80015d4 <uartSendString>
		break;
 800295c:	bf00      	nop

	}
}
 800295e:	bf00      	nop
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	200001c8 	.word	0x200001c8
 8002968:	20000130 	.word	0x20000130
 800296c:	08006ba0 	.word	0x08006ba0

08002970 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002974:	4b0e      	ldr	r3, [pc, #56]	@ (80029b0 <HAL_Init+0x40>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a0d      	ldr	r2, [pc, #52]	@ (80029b0 <HAL_Init+0x40>)
 800297a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800297e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002980:	4b0b      	ldr	r3, [pc, #44]	@ (80029b0 <HAL_Init+0x40>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a0a      	ldr	r2, [pc, #40]	@ (80029b0 <HAL_Init+0x40>)
 8002986:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800298a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800298c:	4b08      	ldr	r3, [pc, #32]	@ (80029b0 <HAL_Init+0x40>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a07      	ldr	r2, [pc, #28]	@ (80029b0 <HAL_Init+0x40>)
 8002992:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002996:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002998:	2003      	movs	r0, #3
 800299a:	f000 f94f 	bl	8002c3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800299e:	2000      	movs	r0, #0
 80029a0:	f000 f808 	bl	80029b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029a4:	f7fd fe76 	bl	8000694 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	40023c00 	.word	0x40023c00

080029b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029bc:	4b12      	ldr	r3, [pc, #72]	@ (8002a08 <HAL_InitTick+0x54>)
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	4b12      	ldr	r3, [pc, #72]	@ (8002a0c <HAL_InitTick+0x58>)
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	4619      	mov	r1, r3
 80029c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80029ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80029d2:	4618      	mov	r0, r3
 80029d4:	f000 f967 	bl	8002ca6 <HAL_SYSTICK_Config>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d001      	beq.n	80029e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e00e      	b.n	8002a00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2b0f      	cmp	r3, #15
 80029e6:	d80a      	bhi.n	80029fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029e8:	2200      	movs	r2, #0
 80029ea:	6879      	ldr	r1, [r7, #4]
 80029ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80029f0:	f000 f92f 	bl	8002c52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029f4:	4a06      	ldr	r2, [pc, #24]	@ (8002a10 <HAL_InitTick+0x5c>)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029fa:	2300      	movs	r3, #0
 80029fc:	e000      	b.n	8002a00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3708      	adds	r7, #8
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	20000000 	.word	0x20000000
 8002a0c:	20000010 	.word	0x20000010
 8002a10:	2000000c 	.word	0x2000000c

08002a14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a18:	4b06      	ldr	r3, [pc, #24]	@ (8002a34 <HAL_IncTick+0x20>)
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	4b06      	ldr	r3, [pc, #24]	@ (8002a38 <HAL_IncTick+0x24>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4413      	add	r3, r2
 8002a24:	4a04      	ldr	r2, [pc, #16]	@ (8002a38 <HAL_IncTick+0x24>)
 8002a26:	6013      	str	r3, [r2, #0]
}
 8002a28:	bf00      	nop
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	20000010 	.word	0x20000010
 8002a38:	200001ec 	.word	0x200001ec

08002a3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  return uwTick;
 8002a40:	4b03      	ldr	r3, [pc, #12]	@ (8002a50 <HAL_GetTick+0x14>)
 8002a42:	681b      	ldr	r3, [r3, #0]
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	200001ec 	.word	0x200001ec

08002a54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a5c:	f7ff ffee 	bl	8002a3c <HAL_GetTick>
 8002a60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002a6c:	d005      	beq.n	8002a7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a6e:	4b0a      	ldr	r3, [pc, #40]	@ (8002a98 <HAL_Delay+0x44>)
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	461a      	mov	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	4413      	add	r3, r2
 8002a78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a7a:	bf00      	nop
 8002a7c:	f7ff ffde 	bl	8002a3c <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	68fa      	ldr	r2, [r7, #12]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d8f7      	bhi.n	8002a7c <HAL_Delay+0x28>
  {
  }
}
 8002a8c:	bf00      	nop
 8002a8e:	bf00      	nop
 8002a90:	3710      	adds	r7, #16
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	20000010 	.word	0x20000010

08002a9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b085      	sub	sp, #20
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f003 0307 	and.w	r3, r3, #7
 8002aaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002aac:	4b0c      	ldr	r3, [pc, #48]	@ (8002ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ab2:	68ba      	ldr	r2, [r7, #8]
 8002ab4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ab8:	4013      	ands	r3, r2
 8002aba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ac4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ac8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002acc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ace:	4a04      	ldr	r2, [pc, #16]	@ (8002ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	60d3      	str	r3, [r2, #12]
}
 8002ad4:	bf00      	nop
 8002ad6:	3714      	adds	r7, #20
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr
 8002ae0:	e000ed00 	.word	0xe000ed00

08002ae4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ae8:	4b04      	ldr	r3, [pc, #16]	@ (8002afc <__NVIC_GetPriorityGrouping+0x18>)
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	0a1b      	lsrs	r3, r3, #8
 8002aee:	f003 0307 	and.w	r3, r3, #7
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr
 8002afc:	e000ed00 	.word	0xe000ed00

08002b00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	4603      	mov	r3, r0
 8002b08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	db0b      	blt.n	8002b2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b12:	79fb      	ldrb	r3, [r7, #7]
 8002b14:	f003 021f 	and.w	r2, r3, #31
 8002b18:	4907      	ldr	r1, [pc, #28]	@ (8002b38 <__NVIC_EnableIRQ+0x38>)
 8002b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b1e:	095b      	lsrs	r3, r3, #5
 8002b20:	2001      	movs	r0, #1
 8002b22:	fa00 f202 	lsl.w	r2, r0, r2
 8002b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b2a:	bf00      	nop
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	e000e100 	.word	0xe000e100

08002b3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	4603      	mov	r3, r0
 8002b44:	6039      	str	r1, [r7, #0]
 8002b46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	db0a      	blt.n	8002b66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	b2da      	uxtb	r2, r3
 8002b54:	490c      	ldr	r1, [pc, #48]	@ (8002b88 <__NVIC_SetPriority+0x4c>)
 8002b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5a:	0112      	lsls	r2, r2, #4
 8002b5c:	b2d2      	uxtb	r2, r2
 8002b5e:	440b      	add	r3, r1
 8002b60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b64:	e00a      	b.n	8002b7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	b2da      	uxtb	r2, r3
 8002b6a:	4908      	ldr	r1, [pc, #32]	@ (8002b8c <__NVIC_SetPriority+0x50>)
 8002b6c:	79fb      	ldrb	r3, [r7, #7]
 8002b6e:	f003 030f 	and.w	r3, r3, #15
 8002b72:	3b04      	subs	r3, #4
 8002b74:	0112      	lsls	r2, r2, #4
 8002b76:	b2d2      	uxtb	r2, r2
 8002b78:	440b      	add	r3, r1
 8002b7a:	761a      	strb	r2, [r3, #24]
}
 8002b7c:	bf00      	nop
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr
 8002b88:	e000e100 	.word	0xe000e100
 8002b8c:	e000ed00 	.word	0xe000ed00

08002b90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b089      	sub	sp, #36	@ 0x24
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f003 0307 	and.w	r3, r3, #7
 8002ba2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	f1c3 0307 	rsb	r3, r3, #7
 8002baa:	2b04      	cmp	r3, #4
 8002bac:	bf28      	it	cs
 8002bae:	2304      	movcs	r3, #4
 8002bb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	3304      	adds	r3, #4
 8002bb6:	2b06      	cmp	r3, #6
 8002bb8:	d902      	bls.n	8002bc0 <NVIC_EncodePriority+0x30>
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	3b03      	subs	r3, #3
 8002bbe:	e000      	b.n	8002bc2 <NVIC_EncodePriority+0x32>
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bc4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	fa02 f303 	lsl.w	r3, r2, r3
 8002bce:	43da      	mvns	r2, r3
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	401a      	ands	r2, r3
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bd8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	fa01 f303 	lsl.w	r3, r1, r3
 8002be2:	43d9      	mvns	r1, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002be8:	4313      	orrs	r3, r2
         );
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3724      	adds	r7, #36	@ 0x24
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
	...

08002bf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	3b01      	subs	r3, #1
 8002c04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c08:	d301      	bcc.n	8002c0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e00f      	b.n	8002c2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c0e:	4a0a      	ldr	r2, [pc, #40]	@ (8002c38 <SysTick_Config+0x40>)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	3b01      	subs	r3, #1
 8002c14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c16:	210f      	movs	r1, #15
 8002c18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002c1c:	f7ff ff8e 	bl	8002b3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c20:	4b05      	ldr	r3, [pc, #20]	@ (8002c38 <SysTick_Config+0x40>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c26:	4b04      	ldr	r3, [pc, #16]	@ (8002c38 <SysTick_Config+0x40>)
 8002c28:	2207      	movs	r2, #7
 8002c2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3708      	adds	r7, #8
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	e000e010 	.word	0xe000e010

08002c3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f7ff ff29 	bl	8002a9c <__NVIC_SetPriorityGrouping>
}
 8002c4a:	bf00      	nop
 8002c4c:	3708      	adds	r7, #8
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b086      	sub	sp, #24
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	4603      	mov	r3, r0
 8002c5a:	60b9      	str	r1, [r7, #8]
 8002c5c:	607a      	str	r2, [r7, #4]
 8002c5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c60:	2300      	movs	r3, #0
 8002c62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c64:	f7ff ff3e 	bl	8002ae4 <__NVIC_GetPriorityGrouping>
 8002c68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	68b9      	ldr	r1, [r7, #8]
 8002c6e:	6978      	ldr	r0, [r7, #20]
 8002c70:	f7ff ff8e 	bl	8002b90 <NVIC_EncodePriority>
 8002c74:	4602      	mov	r2, r0
 8002c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c7a:	4611      	mov	r1, r2
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7ff ff5d 	bl	8002b3c <__NVIC_SetPriority>
}
 8002c82:	bf00      	nop
 8002c84:	3718      	adds	r7, #24
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b082      	sub	sp, #8
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	4603      	mov	r3, r0
 8002c92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7ff ff31 	bl	8002b00 <__NVIC_EnableIRQ>
}
 8002c9e:	bf00      	nop
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b082      	sub	sp, #8
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f7ff ffa2 	bl	8002bf8 <SysTick_Config>
 8002cb4:	4603      	mov	r3, r0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b084      	sub	sp, #16
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cca:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002ccc:	f7ff feb6 	bl	8002a3c <HAL_GetTick>
 8002cd0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d008      	beq.n	8002cf0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2280      	movs	r2, #128	@ 0x80
 8002ce2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e052      	b.n	8002d96 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f022 0216 	bic.w	r2, r2, #22
 8002cfe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	695a      	ldr	r2, [r3, #20]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002d0e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d103      	bne.n	8002d20 <HAL_DMA_Abort+0x62>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d007      	beq.n	8002d30 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f022 0208 	bic.w	r2, r2, #8
 8002d2e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f022 0201 	bic.w	r2, r2, #1
 8002d3e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d40:	e013      	b.n	8002d6a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d42:	f7ff fe7b 	bl	8002a3c <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	2b05      	cmp	r3, #5
 8002d4e:	d90c      	bls.n	8002d6a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2220      	movs	r2, #32
 8002d54:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2203      	movs	r2, #3
 8002d5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e015      	b.n	8002d96 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0301 	and.w	r3, r3, #1
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d1e4      	bne.n	8002d42 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d7c:	223f      	movs	r2, #63	@ 0x3f
 8002d7e:	409a      	lsls	r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3710      	adds	r7, #16
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b083      	sub	sp, #12
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d004      	beq.n	8002dbc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2280      	movs	r2, #128	@ 0x80
 8002db6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e00c      	b.n	8002dd6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2205      	movs	r2, #5
 8002dc0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f022 0201 	bic.w	r2, r2, #1
 8002dd2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
	...

08002de4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b089      	sub	sp, #36	@ 0x24
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002dee:	2300      	movs	r3, #0
 8002df0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002df2:	2300      	movs	r3, #0
 8002df4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002df6:	2300      	movs	r3, #0
 8002df8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	61fb      	str	r3, [r7, #28]
 8002dfe:	e177      	b.n	80030f0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e00:	2201      	movs	r2, #1
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	fa02 f303 	lsl.w	r3, r2, r3
 8002e08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	697a      	ldr	r2, [r7, #20]
 8002e10:	4013      	ands	r3, r2
 8002e12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e14:	693a      	ldr	r2, [r7, #16]
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	f040 8166 	bne.w	80030ea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f003 0303 	and.w	r3, r3, #3
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d005      	beq.n	8002e36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d130      	bne.n	8002e98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	005b      	lsls	r3, r3, #1
 8002e40:	2203      	movs	r2, #3
 8002e42:	fa02 f303 	lsl.w	r3, r2, r3
 8002e46:	43db      	mvns	r3, r3
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	68da      	ldr	r2, [r3, #12]
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	005b      	lsls	r3, r3, #1
 8002e56:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5a:	69ba      	ldr	r2, [r7, #24]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	69ba      	ldr	r2, [r7, #24]
 8002e64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	fa02 f303 	lsl.w	r3, r2, r3
 8002e74:	43db      	mvns	r3, r3
 8002e76:	69ba      	ldr	r2, [r7, #24]
 8002e78:	4013      	ands	r3, r2
 8002e7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	091b      	lsrs	r3, r3, #4
 8002e82:	f003 0201 	and.w	r2, r3, #1
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f003 0303 	and.w	r3, r3, #3
 8002ea0:	2b03      	cmp	r3, #3
 8002ea2:	d017      	beq.n	8002ed4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	005b      	lsls	r3, r3, #1
 8002eae:	2203      	movs	r2, #3
 8002eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb4:	43db      	mvns	r3, r3
 8002eb6:	69ba      	ldr	r2, [r7, #24]
 8002eb8:	4013      	ands	r3, r2
 8002eba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	689a      	ldr	r2, [r3, #8]
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	005b      	lsls	r3, r3, #1
 8002ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f003 0303 	and.w	r3, r3, #3
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d123      	bne.n	8002f28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	08da      	lsrs	r2, r3, #3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	3208      	adds	r2, #8
 8002ee8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002eec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	f003 0307 	and.w	r3, r3, #7
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	220f      	movs	r2, #15
 8002ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8002efc:	43db      	mvns	r3, r3
 8002efe:	69ba      	ldr	r2, [r7, #24]
 8002f00:	4013      	ands	r3, r2
 8002f02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	691a      	ldr	r2, [r3, #16]
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	f003 0307 	and.w	r3, r3, #7
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	fa02 f303 	lsl.w	r3, r2, r3
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	08da      	lsrs	r2, r3, #3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	3208      	adds	r2, #8
 8002f22:	69b9      	ldr	r1, [r7, #24]
 8002f24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	005b      	lsls	r3, r3, #1
 8002f32:	2203      	movs	r2, #3
 8002f34:	fa02 f303 	lsl.w	r3, r2, r3
 8002f38:	43db      	mvns	r3, r3
 8002f3a:	69ba      	ldr	r2, [r7, #24]
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f003 0203 	and.w	r2, r3, #3
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	69ba      	ldr	r2, [r7, #24]
 8002f5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	f000 80c0 	beq.w	80030ea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	60fb      	str	r3, [r7, #12]
 8002f6e:	4b66      	ldr	r3, [pc, #408]	@ (8003108 <HAL_GPIO_Init+0x324>)
 8002f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f72:	4a65      	ldr	r2, [pc, #404]	@ (8003108 <HAL_GPIO_Init+0x324>)
 8002f74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f78:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f7a:	4b63      	ldr	r3, [pc, #396]	@ (8003108 <HAL_GPIO_Init+0x324>)
 8002f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f82:	60fb      	str	r3, [r7, #12]
 8002f84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f86:	4a61      	ldr	r2, [pc, #388]	@ (800310c <HAL_GPIO_Init+0x328>)
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	089b      	lsrs	r3, r3, #2
 8002f8c:	3302      	adds	r3, #2
 8002f8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	f003 0303 	and.w	r3, r3, #3
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	220f      	movs	r2, #15
 8002f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa2:	43db      	mvns	r3, r3
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a58      	ldr	r2, [pc, #352]	@ (8003110 <HAL_GPIO_Init+0x32c>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d037      	beq.n	8003022 <HAL_GPIO_Init+0x23e>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a57      	ldr	r2, [pc, #348]	@ (8003114 <HAL_GPIO_Init+0x330>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d031      	beq.n	800301e <HAL_GPIO_Init+0x23a>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a56      	ldr	r2, [pc, #344]	@ (8003118 <HAL_GPIO_Init+0x334>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d02b      	beq.n	800301a <HAL_GPIO_Init+0x236>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a55      	ldr	r2, [pc, #340]	@ (800311c <HAL_GPIO_Init+0x338>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d025      	beq.n	8003016 <HAL_GPIO_Init+0x232>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a54      	ldr	r2, [pc, #336]	@ (8003120 <HAL_GPIO_Init+0x33c>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d01f      	beq.n	8003012 <HAL_GPIO_Init+0x22e>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a53      	ldr	r2, [pc, #332]	@ (8003124 <HAL_GPIO_Init+0x340>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d019      	beq.n	800300e <HAL_GPIO_Init+0x22a>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a52      	ldr	r2, [pc, #328]	@ (8003128 <HAL_GPIO_Init+0x344>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d013      	beq.n	800300a <HAL_GPIO_Init+0x226>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a51      	ldr	r2, [pc, #324]	@ (800312c <HAL_GPIO_Init+0x348>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d00d      	beq.n	8003006 <HAL_GPIO_Init+0x222>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a50      	ldr	r2, [pc, #320]	@ (8003130 <HAL_GPIO_Init+0x34c>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d007      	beq.n	8003002 <HAL_GPIO_Init+0x21e>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a4f      	ldr	r2, [pc, #316]	@ (8003134 <HAL_GPIO_Init+0x350>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d101      	bne.n	8002ffe <HAL_GPIO_Init+0x21a>
 8002ffa:	2309      	movs	r3, #9
 8002ffc:	e012      	b.n	8003024 <HAL_GPIO_Init+0x240>
 8002ffe:	230a      	movs	r3, #10
 8003000:	e010      	b.n	8003024 <HAL_GPIO_Init+0x240>
 8003002:	2308      	movs	r3, #8
 8003004:	e00e      	b.n	8003024 <HAL_GPIO_Init+0x240>
 8003006:	2307      	movs	r3, #7
 8003008:	e00c      	b.n	8003024 <HAL_GPIO_Init+0x240>
 800300a:	2306      	movs	r3, #6
 800300c:	e00a      	b.n	8003024 <HAL_GPIO_Init+0x240>
 800300e:	2305      	movs	r3, #5
 8003010:	e008      	b.n	8003024 <HAL_GPIO_Init+0x240>
 8003012:	2304      	movs	r3, #4
 8003014:	e006      	b.n	8003024 <HAL_GPIO_Init+0x240>
 8003016:	2303      	movs	r3, #3
 8003018:	e004      	b.n	8003024 <HAL_GPIO_Init+0x240>
 800301a:	2302      	movs	r3, #2
 800301c:	e002      	b.n	8003024 <HAL_GPIO_Init+0x240>
 800301e:	2301      	movs	r3, #1
 8003020:	e000      	b.n	8003024 <HAL_GPIO_Init+0x240>
 8003022:	2300      	movs	r3, #0
 8003024:	69fa      	ldr	r2, [r7, #28]
 8003026:	f002 0203 	and.w	r2, r2, #3
 800302a:	0092      	lsls	r2, r2, #2
 800302c:	4093      	lsls	r3, r2
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	4313      	orrs	r3, r2
 8003032:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003034:	4935      	ldr	r1, [pc, #212]	@ (800310c <HAL_GPIO_Init+0x328>)
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	089b      	lsrs	r3, r3, #2
 800303a:	3302      	adds	r3, #2
 800303c:	69ba      	ldr	r2, [r7, #24]
 800303e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003042:	4b3d      	ldr	r3, [pc, #244]	@ (8003138 <HAL_GPIO_Init+0x354>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	43db      	mvns	r3, r3
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	4013      	ands	r3, r2
 8003050:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d003      	beq.n	8003066 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800305e:	69ba      	ldr	r2, [r7, #24]
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	4313      	orrs	r3, r2
 8003064:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003066:	4a34      	ldr	r2, [pc, #208]	@ (8003138 <HAL_GPIO_Init+0x354>)
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800306c:	4b32      	ldr	r3, [pc, #200]	@ (8003138 <HAL_GPIO_Init+0x354>)
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	43db      	mvns	r3, r3
 8003076:	69ba      	ldr	r2, [r7, #24]
 8003078:	4013      	ands	r3, r2
 800307a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d003      	beq.n	8003090 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	4313      	orrs	r3, r2
 800308e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003090:	4a29      	ldr	r2, [pc, #164]	@ (8003138 <HAL_GPIO_Init+0x354>)
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003096:	4b28      	ldr	r3, [pc, #160]	@ (8003138 <HAL_GPIO_Init+0x354>)
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	43db      	mvns	r3, r3
 80030a0:	69ba      	ldr	r2, [r7, #24]
 80030a2:	4013      	ands	r3, r2
 80030a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d003      	beq.n	80030ba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80030b2:	69ba      	ldr	r2, [r7, #24]
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030ba:	4a1f      	ldr	r2, [pc, #124]	@ (8003138 <HAL_GPIO_Init+0x354>)
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030c0:	4b1d      	ldr	r3, [pc, #116]	@ (8003138 <HAL_GPIO_Init+0x354>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	43db      	mvns	r3, r3
 80030ca:	69ba      	ldr	r2, [r7, #24]
 80030cc:	4013      	ands	r3, r2
 80030ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d003      	beq.n	80030e4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030e4:	4a14      	ldr	r2, [pc, #80]	@ (8003138 <HAL_GPIO_Init+0x354>)
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	3301      	adds	r3, #1
 80030ee:	61fb      	str	r3, [r7, #28]
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	2b0f      	cmp	r3, #15
 80030f4:	f67f ae84 	bls.w	8002e00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80030f8:	bf00      	nop
 80030fa:	bf00      	nop
 80030fc:	3724      	adds	r7, #36	@ 0x24
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	40023800 	.word	0x40023800
 800310c:	40013800 	.word	0x40013800
 8003110:	40020000 	.word	0x40020000
 8003114:	40020400 	.word	0x40020400
 8003118:	40020800 	.word	0x40020800
 800311c:	40020c00 	.word	0x40020c00
 8003120:	40021000 	.word	0x40021000
 8003124:	40021400 	.word	0x40021400
 8003128:	40021800 	.word	0x40021800
 800312c:	40021c00 	.word	0x40021c00
 8003130:	40022000 	.word	0x40022000
 8003134:	40022400 	.word	0x40022400
 8003138:	40013c00 	.word	0x40013c00

0800313c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	460b      	mov	r3, r1
 8003146:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	691a      	ldr	r2, [r3, #16]
 800314c:	887b      	ldrh	r3, [r7, #2]
 800314e:	4013      	ands	r3, r2
 8003150:	2b00      	cmp	r3, #0
 8003152:	d002      	beq.n	800315a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003154:	2301      	movs	r3, #1
 8003156:	73fb      	strb	r3, [r7, #15]
 8003158:	e001      	b.n	800315e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800315a:	2300      	movs	r3, #0
 800315c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800315e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003160:	4618      	mov	r0, r3
 8003162:	3714      	adds	r7, #20
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	460b      	mov	r3, r1
 8003176:	807b      	strh	r3, [r7, #2]
 8003178:	4613      	mov	r3, r2
 800317a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800317c:	787b      	ldrb	r3, [r7, #1]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d003      	beq.n	800318a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003182:	887a      	ldrh	r2, [r7, #2]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003188:	e003      	b.n	8003192 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800318a:	887b      	ldrh	r3, [r7, #2]
 800318c:	041a      	lsls	r2, r3, #16
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	619a      	str	r2, [r3, #24]
}
 8003192:	bf00      	nop
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
	...

080031a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d101      	bne.n	80031b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e12b      	b.n	800340a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d106      	bne.n	80031cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f7fd fa8c 	bl	80006e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2224      	movs	r2, #36	@ 0x24
 80031d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f022 0201 	bic.w	r2, r2, #1
 80031e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80031f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003202:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003204:	f001 fcb2 	bl	8004b6c <HAL_RCC_GetPCLK1Freq>
 8003208:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	4a81      	ldr	r2, [pc, #516]	@ (8003414 <HAL_I2C_Init+0x274>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d807      	bhi.n	8003224 <HAL_I2C_Init+0x84>
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	4a80      	ldr	r2, [pc, #512]	@ (8003418 <HAL_I2C_Init+0x278>)
 8003218:	4293      	cmp	r3, r2
 800321a:	bf94      	ite	ls
 800321c:	2301      	movls	r3, #1
 800321e:	2300      	movhi	r3, #0
 8003220:	b2db      	uxtb	r3, r3
 8003222:	e006      	b.n	8003232 <HAL_I2C_Init+0x92>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	4a7d      	ldr	r2, [pc, #500]	@ (800341c <HAL_I2C_Init+0x27c>)
 8003228:	4293      	cmp	r3, r2
 800322a:	bf94      	ite	ls
 800322c:	2301      	movls	r3, #1
 800322e:	2300      	movhi	r3, #0
 8003230:	b2db      	uxtb	r3, r3
 8003232:	2b00      	cmp	r3, #0
 8003234:	d001      	beq.n	800323a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e0e7      	b.n	800340a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	4a78      	ldr	r2, [pc, #480]	@ (8003420 <HAL_I2C_Init+0x280>)
 800323e:	fba2 2303 	umull	r2, r3, r2, r3
 8003242:	0c9b      	lsrs	r3, r3, #18
 8003244:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68ba      	ldr	r2, [r7, #8]
 8003256:	430a      	orrs	r2, r1
 8003258:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	6a1b      	ldr	r3, [r3, #32]
 8003260:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	4a6a      	ldr	r2, [pc, #424]	@ (8003414 <HAL_I2C_Init+0x274>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d802      	bhi.n	8003274 <HAL_I2C_Init+0xd4>
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	3301      	adds	r3, #1
 8003272:	e009      	b.n	8003288 <HAL_I2C_Init+0xe8>
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800327a:	fb02 f303 	mul.w	r3, r2, r3
 800327e:	4a69      	ldr	r2, [pc, #420]	@ (8003424 <HAL_I2C_Init+0x284>)
 8003280:	fba2 2303 	umull	r2, r3, r2, r3
 8003284:	099b      	lsrs	r3, r3, #6
 8003286:	3301      	adds	r3, #1
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	6812      	ldr	r2, [r2, #0]
 800328c:	430b      	orrs	r3, r1
 800328e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	69db      	ldr	r3, [r3, #28]
 8003296:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800329a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	495c      	ldr	r1, [pc, #368]	@ (8003414 <HAL_I2C_Init+0x274>)
 80032a4:	428b      	cmp	r3, r1
 80032a6:	d819      	bhi.n	80032dc <HAL_I2C_Init+0x13c>
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	1e59      	subs	r1, r3, #1
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	005b      	lsls	r3, r3, #1
 80032b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80032b6:	1c59      	adds	r1, r3, #1
 80032b8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80032bc:	400b      	ands	r3, r1
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00a      	beq.n	80032d8 <HAL_I2C_Init+0x138>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	1e59      	subs	r1, r3, #1
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80032d0:	3301      	adds	r3, #1
 80032d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032d6:	e051      	b.n	800337c <HAL_I2C_Init+0x1dc>
 80032d8:	2304      	movs	r3, #4
 80032da:	e04f      	b.n	800337c <HAL_I2C_Init+0x1dc>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d111      	bne.n	8003308 <HAL_I2C_Init+0x168>
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	1e58      	subs	r0, r3, #1
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6859      	ldr	r1, [r3, #4]
 80032ec:	460b      	mov	r3, r1
 80032ee:	005b      	lsls	r3, r3, #1
 80032f0:	440b      	add	r3, r1
 80032f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80032f6:	3301      	adds	r3, #1
 80032f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	bf0c      	ite	eq
 8003300:	2301      	moveq	r3, #1
 8003302:	2300      	movne	r3, #0
 8003304:	b2db      	uxtb	r3, r3
 8003306:	e012      	b.n	800332e <HAL_I2C_Init+0x18e>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	1e58      	subs	r0, r3, #1
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6859      	ldr	r1, [r3, #4]
 8003310:	460b      	mov	r3, r1
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	440b      	add	r3, r1
 8003316:	0099      	lsls	r1, r3, #2
 8003318:	440b      	add	r3, r1
 800331a:	fbb0 f3f3 	udiv	r3, r0, r3
 800331e:	3301      	adds	r3, #1
 8003320:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003324:	2b00      	cmp	r3, #0
 8003326:	bf0c      	ite	eq
 8003328:	2301      	moveq	r3, #1
 800332a:	2300      	movne	r3, #0
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <HAL_I2C_Init+0x196>
 8003332:	2301      	movs	r3, #1
 8003334:	e022      	b.n	800337c <HAL_I2C_Init+0x1dc>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d10e      	bne.n	800335c <HAL_I2C_Init+0x1bc>
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	1e58      	subs	r0, r3, #1
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6859      	ldr	r1, [r3, #4]
 8003346:	460b      	mov	r3, r1
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	440b      	add	r3, r1
 800334c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003350:	3301      	adds	r3, #1
 8003352:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003356:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800335a:	e00f      	b.n	800337c <HAL_I2C_Init+0x1dc>
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	1e58      	subs	r0, r3, #1
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6859      	ldr	r1, [r3, #4]
 8003364:	460b      	mov	r3, r1
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	440b      	add	r3, r1
 800336a:	0099      	lsls	r1, r3, #2
 800336c:	440b      	add	r3, r1
 800336e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003372:	3301      	adds	r3, #1
 8003374:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003378:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800337c:	6879      	ldr	r1, [r7, #4]
 800337e:	6809      	ldr	r1, [r1, #0]
 8003380:	4313      	orrs	r3, r2
 8003382:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	69da      	ldr	r2, [r3, #28]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a1b      	ldr	r3, [r3, #32]
 8003396:	431a      	orrs	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	430a      	orrs	r2, r1
 800339e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80033aa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	6911      	ldr	r1, [r2, #16]
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	68d2      	ldr	r2, [r2, #12]
 80033b6:	4311      	orrs	r1, r2
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	6812      	ldr	r2, [r2, #0]
 80033bc:	430b      	orrs	r3, r1
 80033be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	695a      	ldr	r2, [r3, #20]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	431a      	orrs	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	430a      	orrs	r2, r1
 80033da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f042 0201 	orr.w	r2, r2, #1
 80033ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2220      	movs	r2, #32
 80033f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3710      	adds	r7, #16
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	000186a0 	.word	0x000186a0
 8003418:	001e847f 	.word	0x001e847f
 800341c:	003d08ff 	.word	0x003d08ff
 8003420:	431bde83 	.word	0x431bde83
 8003424:	10624dd3 	.word	0x10624dd3

08003428 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b088      	sub	sp, #32
 800342c:	af02      	add	r7, sp, #8
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	607a      	str	r2, [r7, #4]
 8003432:	461a      	mov	r2, r3
 8003434:	460b      	mov	r3, r1
 8003436:	817b      	strh	r3, [r7, #10]
 8003438:	4613      	mov	r3, r2
 800343a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800343c:	f7ff fafe 	bl	8002a3c <HAL_GetTick>
 8003440:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b20      	cmp	r3, #32
 800344c:	f040 80e0 	bne.w	8003610 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	9300      	str	r3, [sp, #0]
 8003454:	2319      	movs	r3, #25
 8003456:	2201      	movs	r2, #1
 8003458:	4970      	ldr	r1, [pc, #448]	@ (800361c <HAL_I2C_Master_Transmit+0x1f4>)
 800345a:	68f8      	ldr	r0, [r7, #12]
 800345c:	f000 fc64 	bl	8003d28 <I2C_WaitOnFlagUntilTimeout>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d001      	beq.n	800346a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003466:	2302      	movs	r3, #2
 8003468:	e0d3      	b.n	8003612 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003470:	2b01      	cmp	r3, #1
 8003472:	d101      	bne.n	8003478 <HAL_I2C_Master_Transmit+0x50>
 8003474:	2302      	movs	r3, #2
 8003476:	e0cc      	b.n	8003612 <HAL_I2C_Master_Transmit+0x1ea>
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	2b01      	cmp	r3, #1
 800348c:	d007      	beq.n	800349e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f042 0201 	orr.w	r2, r2, #1
 800349c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034ac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2221      	movs	r2, #33	@ 0x21
 80034b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2210      	movs	r2, #16
 80034ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2200      	movs	r2, #0
 80034c2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	893a      	ldrh	r2, [r7, #8]
 80034ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	4a50      	ldr	r2, [pc, #320]	@ (8003620 <HAL_I2C_Master_Transmit+0x1f8>)
 80034de:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80034e0:	8979      	ldrh	r1, [r7, #10]
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	6a3a      	ldr	r2, [r7, #32]
 80034e6:	68f8      	ldr	r0, [r7, #12]
 80034e8:	f000 face 	bl	8003a88 <I2C_MasterRequestWrite>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d001      	beq.n	80034f6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e08d      	b.n	8003612 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034f6:	2300      	movs	r3, #0
 80034f8:	613b      	str	r3, [r7, #16]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	695b      	ldr	r3, [r3, #20]
 8003500:	613b      	str	r3, [r7, #16]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	699b      	ldr	r3, [r3, #24]
 8003508:	613b      	str	r3, [r7, #16]
 800350a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800350c:	e066      	b.n	80035dc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800350e:	697a      	ldr	r2, [r7, #20]
 8003510:	6a39      	ldr	r1, [r7, #32]
 8003512:	68f8      	ldr	r0, [r7, #12]
 8003514:	f000 fd22 	bl	8003f5c <I2C_WaitOnTXEFlagUntilTimeout>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00d      	beq.n	800353a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003522:	2b04      	cmp	r3, #4
 8003524:	d107      	bne.n	8003536 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003534:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e06b      	b.n	8003612 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800353e:	781a      	ldrb	r2, [r3, #0]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800354a:	1c5a      	adds	r2, r3, #1
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003554:	b29b      	uxth	r3, r3
 8003556:	3b01      	subs	r3, #1
 8003558:	b29a      	uxth	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003562:	3b01      	subs	r3, #1
 8003564:	b29a      	uxth	r2, r3
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	695b      	ldr	r3, [r3, #20]
 8003570:	f003 0304 	and.w	r3, r3, #4
 8003574:	2b04      	cmp	r3, #4
 8003576:	d11b      	bne.n	80035b0 <HAL_I2C_Master_Transmit+0x188>
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800357c:	2b00      	cmp	r3, #0
 800357e:	d017      	beq.n	80035b0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003584:	781a      	ldrb	r2, [r3, #0]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003590:	1c5a      	adds	r2, r3, #1
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800359a:	b29b      	uxth	r3, r3
 800359c:	3b01      	subs	r3, #1
 800359e:	b29a      	uxth	r2, r3
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035a8:	3b01      	subs	r3, #1
 80035aa:	b29a      	uxth	r2, r3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035b0:	697a      	ldr	r2, [r7, #20]
 80035b2:	6a39      	ldr	r1, [r7, #32]
 80035b4:	68f8      	ldr	r0, [r7, #12]
 80035b6:	f000 fd19 	bl	8003fec <I2C_WaitOnBTFFlagUntilTimeout>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d00d      	beq.n	80035dc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c4:	2b04      	cmp	r3, #4
 80035c6:	d107      	bne.n	80035d8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035d6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e01a      	b.n	8003612 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d194      	bne.n	800350e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2220      	movs	r2, #32
 80035f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800360c:	2300      	movs	r3, #0
 800360e:	e000      	b.n	8003612 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003610:	2302      	movs	r3, #2
  }
}
 8003612:	4618      	mov	r0, r3
 8003614:	3718      	adds	r7, #24
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	00100002 	.word	0x00100002
 8003620:	ffff0000 	.word	0xffff0000

08003624 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b08c      	sub	sp, #48	@ 0x30
 8003628:	af02      	add	r7, sp, #8
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	607a      	str	r2, [r7, #4]
 800362e:	461a      	mov	r2, r3
 8003630:	460b      	mov	r3, r1
 8003632:	817b      	strh	r3, [r7, #10]
 8003634:	4613      	mov	r3, r2
 8003636:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003638:	f7ff fa00 	bl	8002a3c <HAL_GetTick>
 800363c:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b20      	cmp	r3, #32
 8003648:	f040 8217 	bne.w	8003a7a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800364c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800364e:	9300      	str	r3, [sp, #0]
 8003650:	2319      	movs	r3, #25
 8003652:	2201      	movs	r2, #1
 8003654:	497c      	ldr	r1, [pc, #496]	@ (8003848 <HAL_I2C_Master_Receive+0x224>)
 8003656:	68f8      	ldr	r0, [r7, #12]
 8003658:	f000 fb66 	bl	8003d28 <I2C_WaitOnFlagUntilTimeout>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d001      	beq.n	8003666 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003662:	2302      	movs	r3, #2
 8003664:	e20a      	b.n	8003a7c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800366c:	2b01      	cmp	r3, #1
 800366e:	d101      	bne.n	8003674 <HAL_I2C_Master_Receive+0x50>
 8003670:	2302      	movs	r3, #2
 8003672:	e203      	b.n	8003a7c <HAL_I2C_Master_Receive+0x458>
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	2b01      	cmp	r3, #1
 8003688:	d007      	beq.n	800369a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f042 0201 	orr.w	r2, r2, #1
 8003698:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036a8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2222      	movs	r2, #34	@ 0x22
 80036ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2210      	movs	r2, #16
 80036b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2200      	movs	r2, #0
 80036be:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	893a      	ldrh	r2, [r7, #8]
 80036ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036d0:	b29a      	uxth	r2, r3
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	4a5c      	ldr	r2, [pc, #368]	@ (800384c <HAL_I2C_Master_Receive+0x228>)
 80036da:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80036dc:	8979      	ldrh	r1, [r7, #10]
 80036de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036e2:	68f8      	ldr	r0, [r7, #12]
 80036e4:	f000 fa52 	bl	8003b8c <I2C_MasterRequestRead>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d001      	beq.n	80036f2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e1c4      	b.n	8003a7c <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d113      	bne.n	8003722 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036fa:	2300      	movs	r3, #0
 80036fc:	623b      	str	r3, [r7, #32]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	695b      	ldr	r3, [r3, #20]
 8003704:	623b      	str	r3, [r7, #32]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	699b      	ldr	r3, [r3, #24]
 800370c:	623b      	str	r3, [r7, #32]
 800370e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800371e:	601a      	str	r2, [r3, #0]
 8003720:	e198      	b.n	8003a54 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003726:	2b01      	cmp	r3, #1
 8003728:	d11b      	bne.n	8003762 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003738:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800373a:	2300      	movs	r3, #0
 800373c:	61fb      	str	r3, [r7, #28]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	695b      	ldr	r3, [r3, #20]
 8003744:	61fb      	str	r3, [r7, #28]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	61fb      	str	r3, [r7, #28]
 800374e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800375e:	601a      	str	r2, [r3, #0]
 8003760:	e178      	b.n	8003a54 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003766:	2b02      	cmp	r3, #2
 8003768:	d11b      	bne.n	80037a2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003778:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003788:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800378a:	2300      	movs	r3, #0
 800378c:	61bb      	str	r3, [r7, #24]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	695b      	ldr	r3, [r3, #20]
 8003794:	61bb      	str	r3, [r7, #24]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	699b      	ldr	r3, [r3, #24]
 800379c:	61bb      	str	r3, [r7, #24]
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	e158      	b.n	8003a54 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80037b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037b2:	2300      	movs	r3, #0
 80037b4:	617b      	str	r3, [r7, #20]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	695b      	ldr	r3, [r3, #20]
 80037bc:	617b      	str	r3, [r7, #20]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	699b      	ldr	r3, [r3, #24]
 80037c4:	617b      	str	r3, [r7, #20]
 80037c6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80037c8:	e144      	b.n	8003a54 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037ce:	2b03      	cmp	r3, #3
 80037d0:	f200 80f1 	bhi.w	80039b6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d123      	bne.n	8003824 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037de:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80037e0:	68f8      	ldr	r0, [r7, #12]
 80037e2:	f000 fc4b 	bl	800407c <I2C_WaitOnRXNEFlagUntilTimeout>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d001      	beq.n	80037f0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e145      	b.n	8003a7c <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	691a      	ldr	r2, [r3, #16]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037fa:	b2d2      	uxtb	r2, r2
 80037fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003802:	1c5a      	adds	r2, r3, #1
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800380c:	3b01      	subs	r3, #1
 800380e:	b29a      	uxth	r2, r3
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003818:	b29b      	uxth	r3, r3
 800381a:	3b01      	subs	r3, #1
 800381c:	b29a      	uxth	r2, r3
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003822:	e117      	b.n	8003a54 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003828:	2b02      	cmp	r3, #2
 800382a:	d14e      	bne.n	80038ca <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800382c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800382e:	9300      	str	r3, [sp, #0]
 8003830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003832:	2200      	movs	r2, #0
 8003834:	4906      	ldr	r1, [pc, #24]	@ (8003850 <HAL_I2C_Master_Receive+0x22c>)
 8003836:	68f8      	ldr	r0, [r7, #12]
 8003838:	f000 fa76 	bl	8003d28 <I2C_WaitOnFlagUntilTimeout>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d008      	beq.n	8003854 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e11a      	b.n	8003a7c <HAL_I2C_Master_Receive+0x458>
 8003846:	bf00      	nop
 8003848:	00100002 	.word	0x00100002
 800384c:	ffff0000 	.word	0xffff0000
 8003850:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003862:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	691a      	ldr	r2, [r3, #16]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800386e:	b2d2      	uxtb	r2, r2
 8003870:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003876:	1c5a      	adds	r2, r3, #1
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003880:	3b01      	subs	r3, #1
 8003882:	b29a      	uxth	r2, r3
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800388c:	b29b      	uxth	r3, r3
 800388e:	3b01      	subs	r3, #1
 8003890:	b29a      	uxth	r2, r3
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	691a      	ldr	r2, [r3, #16]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a0:	b2d2      	uxtb	r2, r2
 80038a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a8:	1c5a      	adds	r2, r3, #1
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038b2:	3b01      	subs	r3, #1
 80038b4:	b29a      	uxth	r2, r3
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038be:	b29b      	uxth	r3, r3
 80038c0:	3b01      	subs	r3, #1
 80038c2:	b29a      	uxth	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80038c8:	e0c4      	b.n	8003a54 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038cc:	9300      	str	r3, [sp, #0]
 80038ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038d0:	2200      	movs	r2, #0
 80038d2:	496c      	ldr	r1, [pc, #432]	@ (8003a84 <HAL_I2C_Master_Receive+0x460>)
 80038d4:	68f8      	ldr	r0, [r7, #12]
 80038d6:	f000 fa27 	bl	8003d28 <I2C_WaitOnFlagUntilTimeout>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d001      	beq.n	80038e4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e0cb      	b.n	8003a7c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	691a      	ldr	r2, [r3, #16]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038fe:	b2d2      	uxtb	r2, r2
 8003900:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003906:	1c5a      	adds	r2, r3, #1
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003910:	3b01      	subs	r3, #1
 8003912:	b29a      	uxth	r2, r3
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800391c:	b29b      	uxth	r3, r3
 800391e:	3b01      	subs	r3, #1
 8003920:	b29a      	uxth	r2, r3
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003928:	9300      	str	r3, [sp, #0]
 800392a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800392c:	2200      	movs	r2, #0
 800392e:	4955      	ldr	r1, [pc, #340]	@ (8003a84 <HAL_I2C_Master_Receive+0x460>)
 8003930:	68f8      	ldr	r0, [r7, #12]
 8003932:	f000 f9f9 	bl	8003d28 <I2C_WaitOnFlagUntilTimeout>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d001      	beq.n	8003940 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e09d      	b.n	8003a7c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800394e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	691a      	ldr	r2, [r3, #16]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800395a:	b2d2      	uxtb	r2, r2
 800395c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003962:	1c5a      	adds	r2, r3, #1
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800396c:	3b01      	subs	r3, #1
 800396e:	b29a      	uxth	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003978:	b29b      	uxth	r3, r3
 800397a:	3b01      	subs	r3, #1
 800397c:	b29a      	uxth	r2, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	691a      	ldr	r2, [r3, #16]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800398c:	b2d2      	uxtb	r2, r2
 800398e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003994:	1c5a      	adds	r2, r3, #1
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800399e:	3b01      	subs	r3, #1
 80039a0:	b29a      	uxth	r2, r3
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	3b01      	subs	r3, #1
 80039ae:	b29a      	uxth	r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80039b4:	e04e      	b.n	8003a54 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039b8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80039ba:	68f8      	ldr	r0, [r7, #12]
 80039bc:	f000 fb5e 	bl	800407c <I2C_WaitOnRXNEFlagUntilTimeout>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d001      	beq.n	80039ca <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e058      	b.n	8003a7c <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	691a      	ldr	r2, [r3, #16]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d4:	b2d2      	uxtb	r2, r2
 80039d6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039dc:	1c5a      	adds	r2, r3, #1
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039e6:	3b01      	subs	r3, #1
 80039e8:	b29a      	uxth	r2, r3
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	3b01      	subs	r3, #1
 80039f6:	b29a      	uxth	r2, r3
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	f003 0304 	and.w	r3, r3, #4
 8003a06:	2b04      	cmp	r3, #4
 8003a08:	d124      	bne.n	8003a54 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a0e:	2b03      	cmp	r3, #3
 8003a10:	d107      	bne.n	8003a22 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a20:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	691a      	ldr	r2, [r3, #16]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a2c:	b2d2      	uxtb	r2, r2
 8003a2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a34:	1c5a      	adds	r2, r3, #1
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	b29a      	uxth	r2, r3
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	3b01      	subs	r3, #1
 8003a4e:	b29a      	uxth	r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	f47f aeb6 	bne.w	80037ca <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2220      	movs	r2, #32
 8003a62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003a76:	2300      	movs	r3, #0
 8003a78:	e000      	b.n	8003a7c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003a7a:	2302      	movs	r3, #2
  }
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3728      	adds	r7, #40	@ 0x28
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	00010004 	.word	0x00010004

08003a88 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b088      	sub	sp, #32
 8003a8c:	af02      	add	r7, sp, #8
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	607a      	str	r2, [r7, #4]
 8003a92:	603b      	str	r3, [r7, #0]
 8003a94:	460b      	mov	r3, r1
 8003a96:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a9c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	2b08      	cmp	r3, #8
 8003aa2:	d006      	beq.n	8003ab2 <I2C_MasterRequestWrite+0x2a>
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d003      	beq.n	8003ab2 <I2C_MasterRequestWrite+0x2a>
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003ab0:	d108      	bne.n	8003ac4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ac0:	601a      	str	r2, [r3, #0]
 8003ac2:	e00b      	b.n	8003adc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ac8:	2b12      	cmp	r3, #18
 8003aca:	d107      	bne.n	8003adc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ada:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	9300      	str	r3, [sp, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003ae8:	68f8      	ldr	r0, [r7, #12]
 8003aea:	f000 f91d 	bl	8003d28 <I2C_WaitOnFlagUntilTimeout>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d00d      	beq.n	8003b10 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003afe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b02:	d103      	bne.n	8003b0c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b0a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e035      	b.n	8003b7c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b18:	d108      	bne.n	8003b2c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b1a:	897b      	ldrh	r3, [r7, #10]
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	461a      	mov	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003b28:	611a      	str	r2, [r3, #16]
 8003b2a:	e01b      	b.n	8003b64 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003b2c:	897b      	ldrh	r3, [r7, #10]
 8003b2e:	11db      	asrs	r3, r3, #7
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	f003 0306 	and.w	r3, r3, #6
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	f063 030f 	orn	r3, r3, #15
 8003b3c:	b2da      	uxtb	r2, r3
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	490e      	ldr	r1, [pc, #56]	@ (8003b84 <I2C_MasterRequestWrite+0xfc>)
 8003b4a:	68f8      	ldr	r0, [r7, #12]
 8003b4c:	f000 f966 	bl	8003e1c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d001      	beq.n	8003b5a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e010      	b.n	8003b7c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003b5a:	897b      	ldrh	r3, [r7, #10]
 8003b5c:	b2da      	uxtb	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	4907      	ldr	r1, [pc, #28]	@ (8003b88 <I2C_MasterRequestWrite+0x100>)
 8003b6a:	68f8      	ldr	r0, [r7, #12]
 8003b6c:	f000 f956 	bl	8003e1c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d001      	beq.n	8003b7a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e000      	b.n	8003b7c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003b7a:	2300      	movs	r3, #0
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3718      	adds	r7, #24
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	00010008 	.word	0x00010008
 8003b88:	00010002 	.word	0x00010002

08003b8c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b088      	sub	sp, #32
 8003b90:	af02      	add	r7, sp, #8
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	607a      	str	r2, [r7, #4]
 8003b96:	603b      	str	r3, [r7, #0]
 8003b98:	460b      	mov	r3, r1
 8003b9a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ba0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003bb0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	2b08      	cmp	r3, #8
 8003bb6:	d006      	beq.n	8003bc6 <I2C_MasterRequestRead+0x3a>
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d003      	beq.n	8003bc6 <I2C_MasterRequestRead+0x3a>
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003bc4:	d108      	bne.n	8003bd8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bd4:	601a      	str	r2, [r3, #0]
 8003bd6:	e00b      	b.n	8003bf0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bdc:	2b11      	cmp	r3, #17
 8003bde:	d107      	bne.n	8003bf0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	9300      	str	r3, [sp, #0]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003bfc:	68f8      	ldr	r0, [r7, #12]
 8003bfe:	f000 f893 	bl	8003d28 <I2C_WaitOnFlagUntilTimeout>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d00d      	beq.n	8003c24 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c16:	d103      	bne.n	8003c20 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c1e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e079      	b.n	8003d18 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c2c:	d108      	bne.n	8003c40 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003c2e:	897b      	ldrh	r3, [r7, #10]
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	f043 0301 	orr.w	r3, r3, #1
 8003c36:	b2da      	uxtb	r2, r3
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	611a      	str	r2, [r3, #16]
 8003c3e:	e05f      	b.n	8003d00 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003c40:	897b      	ldrh	r3, [r7, #10]
 8003c42:	11db      	asrs	r3, r3, #7
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	f003 0306 	and.w	r3, r3, #6
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	f063 030f 	orn	r3, r3, #15
 8003c50:	b2da      	uxtb	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	4930      	ldr	r1, [pc, #192]	@ (8003d20 <I2C_MasterRequestRead+0x194>)
 8003c5e:	68f8      	ldr	r0, [r7, #12]
 8003c60:	f000 f8dc 	bl	8003e1c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d001      	beq.n	8003c6e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e054      	b.n	8003d18 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003c6e:	897b      	ldrh	r3, [r7, #10]
 8003c70:	b2da      	uxtb	r2, r3
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	4929      	ldr	r1, [pc, #164]	@ (8003d24 <I2C_MasterRequestRead+0x198>)
 8003c7e:	68f8      	ldr	r0, [r7, #12]
 8003c80:	f000 f8cc 	bl	8003e1c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d001      	beq.n	8003c8e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e044      	b.n	8003d18 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c8e:	2300      	movs	r3, #0
 8003c90:	613b      	str	r3, [r7, #16]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	695b      	ldr	r3, [r3, #20]
 8003c98:	613b      	str	r3, [r7, #16]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	699b      	ldr	r3, [r3, #24]
 8003ca0:	613b      	str	r3, [r7, #16]
 8003ca2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003cb2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	9300      	str	r3, [sp, #0]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003cc0:	68f8      	ldr	r0, [r7, #12]
 8003cc2:	f000 f831 	bl	8003d28 <I2C_WaitOnFlagUntilTimeout>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d00d      	beq.n	8003ce8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cda:	d103      	bne.n	8003ce4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ce2:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	e017      	b.n	8003d18 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003ce8:	897b      	ldrh	r3, [r7, #10]
 8003cea:	11db      	asrs	r3, r3, #7
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	f003 0306 	and.w	r3, r3, #6
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	f063 030e 	orn	r3, r3, #14
 8003cf8:	b2da      	uxtb	r2, r3
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	4907      	ldr	r1, [pc, #28]	@ (8003d24 <I2C_MasterRequestRead+0x198>)
 8003d06:	68f8      	ldr	r0, [r7, #12]
 8003d08:	f000 f888 	bl	8003e1c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d001      	beq.n	8003d16 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e000      	b.n	8003d18 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3718      	adds	r7, #24
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	00010008 	.word	0x00010008
 8003d24:	00010002 	.word	0x00010002

08003d28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	603b      	str	r3, [r7, #0]
 8003d34:	4613      	mov	r3, r2
 8003d36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d38:	e048      	b.n	8003dcc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d40:	d044      	beq.n	8003dcc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d42:	f7fe fe7b 	bl	8002a3c <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	683a      	ldr	r2, [r7, #0]
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d302      	bcc.n	8003d58 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d139      	bne.n	8003dcc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	0c1b      	lsrs	r3, r3, #16
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d10d      	bne.n	8003d7e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	695b      	ldr	r3, [r3, #20]
 8003d68:	43da      	mvns	r2, r3
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	bf0c      	ite	eq
 8003d74:	2301      	moveq	r3, #1
 8003d76:	2300      	movne	r3, #0
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	e00c      	b.n	8003d98 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	43da      	mvns	r2, r3
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	4013      	ands	r3, r2
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	bf0c      	ite	eq
 8003d90:	2301      	moveq	r3, #1
 8003d92:	2300      	movne	r3, #0
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	461a      	mov	r2, r3
 8003d98:	79fb      	ldrb	r3, [r7, #7]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d116      	bne.n	8003dcc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2200      	movs	r2, #0
 8003da2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2220      	movs	r2, #32
 8003da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db8:	f043 0220 	orr.w	r2, r3, #32
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e023      	b.n	8003e14 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	0c1b      	lsrs	r3, r3, #16
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d10d      	bne.n	8003df2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	695b      	ldr	r3, [r3, #20]
 8003ddc:	43da      	mvns	r2, r3
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	4013      	ands	r3, r2
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	bf0c      	ite	eq
 8003de8:	2301      	moveq	r3, #1
 8003dea:	2300      	movne	r3, #0
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	461a      	mov	r2, r3
 8003df0:	e00c      	b.n	8003e0c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	43da      	mvns	r2, r3
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	bf0c      	ite	eq
 8003e04:	2301      	moveq	r3, #1
 8003e06:	2300      	movne	r3, #0
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	79fb      	ldrb	r3, [r7, #7]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d093      	beq.n	8003d3a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3710      	adds	r7, #16
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	607a      	str	r2, [r7, #4]
 8003e28:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e2a:	e071      	b.n	8003f10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e3a:	d123      	bne.n	8003e84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e4a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003e54:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2220      	movs	r2, #32
 8003e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e70:	f043 0204 	orr.w	r2, r3, #4
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e067      	b.n	8003f54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e8a:	d041      	beq.n	8003f10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e8c:	f7fe fdd6 	bl	8002a3c <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d302      	bcc.n	8003ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d136      	bne.n	8003f10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	0c1b      	lsrs	r3, r3, #16
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d10c      	bne.n	8003ec6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	695b      	ldr	r3, [r3, #20]
 8003eb2:	43da      	mvns	r2, r3
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	bf14      	ite	ne
 8003ebe:	2301      	movne	r3, #1
 8003ec0:	2300      	moveq	r3, #0
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	e00b      	b.n	8003ede <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	699b      	ldr	r3, [r3, #24]
 8003ecc:	43da      	mvns	r2, r3
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	bf14      	ite	ne
 8003ed8:	2301      	movne	r3, #1
 8003eda:	2300      	moveq	r3, #0
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d016      	beq.n	8003f10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2220      	movs	r2, #32
 8003eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003efc:	f043 0220 	orr.w	r2, r3, #32
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e021      	b.n	8003f54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	0c1b      	lsrs	r3, r3, #16
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d10c      	bne.n	8003f34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	695b      	ldr	r3, [r3, #20]
 8003f20:	43da      	mvns	r2, r3
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	4013      	ands	r3, r2
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	bf14      	ite	ne
 8003f2c:	2301      	movne	r3, #1
 8003f2e:	2300      	moveq	r3, #0
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	e00b      	b.n	8003f4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	43da      	mvns	r2, r3
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	4013      	ands	r3, r2
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	bf14      	ite	ne
 8003f46:	2301      	movne	r3, #1
 8003f48:	2300      	moveq	r3, #0
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f47f af6d 	bne.w	8003e2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3710      	adds	r7, #16
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f68:	e034      	b.n	8003fd4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f6a:	68f8      	ldr	r0, [r7, #12]
 8003f6c:	f000 f8e3 	bl	8004136 <I2C_IsAcknowledgeFailed>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d001      	beq.n	8003f7a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e034      	b.n	8003fe4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f80:	d028      	beq.n	8003fd4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f82:	f7fe fd5b 	bl	8002a3c <HAL_GetTick>
 8003f86:	4602      	mov	r2, r0
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	68ba      	ldr	r2, [r7, #8]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d302      	bcc.n	8003f98 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d11d      	bne.n	8003fd4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fa2:	2b80      	cmp	r3, #128	@ 0x80
 8003fa4:	d016      	beq.n	8003fd4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2220      	movs	r2, #32
 8003fb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc0:	f043 0220 	orr.w	r2, r3, #32
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e007      	b.n	8003fe4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	695b      	ldr	r3, [r3, #20]
 8003fda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fde:	2b80      	cmp	r3, #128	@ 0x80
 8003fe0:	d1c3      	bne.n	8003f6a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003fe2:	2300      	movs	r3, #0
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3710      	adds	r7, #16
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	60b9      	str	r1, [r7, #8]
 8003ff6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ff8:	e034      	b.n	8004064 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ffa:	68f8      	ldr	r0, [r7, #12]
 8003ffc:	f000 f89b 	bl	8004136 <I2C_IsAcknowledgeFailed>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d001      	beq.n	800400a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e034      	b.n	8004074 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004010:	d028      	beq.n	8004064 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004012:	f7fe fd13 	bl	8002a3c <HAL_GetTick>
 8004016:	4602      	mov	r2, r0
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	68ba      	ldr	r2, [r7, #8]
 800401e:	429a      	cmp	r2, r3
 8004020:	d302      	bcc.n	8004028 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d11d      	bne.n	8004064 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	f003 0304 	and.w	r3, r3, #4
 8004032:	2b04      	cmp	r3, #4
 8004034:	d016      	beq.n	8004064 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2200      	movs	r2, #0
 800403a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2220      	movs	r2, #32
 8004040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2200      	movs	r2, #0
 8004048:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004050:	f043 0220 	orr.w	r2, r3, #32
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2200      	movs	r2, #0
 800405c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e007      	b.n	8004074 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	695b      	ldr	r3, [r3, #20]
 800406a:	f003 0304 	and.w	r3, r3, #4
 800406e:	2b04      	cmp	r3, #4
 8004070:	d1c3      	bne.n	8003ffa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004072:	2300      	movs	r3, #0
}
 8004074:	4618      	mov	r0, r3
 8004076:	3710      	adds	r7, #16
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	60b9      	str	r1, [r7, #8]
 8004086:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004088:	e049      	b.n	800411e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	695b      	ldr	r3, [r3, #20]
 8004090:	f003 0310 	and.w	r3, r3, #16
 8004094:	2b10      	cmp	r3, #16
 8004096:	d119      	bne.n	80040cc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f06f 0210 	mvn.w	r2, #16
 80040a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2200      	movs	r2, #0
 80040a6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2220      	movs	r2, #32
 80040ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e030      	b.n	800412e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040cc:	f7fe fcb6 	bl	8002a3c <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	68ba      	ldr	r2, [r7, #8]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d302      	bcc.n	80040e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d11d      	bne.n	800411e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	695b      	ldr	r3, [r3, #20]
 80040e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040ec:	2b40      	cmp	r3, #64	@ 0x40
 80040ee:	d016      	beq.n	800411e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2200      	movs	r2, #0
 80040f4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2220      	movs	r2, #32
 80040fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800410a:	f043 0220 	orr.w	r2, r3, #32
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e007      	b.n	800412e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	695b      	ldr	r3, [r3, #20]
 8004124:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004128:	2b40      	cmp	r3, #64	@ 0x40
 800412a:	d1ae      	bne.n	800408a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800412c:	2300      	movs	r3, #0
}
 800412e:	4618      	mov	r0, r3
 8004130:	3710      	adds	r7, #16
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}

08004136 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004136:	b480      	push	{r7}
 8004138:	b083      	sub	sp, #12
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	695b      	ldr	r3, [r3, #20]
 8004144:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004148:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800414c:	d11b      	bne.n	8004186 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004156:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2220      	movs	r2, #32
 8004162:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004172:	f043 0204 	orr.w	r2, r3, #4
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e000      	b.n	8004188 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004186:	2300      	movs	r3, #0
}
 8004188:	4618      	mov	r0, r3
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	2b20      	cmp	r3, #32
 80041a8:	d129      	bne.n	80041fe <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2224      	movs	r2, #36	@ 0x24
 80041ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f022 0201 	bic.w	r2, r2, #1
 80041c0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f022 0210 	bic.w	r2, r2, #16
 80041d0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	683a      	ldr	r2, [r7, #0]
 80041de:	430a      	orrs	r2, r1
 80041e0:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f042 0201 	orr.w	r2, r2, #1
 80041f0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2220      	movs	r2, #32
 80041f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80041fa:	2300      	movs	r3, #0
 80041fc:	e000      	b.n	8004200 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80041fe:	2302      	movs	r3, #2
  }
}
 8004200:	4618      	mov	r0, r3
 8004202:	370c      	adds	r7, #12
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr

0800420c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800420c:	b480      	push	{r7}
 800420e:	b085      	sub	sp, #20
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004216:	2300      	movs	r3, #0
 8004218:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004220:	b2db      	uxtb	r3, r3
 8004222:	2b20      	cmp	r3, #32
 8004224:	d12a      	bne.n	800427c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2224      	movs	r2, #36	@ 0x24
 800422a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f022 0201 	bic.w	r2, r2, #1
 800423c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004244:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004246:	89fb      	ldrh	r3, [r7, #14]
 8004248:	f023 030f 	bic.w	r3, r3, #15
 800424c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	b29a      	uxth	r2, r3
 8004252:	89fb      	ldrh	r3, [r7, #14]
 8004254:	4313      	orrs	r3, r2
 8004256:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	89fa      	ldrh	r2, [r7, #14]
 800425e:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f042 0201 	orr.w	r2, r2, #1
 800426e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2220      	movs	r2, #32
 8004274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004278:	2300      	movs	r3, #0
 800427a:	e000      	b.n	800427e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800427c:	2302      	movs	r3, #2
  }
}
 800427e:	4618      	mov	r0, r3
 8004280:	3714      	adds	r7, #20
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
	...

0800428c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b086      	sub	sp, #24
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d101      	bne.n	800429e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e267      	b.n	800476e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0301 	and.w	r3, r3, #1
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d075      	beq.n	8004396 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042aa:	4b88      	ldr	r3, [pc, #544]	@ (80044cc <HAL_RCC_OscConfig+0x240>)
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f003 030c 	and.w	r3, r3, #12
 80042b2:	2b04      	cmp	r3, #4
 80042b4:	d00c      	beq.n	80042d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042b6:	4b85      	ldr	r3, [pc, #532]	@ (80044cc <HAL_RCC_OscConfig+0x240>)
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042be:	2b08      	cmp	r3, #8
 80042c0:	d112      	bne.n	80042e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042c2:	4b82      	ldr	r3, [pc, #520]	@ (80044cc <HAL_RCC_OscConfig+0x240>)
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042ce:	d10b      	bne.n	80042e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042d0:	4b7e      	ldr	r3, [pc, #504]	@ (80044cc <HAL_RCC_OscConfig+0x240>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d05b      	beq.n	8004394 <HAL_RCC_OscConfig+0x108>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d157      	bne.n	8004394 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e242      	b.n	800476e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042f0:	d106      	bne.n	8004300 <HAL_RCC_OscConfig+0x74>
 80042f2:	4b76      	ldr	r3, [pc, #472]	@ (80044cc <HAL_RCC_OscConfig+0x240>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a75      	ldr	r2, [pc, #468]	@ (80044cc <HAL_RCC_OscConfig+0x240>)
 80042f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042fc:	6013      	str	r3, [r2, #0]
 80042fe:	e01d      	b.n	800433c <HAL_RCC_OscConfig+0xb0>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004308:	d10c      	bne.n	8004324 <HAL_RCC_OscConfig+0x98>
 800430a:	4b70      	ldr	r3, [pc, #448]	@ (80044cc <HAL_RCC_OscConfig+0x240>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a6f      	ldr	r2, [pc, #444]	@ (80044cc <HAL_RCC_OscConfig+0x240>)
 8004310:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004314:	6013      	str	r3, [r2, #0]
 8004316:	4b6d      	ldr	r3, [pc, #436]	@ (80044cc <HAL_RCC_OscConfig+0x240>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a6c      	ldr	r2, [pc, #432]	@ (80044cc <HAL_RCC_OscConfig+0x240>)
 800431c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004320:	6013      	str	r3, [r2, #0]
 8004322:	e00b      	b.n	800433c <HAL_RCC_OscConfig+0xb0>
 8004324:	4b69      	ldr	r3, [pc, #420]	@ (80044cc <HAL_RCC_OscConfig+0x240>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a68      	ldr	r2, [pc, #416]	@ (80044cc <HAL_RCC_OscConfig+0x240>)
 800432a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800432e:	6013      	str	r3, [r2, #0]
 8004330:	4b66      	ldr	r3, [pc, #408]	@ (80044cc <HAL_RCC_OscConfig+0x240>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a65      	ldr	r2, [pc, #404]	@ (80044cc <HAL_RCC_OscConfig+0x240>)
 8004336:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800433a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d013      	beq.n	800436c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004344:	f7fe fb7a 	bl	8002a3c <HAL_GetTick>
 8004348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800434a:	e008      	b.n	800435e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800434c:	f7fe fb76 	bl	8002a3c <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	2b64      	cmp	r3, #100	@ 0x64
 8004358:	d901      	bls.n	800435e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e207      	b.n	800476e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800435e:	4b5b      	ldr	r3, [pc, #364]	@ (80044cc <HAL_RCC_OscConfig+0x240>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d0f0      	beq.n	800434c <HAL_RCC_OscConfig+0xc0>
 800436a:	e014      	b.n	8004396 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800436c:	f7fe fb66 	bl	8002a3c <HAL_GetTick>
 8004370:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004372:	e008      	b.n	8004386 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004374:	f7fe fb62 	bl	8002a3c <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	2b64      	cmp	r3, #100	@ 0x64
 8004380:	d901      	bls.n	8004386 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e1f3      	b.n	800476e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004386:	4b51      	ldr	r3, [pc, #324]	@ (80044cc <HAL_RCC_OscConfig+0x240>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d1f0      	bne.n	8004374 <HAL_RCC_OscConfig+0xe8>
 8004392:	e000      	b.n	8004396 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004394:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0302 	and.w	r3, r3, #2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d063      	beq.n	800446a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043a2:	4b4a      	ldr	r3, [pc, #296]	@ (80044cc <HAL_RCC_OscConfig+0x240>)
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	f003 030c 	and.w	r3, r3, #12
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d00b      	beq.n	80043c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043ae:	4b47      	ldr	r3, [pc, #284]	@ (80044cc <HAL_RCC_OscConfig+0x240>)
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043b6:	2b08      	cmp	r3, #8
 80043b8:	d11c      	bne.n	80043f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043ba:	4b44      	ldr	r3, [pc, #272]	@ (80044cc <HAL_RCC_OscConfig+0x240>)
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d116      	bne.n	80043f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043c6:	4b41      	ldr	r3, [pc, #260]	@ (80044cc <HAL_RCC_OscConfig+0x240>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0302 	and.w	r3, r3, #2
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d005      	beq.n	80043de <HAL_RCC_OscConfig+0x152>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d001      	beq.n	80043de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e1c7      	b.n	800476e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043de:	4b3b      	ldr	r3, [pc, #236]	@ (80044cc <HAL_RCC_OscConfig+0x240>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	00db      	lsls	r3, r3, #3
 80043ec:	4937      	ldr	r1, [pc, #220]	@ (80044cc <HAL_RCC_OscConfig+0x240>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043f2:	e03a      	b.n	800446a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d020      	beq.n	800443e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043fc:	4b34      	ldr	r3, [pc, #208]	@ (80044d0 <HAL_RCC_OscConfig+0x244>)
 80043fe:	2201      	movs	r2, #1
 8004400:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004402:	f7fe fb1b 	bl	8002a3c <HAL_GetTick>
 8004406:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004408:	e008      	b.n	800441c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800440a:	f7fe fb17 	bl	8002a3c <HAL_GetTick>
 800440e:	4602      	mov	r2, r0
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	2b02      	cmp	r3, #2
 8004416:	d901      	bls.n	800441c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e1a8      	b.n	800476e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800441c:	4b2b      	ldr	r3, [pc, #172]	@ (80044cc <HAL_RCC_OscConfig+0x240>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0302 	and.w	r3, r3, #2
 8004424:	2b00      	cmp	r3, #0
 8004426:	d0f0      	beq.n	800440a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004428:	4b28      	ldr	r3, [pc, #160]	@ (80044cc <HAL_RCC_OscConfig+0x240>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	00db      	lsls	r3, r3, #3
 8004436:	4925      	ldr	r1, [pc, #148]	@ (80044cc <HAL_RCC_OscConfig+0x240>)
 8004438:	4313      	orrs	r3, r2
 800443a:	600b      	str	r3, [r1, #0]
 800443c:	e015      	b.n	800446a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800443e:	4b24      	ldr	r3, [pc, #144]	@ (80044d0 <HAL_RCC_OscConfig+0x244>)
 8004440:	2200      	movs	r2, #0
 8004442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004444:	f7fe fafa 	bl	8002a3c <HAL_GetTick>
 8004448:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800444a:	e008      	b.n	800445e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800444c:	f7fe faf6 	bl	8002a3c <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	2b02      	cmp	r3, #2
 8004458:	d901      	bls.n	800445e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e187      	b.n	800476e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800445e:	4b1b      	ldr	r3, [pc, #108]	@ (80044cc <HAL_RCC_OscConfig+0x240>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0302 	and.w	r3, r3, #2
 8004466:	2b00      	cmp	r3, #0
 8004468:	d1f0      	bne.n	800444c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 0308 	and.w	r3, r3, #8
 8004472:	2b00      	cmp	r3, #0
 8004474:	d036      	beq.n	80044e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d016      	beq.n	80044ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800447e:	4b15      	ldr	r3, [pc, #84]	@ (80044d4 <HAL_RCC_OscConfig+0x248>)
 8004480:	2201      	movs	r2, #1
 8004482:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004484:	f7fe fada 	bl	8002a3c <HAL_GetTick>
 8004488:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800448a:	e008      	b.n	800449e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800448c:	f7fe fad6 	bl	8002a3c <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	2b02      	cmp	r3, #2
 8004498:	d901      	bls.n	800449e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e167      	b.n	800476e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800449e:	4b0b      	ldr	r3, [pc, #44]	@ (80044cc <HAL_RCC_OscConfig+0x240>)
 80044a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044a2:	f003 0302 	and.w	r3, r3, #2
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d0f0      	beq.n	800448c <HAL_RCC_OscConfig+0x200>
 80044aa:	e01b      	b.n	80044e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044ac:	4b09      	ldr	r3, [pc, #36]	@ (80044d4 <HAL_RCC_OscConfig+0x248>)
 80044ae:	2200      	movs	r2, #0
 80044b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044b2:	f7fe fac3 	bl	8002a3c <HAL_GetTick>
 80044b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044b8:	e00e      	b.n	80044d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044ba:	f7fe fabf 	bl	8002a3c <HAL_GetTick>
 80044be:	4602      	mov	r2, r0
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d907      	bls.n	80044d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	e150      	b.n	800476e <HAL_RCC_OscConfig+0x4e2>
 80044cc:	40023800 	.word	0x40023800
 80044d0:	42470000 	.word	0x42470000
 80044d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044d8:	4b88      	ldr	r3, [pc, #544]	@ (80046fc <HAL_RCC_OscConfig+0x470>)
 80044da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044dc:	f003 0302 	and.w	r3, r3, #2
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d1ea      	bne.n	80044ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0304 	and.w	r3, r3, #4
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	f000 8097 	beq.w	8004620 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044f2:	2300      	movs	r3, #0
 80044f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044f6:	4b81      	ldr	r3, [pc, #516]	@ (80046fc <HAL_RCC_OscConfig+0x470>)
 80044f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d10f      	bne.n	8004522 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004502:	2300      	movs	r3, #0
 8004504:	60bb      	str	r3, [r7, #8]
 8004506:	4b7d      	ldr	r3, [pc, #500]	@ (80046fc <HAL_RCC_OscConfig+0x470>)
 8004508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800450a:	4a7c      	ldr	r2, [pc, #496]	@ (80046fc <HAL_RCC_OscConfig+0x470>)
 800450c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004510:	6413      	str	r3, [r2, #64]	@ 0x40
 8004512:	4b7a      	ldr	r3, [pc, #488]	@ (80046fc <HAL_RCC_OscConfig+0x470>)
 8004514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004516:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800451a:	60bb      	str	r3, [r7, #8]
 800451c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800451e:	2301      	movs	r3, #1
 8004520:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004522:	4b77      	ldr	r3, [pc, #476]	@ (8004700 <HAL_RCC_OscConfig+0x474>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800452a:	2b00      	cmp	r3, #0
 800452c:	d118      	bne.n	8004560 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800452e:	4b74      	ldr	r3, [pc, #464]	@ (8004700 <HAL_RCC_OscConfig+0x474>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a73      	ldr	r2, [pc, #460]	@ (8004700 <HAL_RCC_OscConfig+0x474>)
 8004534:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004538:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800453a:	f7fe fa7f 	bl	8002a3c <HAL_GetTick>
 800453e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004540:	e008      	b.n	8004554 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004542:	f7fe fa7b 	bl	8002a3c <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	2b02      	cmp	r3, #2
 800454e:	d901      	bls.n	8004554 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e10c      	b.n	800476e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004554:	4b6a      	ldr	r3, [pc, #424]	@ (8004700 <HAL_RCC_OscConfig+0x474>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800455c:	2b00      	cmp	r3, #0
 800455e:	d0f0      	beq.n	8004542 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d106      	bne.n	8004576 <HAL_RCC_OscConfig+0x2ea>
 8004568:	4b64      	ldr	r3, [pc, #400]	@ (80046fc <HAL_RCC_OscConfig+0x470>)
 800456a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800456c:	4a63      	ldr	r2, [pc, #396]	@ (80046fc <HAL_RCC_OscConfig+0x470>)
 800456e:	f043 0301 	orr.w	r3, r3, #1
 8004572:	6713      	str	r3, [r2, #112]	@ 0x70
 8004574:	e01c      	b.n	80045b0 <HAL_RCC_OscConfig+0x324>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	2b05      	cmp	r3, #5
 800457c:	d10c      	bne.n	8004598 <HAL_RCC_OscConfig+0x30c>
 800457e:	4b5f      	ldr	r3, [pc, #380]	@ (80046fc <HAL_RCC_OscConfig+0x470>)
 8004580:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004582:	4a5e      	ldr	r2, [pc, #376]	@ (80046fc <HAL_RCC_OscConfig+0x470>)
 8004584:	f043 0304 	orr.w	r3, r3, #4
 8004588:	6713      	str	r3, [r2, #112]	@ 0x70
 800458a:	4b5c      	ldr	r3, [pc, #368]	@ (80046fc <HAL_RCC_OscConfig+0x470>)
 800458c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800458e:	4a5b      	ldr	r2, [pc, #364]	@ (80046fc <HAL_RCC_OscConfig+0x470>)
 8004590:	f043 0301 	orr.w	r3, r3, #1
 8004594:	6713      	str	r3, [r2, #112]	@ 0x70
 8004596:	e00b      	b.n	80045b0 <HAL_RCC_OscConfig+0x324>
 8004598:	4b58      	ldr	r3, [pc, #352]	@ (80046fc <HAL_RCC_OscConfig+0x470>)
 800459a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800459c:	4a57      	ldr	r2, [pc, #348]	@ (80046fc <HAL_RCC_OscConfig+0x470>)
 800459e:	f023 0301 	bic.w	r3, r3, #1
 80045a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80045a4:	4b55      	ldr	r3, [pc, #340]	@ (80046fc <HAL_RCC_OscConfig+0x470>)
 80045a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045a8:	4a54      	ldr	r2, [pc, #336]	@ (80046fc <HAL_RCC_OscConfig+0x470>)
 80045aa:	f023 0304 	bic.w	r3, r3, #4
 80045ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d015      	beq.n	80045e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045b8:	f7fe fa40 	bl	8002a3c <HAL_GetTick>
 80045bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045be:	e00a      	b.n	80045d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045c0:	f7fe fa3c 	bl	8002a3c <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d901      	bls.n	80045d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e0cb      	b.n	800476e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045d6:	4b49      	ldr	r3, [pc, #292]	@ (80046fc <HAL_RCC_OscConfig+0x470>)
 80045d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045da:	f003 0302 	and.w	r3, r3, #2
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d0ee      	beq.n	80045c0 <HAL_RCC_OscConfig+0x334>
 80045e2:	e014      	b.n	800460e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045e4:	f7fe fa2a 	bl	8002a3c <HAL_GetTick>
 80045e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045ea:	e00a      	b.n	8004602 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045ec:	f7fe fa26 	bl	8002a3c <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d901      	bls.n	8004602 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e0b5      	b.n	800476e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004602:	4b3e      	ldr	r3, [pc, #248]	@ (80046fc <HAL_RCC_OscConfig+0x470>)
 8004604:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004606:	f003 0302 	and.w	r3, r3, #2
 800460a:	2b00      	cmp	r3, #0
 800460c:	d1ee      	bne.n	80045ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800460e:	7dfb      	ldrb	r3, [r7, #23]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d105      	bne.n	8004620 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004614:	4b39      	ldr	r3, [pc, #228]	@ (80046fc <HAL_RCC_OscConfig+0x470>)
 8004616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004618:	4a38      	ldr	r2, [pc, #224]	@ (80046fc <HAL_RCC_OscConfig+0x470>)
 800461a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800461e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	699b      	ldr	r3, [r3, #24]
 8004624:	2b00      	cmp	r3, #0
 8004626:	f000 80a1 	beq.w	800476c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800462a:	4b34      	ldr	r3, [pc, #208]	@ (80046fc <HAL_RCC_OscConfig+0x470>)
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	f003 030c 	and.w	r3, r3, #12
 8004632:	2b08      	cmp	r3, #8
 8004634:	d05c      	beq.n	80046f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	699b      	ldr	r3, [r3, #24]
 800463a:	2b02      	cmp	r3, #2
 800463c:	d141      	bne.n	80046c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800463e:	4b31      	ldr	r3, [pc, #196]	@ (8004704 <HAL_RCC_OscConfig+0x478>)
 8004640:	2200      	movs	r2, #0
 8004642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004644:	f7fe f9fa 	bl	8002a3c <HAL_GetTick>
 8004648:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800464a:	e008      	b.n	800465e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800464c:	f7fe f9f6 	bl	8002a3c <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b02      	cmp	r3, #2
 8004658:	d901      	bls.n	800465e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e087      	b.n	800476e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800465e:	4b27      	ldr	r3, [pc, #156]	@ (80046fc <HAL_RCC_OscConfig+0x470>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1f0      	bne.n	800464c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	69da      	ldr	r2, [r3, #28]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a1b      	ldr	r3, [r3, #32]
 8004672:	431a      	orrs	r2, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004678:	019b      	lsls	r3, r3, #6
 800467a:	431a      	orrs	r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004680:	085b      	lsrs	r3, r3, #1
 8004682:	3b01      	subs	r3, #1
 8004684:	041b      	lsls	r3, r3, #16
 8004686:	431a      	orrs	r2, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800468c:	061b      	lsls	r3, r3, #24
 800468e:	491b      	ldr	r1, [pc, #108]	@ (80046fc <HAL_RCC_OscConfig+0x470>)
 8004690:	4313      	orrs	r3, r2
 8004692:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004694:	4b1b      	ldr	r3, [pc, #108]	@ (8004704 <HAL_RCC_OscConfig+0x478>)
 8004696:	2201      	movs	r2, #1
 8004698:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800469a:	f7fe f9cf 	bl	8002a3c <HAL_GetTick>
 800469e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046a0:	e008      	b.n	80046b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046a2:	f7fe f9cb 	bl	8002a3c <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d901      	bls.n	80046b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e05c      	b.n	800476e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046b4:	4b11      	ldr	r3, [pc, #68]	@ (80046fc <HAL_RCC_OscConfig+0x470>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d0f0      	beq.n	80046a2 <HAL_RCC_OscConfig+0x416>
 80046c0:	e054      	b.n	800476c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046c2:	4b10      	ldr	r3, [pc, #64]	@ (8004704 <HAL_RCC_OscConfig+0x478>)
 80046c4:	2200      	movs	r2, #0
 80046c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046c8:	f7fe f9b8 	bl	8002a3c <HAL_GetTick>
 80046cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046ce:	e008      	b.n	80046e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046d0:	f7fe f9b4 	bl	8002a3c <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d901      	bls.n	80046e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e045      	b.n	800476e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046e2:	4b06      	ldr	r3, [pc, #24]	@ (80046fc <HAL_RCC_OscConfig+0x470>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d1f0      	bne.n	80046d0 <HAL_RCC_OscConfig+0x444>
 80046ee:	e03d      	b.n	800476c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	699b      	ldr	r3, [r3, #24]
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d107      	bne.n	8004708 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e038      	b.n	800476e <HAL_RCC_OscConfig+0x4e2>
 80046fc:	40023800 	.word	0x40023800
 8004700:	40007000 	.word	0x40007000
 8004704:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004708:	4b1b      	ldr	r3, [pc, #108]	@ (8004778 <HAL_RCC_OscConfig+0x4ec>)
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	699b      	ldr	r3, [r3, #24]
 8004712:	2b01      	cmp	r3, #1
 8004714:	d028      	beq.n	8004768 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004720:	429a      	cmp	r2, r3
 8004722:	d121      	bne.n	8004768 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800472e:	429a      	cmp	r2, r3
 8004730:	d11a      	bne.n	8004768 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004738:	4013      	ands	r3, r2
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800473e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004740:	4293      	cmp	r3, r2
 8004742:	d111      	bne.n	8004768 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800474e:	085b      	lsrs	r3, r3, #1
 8004750:	3b01      	subs	r3, #1
 8004752:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004754:	429a      	cmp	r2, r3
 8004756:	d107      	bne.n	8004768 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004762:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004764:	429a      	cmp	r2, r3
 8004766:	d001      	beq.n	800476c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e000      	b.n	800476e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3718      	adds	r7, #24
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	40023800 	.word	0x40023800

0800477c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d101      	bne.n	8004790 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e0cc      	b.n	800492a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004790:	4b68      	ldr	r3, [pc, #416]	@ (8004934 <HAL_RCC_ClockConfig+0x1b8>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 030f 	and.w	r3, r3, #15
 8004798:	683a      	ldr	r2, [r7, #0]
 800479a:	429a      	cmp	r2, r3
 800479c:	d90c      	bls.n	80047b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800479e:	4b65      	ldr	r3, [pc, #404]	@ (8004934 <HAL_RCC_ClockConfig+0x1b8>)
 80047a0:	683a      	ldr	r2, [r7, #0]
 80047a2:	b2d2      	uxtb	r2, r2
 80047a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047a6:	4b63      	ldr	r3, [pc, #396]	@ (8004934 <HAL_RCC_ClockConfig+0x1b8>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 030f 	and.w	r3, r3, #15
 80047ae:	683a      	ldr	r2, [r7, #0]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d001      	beq.n	80047b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e0b8      	b.n	800492a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0302 	and.w	r3, r3, #2
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d020      	beq.n	8004806 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 0304 	and.w	r3, r3, #4
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d005      	beq.n	80047dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047d0:	4b59      	ldr	r3, [pc, #356]	@ (8004938 <HAL_RCC_ClockConfig+0x1bc>)
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	4a58      	ldr	r2, [pc, #352]	@ (8004938 <HAL_RCC_ClockConfig+0x1bc>)
 80047d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80047da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0308 	and.w	r3, r3, #8
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d005      	beq.n	80047f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047e8:	4b53      	ldr	r3, [pc, #332]	@ (8004938 <HAL_RCC_ClockConfig+0x1bc>)
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	4a52      	ldr	r2, [pc, #328]	@ (8004938 <HAL_RCC_ClockConfig+0x1bc>)
 80047ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80047f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047f4:	4b50      	ldr	r3, [pc, #320]	@ (8004938 <HAL_RCC_ClockConfig+0x1bc>)
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	494d      	ldr	r1, [pc, #308]	@ (8004938 <HAL_RCC_ClockConfig+0x1bc>)
 8004802:	4313      	orrs	r3, r2
 8004804:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0301 	and.w	r3, r3, #1
 800480e:	2b00      	cmp	r3, #0
 8004810:	d044      	beq.n	800489c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	2b01      	cmp	r3, #1
 8004818:	d107      	bne.n	800482a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800481a:	4b47      	ldr	r3, [pc, #284]	@ (8004938 <HAL_RCC_ClockConfig+0x1bc>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d119      	bne.n	800485a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e07f      	b.n	800492a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	2b02      	cmp	r3, #2
 8004830:	d003      	beq.n	800483a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004836:	2b03      	cmp	r3, #3
 8004838:	d107      	bne.n	800484a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800483a:	4b3f      	ldr	r3, [pc, #252]	@ (8004938 <HAL_RCC_ClockConfig+0x1bc>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d109      	bne.n	800485a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e06f      	b.n	800492a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800484a:	4b3b      	ldr	r3, [pc, #236]	@ (8004938 <HAL_RCC_ClockConfig+0x1bc>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 0302 	and.w	r3, r3, #2
 8004852:	2b00      	cmp	r3, #0
 8004854:	d101      	bne.n	800485a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e067      	b.n	800492a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800485a:	4b37      	ldr	r3, [pc, #220]	@ (8004938 <HAL_RCC_ClockConfig+0x1bc>)
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	f023 0203 	bic.w	r2, r3, #3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	4934      	ldr	r1, [pc, #208]	@ (8004938 <HAL_RCC_ClockConfig+0x1bc>)
 8004868:	4313      	orrs	r3, r2
 800486a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800486c:	f7fe f8e6 	bl	8002a3c <HAL_GetTick>
 8004870:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004872:	e00a      	b.n	800488a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004874:	f7fe f8e2 	bl	8002a3c <HAL_GetTick>
 8004878:	4602      	mov	r2, r0
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004882:	4293      	cmp	r3, r2
 8004884:	d901      	bls.n	800488a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e04f      	b.n	800492a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800488a:	4b2b      	ldr	r3, [pc, #172]	@ (8004938 <HAL_RCC_ClockConfig+0x1bc>)
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	f003 020c 	and.w	r2, r3, #12
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	429a      	cmp	r2, r3
 800489a:	d1eb      	bne.n	8004874 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800489c:	4b25      	ldr	r3, [pc, #148]	@ (8004934 <HAL_RCC_ClockConfig+0x1b8>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 030f 	and.w	r3, r3, #15
 80048a4:	683a      	ldr	r2, [r7, #0]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d20c      	bcs.n	80048c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048aa:	4b22      	ldr	r3, [pc, #136]	@ (8004934 <HAL_RCC_ClockConfig+0x1b8>)
 80048ac:	683a      	ldr	r2, [r7, #0]
 80048ae:	b2d2      	uxtb	r2, r2
 80048b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048b2:	4b20      	ldr	r3, [pc, #128]	@ (8004934 <HAL_RCC_ClockConfig+0x1b8>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 030f 	and.w	r3, r3, #15
 80048ba:	683a      	ldr	r2, [r7, #0]
 80048bc:	429a      	cmp	r2, r3
 80048be:	d001      	beq.n	80048c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e032      	b.n	800492a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0304 	and.w	r3, r3, #4
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d008      	beq.n	80048e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048d0:	4b19      	ldr	r3, [pc, #100]	@ (8004938 <HAL_RCC_ClockConfig+0x1bc>)
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	4916      	ldr	r1, [pc, #88]	@ (8004938 <HAL_RCC_ClockConfig+0x1bc>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0308 	and.w	r3, r3, #8
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d009      	beq.n	8004902 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048ee:	4b12      	ldr	r3, [pc, #72]	@ (8004938 <HAL_RCC_ClockConfig+0x1bc>)
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	00db      	lsls	r3, r3, #3
 80048fc:	490e      	ldr	r1, [pc, #56]	@ (8004938 <HAL_RCC_ClockConfig+0x1bc>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004902:	f000 f821 	bl	8004948 <HAL_RCC_GetSysClockFreq>
 8004906:	4602      	mov	r2, r0
 8004908:	4b0b      	ldr	r3, [pc, #44]	@ (8004938 <HAL_RCC_ClockConfig+0x1bc>)
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	091b      	lsrs	r3, r3, #4
 800490e:	f003 030f 	and.w	r3, r3, #15
 8004912:	490a      	ldr	r1, [pc, #40]	@ (800493c <HAL_RCC_ClockConfig+0x1c0>)
 8004914:	5ccb      	ldrb	r3, [r1, r3]
 8004916:	fa22 f303 	lsr.w	r3, r2, r3
 800491a:	4a09      	ldr	r2, [pc, #36]	@ (8004940 <HAL_RCC_ClockConfig+0x1c4>)
 800491c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800491e:	4b09      	ldr	r3, [pc, #36]	@ (8004944 <HAL_RCC_ClockConfig+0x1c8>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4618      	mov	r0, r3
 8004924:	f7fe f846 	bl	80029b4 <HAL_InitTick>

  return HAL_OK;
 8004928:	2300      	movs	r3, #0
}
 800492a:	4618      	mov	r0, r3
 800492c:	3710      	adds	r7, #16
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	40023c00 	.word	0x40023c00
 8004938:	40023800 	.word	0x40023800
 800493c:	08006bc0 	.word	0x08006bc0
 8004940:	20000000 	.word	0x20000000
 8004944:	2000000c 	.word	0x2000000c

08004948 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004948:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800494c:	b094      	sub	sp, #80	@ 0x50
 800494e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004950:	2300      	movs	r3, #0
 8004952:	647b      	str	r3, [r7, #68]	@ 0x44
 8004954:	2300      	movs	r3, #0
 8004956:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004958:	2300      	movs	r3, #0
 800495a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800495c:	2300      	movs	r3, #0
 800495e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004960:	4b79      	ldr	r3, [pc, #484]	@ (8004b48 <HAL_RCC_GetSysClockFreq+0x200>)
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	f003 030c 	and.w	r3, r3, #12
 8004968:	2b08      	cmp	r3, #8
 800496a:	d00d      	beq.n	8004988 <HAL_RCC_GetSysClockFreq+0x40>
 800496c:	2b08      	cmp	r3, #8
 800496e:	f200 80e1 	bhi.w	8004b34 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004972:	2b00      	cmp	r3, #0
 8004974:	d002      	beq.n	800497c <HAL_RCC_GetSysClockFreq+0x34>
 8004976:	2b04      	cmp	r3, #4
 8004978:	d003      	beq.n	8004982 <HAL_RCC_GetSysClockFreq+0x3a>
 800497a:	e0db      	b.n	8004b34 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800497c:	4b73      	ldr	r3, [pc, #460]	@ (8004b4c <HAL_RCC_GetSysClockFreq+0x204>)
 800497e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004980:	e0db      	b.n	8004b3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004982:	4b73      	ldr	r3, [pc, #460]	@ (8004b50 <HAL_RCC_GetSysClockFreq+0x208>)
 8004984:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004986:	e0d8      	b.n	8004b3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004988:	4b6f      	ldr	r3, [pc, #444]	@ (8004b48 <HAL_RCC_GetSysClockFreq+0x200>)
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004990:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004992:	4b6d      	ldr	r3, [pc, #436]	@ (8004b48 <HAL_RCC_GetSysClockFreq+0x200>)
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d063      	beq.n	8004a66 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800499e:	4b6a      	ldr	r3, [pc, #424]	@ (8004b48 <HAL_RCC_GetSysClockFreq+0x200>)
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	099b      	lsrs	r3, r3, #6
 80049a4:	2200      	movs	r2, #0
 80049a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80049a8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80049aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80049b2:	2300      	movs	r3, #0
 80049b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80049b6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80049ba:	4622      	mov	r2, r4
 80049bc:	462b      	mov	r3, r5
 80049be:	f04f 0000 	mov.w	r0, #0
 80049c2:	f04f 0100 	mov.w	r1, #0
 80049c6:	0159      	lsls	r1, r3, #5
 80049c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049cc:	0150      	lsls	r0, r2, #5
 80049ce:	4602      	mov	r2, r0
 80049d0:	460b      	mov	r3, r1
 80049d2:	4621      	mov	r1, r4
 80049d4:	1a51      	subs	r1, r2, r1
 80049d6:	6139      	str	r1, [r7, #16]
 80049d8:	4629      	mov	r1, r5
 80049da:	eb63 0301 	sbc.w	r3, r3, r1
 80049de:	617b      	str	r3, [r7, #20]
 80049e0:	f04f 0200 	mov.w	r2, #0
 80049e4:	f04f 0300 	mov.w	r3, #0
 80049e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80049ec:	4659      	mov	r1, fp
 80049ee:	018b      	lsls	r3, r1, #6
 80049f0:	4651      	mov	r1, sl
 80049f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80049f6:	4651      	mov	r1, sl
 80049f8:	018a      	lsls	r2, r1, #6
 80049fa:	4651      	mov	r1, sl
 80049fc:	ebb2 0801 	subs.w	r8, r2, r1
 8004a00:	4659      	mov	r1, fp
 8004a02:	eb63 0901 	sbc.w	r9, r3, r1
 8004a06:	f04f 0200 	mov.w	r2, #0
 8004a0a:	f04f 0300 	mov.w	r3, #0
 8004a0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a1a:	4690      	mov	r8, r2
 8004a1c:	4699      	mov	r9, r3
 8004a1e:	4623      	mov	r3, r4
 8004a20:	eb18 0303 	adds.w	r3, r8, r3
 8004a24:	60bb      	str	r3, [r7, #8]
 8004a26:	462b      	mov	r3, r5
 8004a28:	eb49 0303 	adc.w	r3, r9, r3
 8004a2c:	60fb      	str	r3, [r7, #12]
 8004a2e:	f04f 0200 	mov.w	r2, #0
 8004a32:	f04f 0300 	mov.w	r3, #0
 8004a36:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004a3a:	4629      	mov	r1, r5
 8004a3c:	024b      	lsls	r3, r1, #9
 8004a3e:	4621      	mov	r1, r4
 8004a40:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a44:	4621      	mov	r1, r4
 8004a46:	024a      	lsls	r2, r1, #9
 8004a48:	4610      	mov	r0, r2
 8004a4a:	4619      	mov	r1, r3
 8004a4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a4e:	2200      	movs	r2, #0
 8004a50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a52:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a54:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004a58:	f7fb fc22 	bl	80002a0 <__aeabi_uldivmod>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	460b      	mov	r3, r1
 8004a60:	4613      	mov	r3, r2
 8004a62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a64:	e058      	b.n	8004b18 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a66:	4b38      	ldr	r3, [pc, #224]	@ (8004b48 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	099b      	lsrs	r3, r3, #6
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	4618      	mov	r0, r3
 8004a70:	4611      	mov	r1, r2
 8004a72:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004a76:	623b      	str	r3, [r7, #32]
 8004a78:	2300      	movs	r3, #0
 8004a7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a7c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004a80:	4642      	mov	r2, r8
 8004a82:	464b      	mov	r3, r9
 8004a84:	f04f 0000 	mov.w	r0, #0
 8004a88:	f04f 0100 	mov.w	r1, #0
 8004a8c:	0159      	lsls	r1, r3, #5
 8004a8e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a92:	0150      	lsls	r0, r2, #5
 8004a94:	4602      	mov	r2, r0
 8004a96:	460b      	mov	r3, r1
 8004a98:	4641      	mov	r1, r8
 8004a9a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004a9e:	4649      	mov	r1, r9
 8004aa0:	eb63 0b01 	sbc.w	fp, r3, r1
 8004aa4:	f04f 0200 	mov.w	r2, #0
 8004aa8:	f04f 0300 	mov.w	r3, #0
 8004aac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004ab0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ab4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004ab8:	ebb2 040a 	subs.w	r4, r2, sl
 8004abc:	eb63 050b 	sbc.w	r5, r3, fp
 8004ac0:	f04f 0200 	mov.w	r2, #0
 8004ac4:	f04f 0300 	mov.w	r3, #0
 8004ac8:	00eb      	lsls	r3, r5, #3
 8004aca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ace:	00e2      	lsls	r2, r4, #3
 8004ad0:	4614      	mov	r4, r2
 8004ad2:	461d      	mov	r5, r3
 8004ad4:	4643      	mov	r3, r8
 8004ad6:	18e3      	adds	r3, r4, r3
 8004ad8:	603b      	str	r3, [r7, #0]
 8004ada:	464b      	mov	r3, r9
 8004adc:	eb45 0303 	adc.w	r3, r5, r3
 8004ae0:	607b      	str	r3, [r7, #4]
 8004ae2:	f04f 0200 	mov.w	r2, #0
 8004ae6:	f04f 0300 	mov.w	r3, #0
 8004aea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004aee:	4629      	mov	r1, r5
 8004af0:	028b      	lsls	r3, r1, #10
 8004af2:	4621      	mov	r1, r4
 8004af4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004af8:	4621      	mov	r1, r4
 8004afa:	028a      	lsls	r2, r1, #10
 8004afc:	4610      	mov	r0, r2
 8004afe:	4619      	mov	r1, r3
 8004b00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b02:	2200      	movs	r2, #0
 8004b04:	61bb      	str	r3, [r7, #24]
 8004b06:	61fa      	str	r2, [r7, #28]
 8004b08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b0c:	f7fb fbc8 	bl	80002a0 <__aeabi_uldivmod>
 8004b10:	4602      	mov	r2, r0
 8004b12:	460b      	mov	r3, r1
 8004b14:	4613      	mov	r3, r2
 8004b16:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b18:	4b0b      	ldr	r3, [pc, #44]	@ (8004b48 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	0c1b      	lsrs	r3, r3, #16
 8004b1e:	f003 0303 	and.w	r3, r3, #3
 8004b22:	3301      	adds	r3, #1
 8004b24:	005b      	lsls	r3, r3, #1
 8004b26:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004b28:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004b2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b30:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b32:	e002      	b.n	8004b3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b34:	4b05      	ldr	r3, [pc, #20]	@ (8004b4c <HAL_RCC_GetSysClockFreq+0x204>)
 8004b36:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3750      	adds	r7, #80	@ 0x50
 8004b40:	46bd      	mov	sp, r7
 8004b42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b46:	bf00      	nop
 8004b48:	40023800 	.word	0x40023800
 8004b4c:	00f42400 	.word	0x00f42400
 8004b50:	007a1200 	.word	0x007a1200

08004b54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b54:	b480      	push	{r7}
 8004b56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b58:	4b03      	ldr	r3, [pc, #12]	@ (8004b68 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	20000000 	.word	0x20000000

08004b6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b70:	f7ff fff0 	bl	8004b54 <HAL_RCC_GetHCLKFreq>
 8004b74:	4602      	mov	r2, r0
 8004b76:	4b05      	ldr	r3, [pc, #20]	@ (8004b8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	0a9b      	lsrs	r3, r3, #10
 8004b7c:	f003 0307 	and.w	r3, r3, #7
 8004b80:	4903      	ldr	r1, [pc, #12]	@ (8004b90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b82:	5ccb      	ldrb	r3, [r1, r3]
 8004b84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	40023800 	.word	0x40023800
 8004b90:	08006bd0 	.word	0x08006bd0

08004b94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004b98:	f7ff ffdc 	bl	8004b54 <HAL_RCC_GetHCLKFreq>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	4b05      	ldr	r3, [pc, #20]	@ (8004bb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	0b5b      	lsrs	r3, r3, #13
 8004ba4:	f003 0307 	and.w	r3, r3, #7
 8004ba8:	4903      	ldr	r1, [pc, #12]	@ (8004bb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004baa:	5ccb      	ldrb	r3, [r1, r3]
 8004bac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	40023800 	.word	0x40023800
 8004bb8:	08006bd0 	.word	0x08006bd0

08004bbc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d101      	bne.n	8004bce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e042      	b.n	8004c54 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d106      	bne.n	8004be8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f7fb fe0c 	bl	8000800 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2224      	movs	r2, #36	@ 0x24
 8004bec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	68da      	ldr	r2, [r3, #12]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004bfe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f000 fdbd 	bl	8005780 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	691a      	ldr	r2, [r3, #16]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004c14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	695a      	ldr	r2, [r3, #20]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004c24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	68da      	ldr	r2, [r3, #12]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004c34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2220      	movs	r2, #32
 8004c40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2220      	movs	r2, #32
 8004c48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004c52:	2300      	movs	r3, #0
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3708      	adds	r7, #8
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b08a      	sub	sp, #40	@ 0x28
 8004c60:	af02      	add	r7, sp, #8
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	603b      	str	r3, [r7, #0]
 8004c68:	4613      	mov	r3, r2
 8004c6a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	2b20      	cmp	r3, #32
 8004c7a:	d175      	bne.n	8004d68 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d002      	beq.n	8004c88 <HAL_UART_Transmit+0x2c>
 8004c82:	88fb      	ldrh	r3, [r7, #6]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d101      	bne.n	8004c8c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e06e      	b.n	8004d6a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2221      	movs	r2, #33	@ 0x21
 8004c96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c9a:	f7fd fecf 	bl	8002a3c <HAL_GetTick>
 8004c9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	88fa      	ldrh	r2, [r7, #6]
 8004ca4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	88fa      	ldrh	r2, [r7, #6]
 8004caa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cb4:	d108      	bne.n	8004cc8 <HAL_UART_Transmit+0x6c>
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d104      	bne.n	8004cc8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	61bb      	str	r3, [r7, #24]
 8004cc6:	e003      	b.n	8004cd0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004cd0:	e02e      	b.n	8004d30 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	9300      	str	r3, [sp, #0]
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	2180      	movs	r1, #128	@ 0x80
 8004cdc:	68f8      	ldr	r0, [r7, #12]
 8004cde:	f000 fb1f 	bl	8005320 <UART_WaitOnFlagUntilTimeout>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d005      	beq.n	8004cf4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2220      	movs	r2, #32
 8004cec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e03a      	b.n	8004d6a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d10b      	bne.n	8004d12 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	881b      	ldrh	r3, [r3, #0]
 8004cfe:	461a      	mov	r2, r3
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d08:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004d0a:	69bb      	ldr	r3, [r7, #24]
 8004d0c:	3302      	adds	r3, #2
 8004d0e:	61bb      	str	r3, [r7, #24]
 8004d10:	e007      	b.n	8004d22 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	781a      	ldrb	r2, [r3, #0]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	3301      	adds	r3, #1
 8004d20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	3b01      	subs	r3, #1
 8004d2a:	b29a      	uxth	r2, r3
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d1cb      	bne.n	8004cd2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	9300      	str	r3, [sp, #0]
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	2200      	movs	r2, #0
 8004d42:	2140      	movs	r1, #64	@ 0x40
 8004d44:	68f8      	ldr	r0, [r7, #12]
 8004d46:	f000 faeb 	bl	8005320 <UART_WaitOnFlagUntilTimeout>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d005      	beq.n	8004d5c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2220      	movs	r2, #32
 8004d54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004d58:	2303      	movs	r3, #3
 8004d5a:	e006      	b.n	8004d6a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2220      	movs	r2, #32
 8004d60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004d64:	2300      	movs	r3, #0
 8004d66:	e000      	b.n	8004d6a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004d68:	2302      	movs	r3, #2
  }
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3720      	adds	r7, #32
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}

08004d72 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d72:	b580      	push	{r7, lr}
 8004d74:	b084      	sub	sp, #16
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	60f8      	str	r0, [r7, #12]
 8004d7a:	60b9      	str	r1, [r7, #8]
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	2b20      	cmp	r3, #32
 8004d8a:	d112      	bne.n	8004db2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d002      	beq.n	8004d98 <HAL_UART_Receive_IT+0x26>
 8004d92:	88fb      	ldrh	r3, [r7, #6]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d101      	bne.n	8004d9c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e00b      	b.n	8004db4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004da2:	88fb      	ldrh	r3, [r7, #6]
 8004da4:	461a      	mov	r2, r3
 8004da6:	68b9      	ldr	r1, [r7, #8]
 8004da8:	68f8      	ldr	r0, [r7, #12]
 8004daa:	f000 fb12 	bl	80053d2 <UART_Start_Receive_IT>
 8004dae:	4603      	mov	r3, r0
 8004db0:	e000      	b.n	8004db4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004db2:	2302      	movs	r3, #2
  }
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3710      	adds	r7, #16
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b0ba      	sub	sp, #232	@ 0xe8
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	695b      	ldr	r3, [r3, #20]
 8004dde:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004de2:	2300      	movs	r3, #0
 8004de4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004de8:	2300      	movs	r3, #0
 8004dea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004dee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004df2:	f003 030f 	and.w	r3, r3, #15
 8004df6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004dfa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d10f      	bne.n	8004e22 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e06:	f003 0320 	and.w	r3, r3, #32
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d009      	beq.n	8004e22 <HAL_UART_IRQHandler+0x66>
 8004e0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e12:	f003 0320 	and.w	r3, r3, #32
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d003      	beq.n	8004e22 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 fbf2 	bl	8005604 <UART_Receive_IT>
      return;
 8004e20:	e25b      	b.n	80052da <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004e22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	f000 80de 	beq.w	8004fe8 <HAL_UART_IRQHandler+0x22c>
 8004e2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e30:	f003 0301 	and.w	r3, r3, #1
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d106      	bne.n	8004e46 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004e38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e3c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	f000 80d1 	beq.w	8004fe8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e4a:	f003 0301 	and.w	r3, r3, #1
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d00b      	beq.n	8004e6a <HAL_UART_IRQHandler+0xae>
 8004e52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d005      	beq.n	8004e6a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e62:	f043 0201 	orr.w	r2, r3, #1
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e6e:	f003 0304 	and.w	r3, r3, #4
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d00b      	beq.n	8004e8e <HAL_UART_IRQHandler+0xd2>
 8004e76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e7a:	f003 0301 	and.w	r3, r3, #1
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d005      	beq.n	8004e8e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e86:	f043 0202 	orr.w	r2, r3, #2
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e92:	f003 0302 	and.w	r3, r3, #2
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d00b      	beq.n	8004eb2 <HAL_UART_IRQHandler+0xf6>
 8004e9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e9e:	f003 0301 	and.w	r3, r3, #1
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d005      	beq.n	8004eb2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eaa:	f043 0204 	orr.w	r2, r3, #4
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004eb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004eb6:	f003 0308 	and.w	r3, r3, #8
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d011      	beq.n	8004ee2 <HAL_UART_IRQHandler+0x126>
 8004ebe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ec2:	f003 0320 	and.w	r3, r3, #32
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d105      	bne.n	8004ed6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004eca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ece:	f003 0301 	and.w	r3, r3, #1
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d005      	beq.n	8004ee2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eda:	f043 0208 	orr.w	r2, r3, #8
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	f000 81f2 	beq.w	80052d0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004eec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ef0:	f003 0320 	and.w	r3, r3, #32
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d008      	beq.n	8004f0a <HAL_UART_IRQHandler+0x14e>
 8004ef8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004efc:	f003 0320 	and.w	r3, r3, #32
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d002      	beq.n	8004f0a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f000 fb7d 	bl	8005604 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	695b      	ldr	r3, [r3, #20]
 8004f10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f14:	2b40      	cmp	r3, #64	@ 0x40
 8004f16:	bf0c      	ite	eq
 8004f18:	2301      	moveq	r3, #1
 8004f1a:	2300      	movne	r3, #0
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f26:	f003 0308 	and.w	r3, r3, #8
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d103      	bne.n	8004f36 <HAL_UART_IRQHandler+0x17a>
 8004f2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d04f      	beq.n	8004fd6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 fa85 	bl	8005446 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	695b      	ldr	r3, [r3, #20]
 8004f42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f46:	2b40      	cmp	r3, #64	@ 0x40
 8004f48:	d141      	bne.n	8004fce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	3314      	adds	r3, #20
 8004f50:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f54:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004f58:	e853 3f00 	ldrex	r3, [r3]
 8004f5c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004f60:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004f64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f68:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	3314      	adds	r3, #20
 8004f72:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004f76:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004f7a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f7e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004f82:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004f86:	e841 2300 	strex	r3, r2, [r1]
 8004f8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004f8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d1d9      	bne.n	8004f4a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d013      	beq.n	8004fc6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fa2:	4a7e      	ldr	r2, [pc, #504]	@ (800519c <HAL_UART_IRQHandler+0x3e0>)
 8004fa4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004faa:	4618      	mov	r0, r3
 8004fac:	f7fd fef7 	bl	8002d9e <HAL_DMA_Abort_IT>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d016      	beq.n	8004fe4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004fc0:	4610      	mov	r0, r2
 8004fc2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fc4:	e00e      	b.n	8004fe4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 f994 	bl	80052f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fcc:	e00a      	b.n	8004fe4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f000 f990 	bl	80052f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fd4:	e006      	b.n	8004fe4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 f98c 	bl	80052f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004fe2:	e175      	b.n	80052d0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fe4:	bf00      	nop
    return;
 8004fe6:	e173      	b.n	80052d0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	f040 814f 	bne.w	8005290 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004ff2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ff6:	f003 0310 	and.w	r3, r3, #16
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	f000 8148 	beq.w	8005290 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005000:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005004:	f003 0310 	and.w	r3, r3, #16
 8005008:	2b00      	cmp	r3, #0
 800500a:	f000 8141 	beq.w	8005290 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800500e:	2300      	movs	r3, #0
 8005010:	60bb      	str	r3, [r7, #8]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	60bb      	str	r3, [r7, #8]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	60bb      	str	r3, [r7, #8]
 8005022:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800502e:	2b40      	cmp	r3, #64	@ 0x40
 8005030:	f040 80b6 	bne.w	80051a0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005040:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005044:	2b00      	cmp	r3, #0
 8005046:	f000 8145 	beq.w	80052d4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800504e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005052:	429a      	cmp	r2, r3
 8005054:	f080 813e 	bcs.w	80052d4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800505e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005064:	69db      	ldr	r3, [r3, #28]
 8005066:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800506a:	f000 8088 	beq.w	800517e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	330c      	adds	r3, #12
 8005074:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005078:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800507c:	e853 3f00 	ldrex	r3, [r3]
 8005080:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005084:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005088:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800508c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	330c      	adds	r3, #12
 8005096:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800509a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800509e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80050a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80050aa:	e841 2300 	strex	r3, r2, [r1]
 80050ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80050b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d1d9      	bne.n	800506e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	3314      	adds	r3, #20
 80050c0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80050c4:	e853 3f00 	ldrex	r3, [r3]
 80050c8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80050ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80050cc:	f023 0301 	bic.w	r3, r3, #1
 80050d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	3314      	adds	r3, #20
 80050da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80050de:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80050e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80050e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80050ea:	e841 2300 	strex	r3, r2, [r1]
 80050ee:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80050f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d1e1      	bne.n	80050ba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	3314      	adds	r3, #20
 80050fc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005100:	e853 3f00 	ldrex	r3, [r3]
 8005104:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005106:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005108:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800510c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	3314      	adds	r3, #20
 8005116:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800511a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800511c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800511e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005120:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005122:	e841 2300 	strex	r3, r2, [r1]
 8005126:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005128:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1e3      	bne.n	80050f6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2220      	movs	r2, #32
 8005132:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	330c      	adds	r3, #12
 8005142:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005144:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005146:	e853 3f00 	ldrex	r3, [r3]
 800514a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800514c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800514e:	f023 0310 	bic.w	r3, r3, #16
 8005152:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	330c      	adds	r3, #12
 800515c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005160:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005162:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005164:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005166:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005168:	e841 2300 	strex	r3, r2, [r1]
 800516c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800516e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005170:	2b00      	cmp	r3, #0
 8005172:	d1e3      	bne.n	800513c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005178:	4618      	mov	r0, r3
 800517a:	f7fd fda0 	bl	8002cbe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2202      	movs	r2, #2
 8005182:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800518c:	b29b      	uxth	r3, r3
 800518e:	1ad3      	subs	r3, r2, r3
 8005190:	b29b      	uxth	r3, r3
 8005192:	4619      	mov	r1, r3
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f000 f8b7 	bl	8005308 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800519a:	e09b      	b.n	80052d4 <HAL_UART_IRQHandler+0x518>
 800519c:	0800550d 	.word	0x0800550d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	1ad3      	subs	r3, r2, r3
 80051ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	f000 808e 	beq.w	80052d8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80051bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	f000 8089 	beq.w	80052d8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	330c      	adds	r3, #12
 80051cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051d0:	e853 3f00 	ldrex	r3, [r3]
 80051d4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80051d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80051dc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	330c      	adds	r3, #12
 80051e6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80051ea:	647a      	str	r2, [r7, #68]	@ 0x44
 80051ec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80051f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80051f2:	e841 2300 	strex	r3, r2, [r1]
 80051f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80051f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d1e3      	bne.n	80051c6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	3314      	adds	r3, #20
 8005204:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005208:	e853 3f00 	ldrex	r3, [r3]
 800520c:	623b      	str	r3, [r7, #32]
   return(result);
 800520e:	6a3b      	ldr	r3, [r7, #32]
 8005210:	f023 0301 	bic.w	r3, r3, #1
 8005214:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	3314      	adds	r3, #20
 800521e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005222:	633a      	str	r2, [r7, #48]	@ 0x30
 8005224:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005226:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005228:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800522a:	e841 2300 	strex	r3, r2, [r1]
 800522e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005232:	2b00      	cmp	r3, #0
 8005234:	d1e3      	bne.n	80051fe <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2220      	movs	r2, #32
 800523a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	330c      	adds	r3, #12
 800524a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	e853 3f00 	ldrex	r3, [r3]
 8005252:	60fb      	str	r3, [r7, #12]
   return(result);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f023 0310 	bic.w	r3, r3, #16
 800525a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	330c      	adds	r3, #12
 8005264:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005268:	61fa      	str	r2, [r7, #28]
 800526a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800526c:	69b9      	ldr	r1, [r7, #24]
 800526e:	69fa      	ldr	r2, [r7, #28]
 8005270:	e841 2300 	strex	r3, r2, [r1]
 8005274:	617b      	str	r3, [r7, #20]
   return(result);
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d1e3      	bne.n	8005244 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2202      	movs	r2, #2
 8005280:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005282:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005286:	4619      	mov	r1, r3
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f000 f83d 	bl	8005308 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800528e:	e023      	b.n	80052d8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005290:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005294:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005298:	2b00      	cmp	r3, #0
 800529a:	d009      	beq.n	80052b0 <HAL_UART_IRQHandler+0x4f4>
 800529c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d003      	beq.n	80052b0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f000 f943 	bl	8005534 <UART_Transmit_IT>
    return;
 80052ae:	e014      	b.n	80052da <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80052b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d00e      	beq.n	80052da <HAL_UART_IRQHandler+0x51e>
 80052bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d008      	beq.n	80052da <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f000 f983 	bl	80055d4 <UART_EndTransmit_IT>
    return;
 80052ce:	e004      	b.n	80052da <HAL_UART_IRQHandler+0x51e>
    return;
 80052d0:	bf00      	nop
 80052d2:	e002      	b.n	80052da <HAL_UART_IRQHandler+0x51e>
      return;
 80052d4:	bf00      	nop
 80052d6:	e000      	b.n	80052da <HAL_UART_IRQHandler+0x51e>
      return;
 80052d8:	bf00      	nop
  }
}
 80052da:	37e8      	adds	r7, #232	@ 0xe8
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80052e8:	bf00      	nop
 80052ea:	370c      	adds	r7, #12
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80052fc:	bf00      	nop
 80052fe:	370c      	adds	r7, #12
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	460b      	mov	r3, r1
 8005312:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005314:	bf00      	nop
 8005316:	370c      	adds	r7, #12
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b086      	sub	sp, #24
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	603b      	str	r3, [r7, #0]
 800532c:	4613      	mov	r3, r2
 800532e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005330:	e03b      	b.n	80053aa <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005332:	6a3b      	ldr	r3, [r7, #32]
 8005334:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005338:	d037      	beq.n	80053aa <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800533a:	f7fd fb7f 	bl	8002a3c <HAL_GetTick>
 800533e:	4602      	mov	r2, r0
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	6a3a      	ldr	r2, [r7, #32]
 8005346:	429a      	cmp	r2, r3
 8005348:	d302      	bcc.n	8005350 <UART_WaitOnFlagUntilTimeout+0x30>
 800534a:	6a3b      	ldr	r3, [r7, #32]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d101      	bne.n	8005354 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005350:	2303      	movs	r3, #3
 8005352:	e03a      	b.n	80053ca <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	f003 0304 	and.w	r3, r3, #4
 800535e:	2b00      	cmp	r3, #0
 8005360:	d023      	beq.n	80053aa <UART_WaitOnFlagUntilTimeout+0x8a>
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	2b80      	cmp	r3, #128	@ 0x80
 8005366:	d020      	beq.n	80053aa <UART_WaitOnFlagUntilTimeout+0x8a>
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	2b40      	cmp	r3, #64	@ 0x40
 800536c:	d01d      	beq.n	80053aa <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 0308 	and.w	r3, r3, #8
 8005378:	2b08      	cmp	r3, #8
 800537a:	d116      	bne.n	80053aa <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800537c:	2300      	movs	r3, #0
 800537e:	617b      	str	r3, [r7, #20]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	617b      	str	r3, [r7, #20]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	617b      	str	r3, [r7, #20]
 8005390:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005392:	68f8      	ldr	r0, [r7, #12]
 8005394:	f000 f857 	bl	8005446 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2208      	movs	r2, #8
 800539c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e00f      	b.n	80053ca <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	4013      	ands	r3, r2
 80053b4:	68ba      	ldr	r2, [r7, #8]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	bf0c      	ite	eq
 80053ba:	2301      	moveq	r3, #1
 80053bc:	2300      	movne	r3, #0
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	461a      	mov	r2, r3
 80053c2:	79fb      	ldrb	r3, [r7, #7]
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d0b4      	beq.n	8005332 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3718      	adds	r7, #24
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}

080053d2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053d2:	b480      	push	{r7}
 80053d4:	b085      	sub	sp, #20
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	60f8      	str	r0, [r7, #12]
 80053da:	60b9      	str	r1, [r7, #8]
 80053dc:	4613      	mov	r3, r2
 80053de:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	68ba      	ldr	r2, [r7, #8]
 80053e4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	88fa      	ldrh	r2, [r7, #6]
 80053ea:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	88fa      	ldrh	r2, [r7, #6]
 80053f0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2200      	movs	r2, #0
 80053f6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2222      	movs	r2, #34	@ 0x22
 80053fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	691b      	ldr	r3, [r3, #16]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d007      	beq.n	8005418 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	68da      	ldr	r2, [r3, #12]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005416:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	695a      	ldr	r2, [r3, #20]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f042 0201 	orr.w	r2, r2, #1
 8005426:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	68da      	ldr	r2, [r3, #12]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f042 0220 	orr.w	r2, r2, #32
 8005436:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005438:	2300      	movs	r3, #0
}
 800543a:	4618      	mov	r0, r3
 800543c:	3714      	adds	r7, #20
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr

08005446 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005446:	b480      	push	{r7}
 8005448:	b095      	sub	sp, #84	@ 0x54
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	330c      	adds	r3, #12
 8005454:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005456:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005458:	e853 3f00 	ldrex	r3, [r3]
 800545c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800545e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005460:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005464:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	330c      	adds	r3, #12
 800546c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800546e:	643a      	str	r2, [r7, #64]	@ 0x40
 8005470:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005472:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005474:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005476:	e841 2300 	strex	r3, r2, [r1]
 800547a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800547c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800547e:	2b00      	cmp	r3, #0
 8005480:	d1e5      	bne.n	800544e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	3314      	adds	r3, #20
 8005488:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800548a:	6a3b      	ldr	r3, [r7, #32]
 800548c:	e853 3f00 	ldrex	r3, [r3]
 8005490:	61fb      	str	r3, [r7, #28]
   return(result);
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	f023 0301 	bic.w	r3, r3, #1
 8005498:	64bb      	str	r3, [r7, #72]	@ 0x48
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	3314      	adds	r3, #20
 80054a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80054a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80054a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80054a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054aa:	e841 2300 	strex	r3, r2, [r1]
 80054ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80054b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d1e5      	bne.n	8005482 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d119      	bne.n	80054f2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	330c      	adds	r3, #12
 80054c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	e853 3f00 	ldrex	r3, [r3]
 80054cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	f023 0310 	bic.w	r3, r3, #16
 80054d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	330c      	adds	r3, #12
 80054dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80054de:	61ba      	str	r2, [r7, #24]
 80054e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e2:	6979      	ldr	r1, [r7, #20]
 80054e4:	69ba      	ldr	r2, [r7, #24]
 80054e6:	e841 2300 	strex	r3, r2, [r1]
 80054ea:	613b      	str	r3, [r7, #16]
   return(result);
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d1e5      	bne.n	80054be <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2220      	movs	r2, #32
 80054f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005500:	bf00      	nop
 8005502:	3754      	adds	r7, #84	@ 0x54
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005518:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2200      	movs	r2, #0
 800551e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2200      	movs	r2, #0
 8005524:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005526:	68f8      	ldr	r0, [r7, #12]
 8005528:	f7ff fee4 	bl	80052f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800552c:	bf00      	nop
 800552e:	3710      	adds	r7, #16
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}

08005534 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005534:	b480      	push	{r7}
 8005536:	b085      	sub	sp, #20
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005542:	b2db      	uxtb	r3, r3
 8005544:	2b21      	cmp	r3, #33	@ 0x21
 8005546:	d13e      	bne.n	80055c6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005550:	d114      	bne.n	800557c <UART_Transmit_IT+0x48>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	691b      	ldr	r3, [r3, #16]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d110      	bne.n	800557c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a1b      	ldr	r3, [r3, #32]
 800555e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	881b      	ldrh	r3, [r3, #0]
 8005564:	461a      	mov	r2, r3
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800556e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6a1b      	ldr	r3, [r3, #32]
 8005574:	1c9a      	adds	r2, r3, #2
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	621a      	str	r2, [r3, #32]
 800557a:	e008      	b.n	800558e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6a1b      	ldr	r3, [r3, #32]
 8005580:	1c59      	adds	r1, r3, #1
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	6211      	str	r1, [r2, #32]
 8005586:	781a      	ldrb	r2, [r3, #0]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005592:	b29b      	uxth	r3, r3
 8005594:	3b01      	subs	r3, #1
 8005596:	b29b      	uxth	r3, r3
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	4619      	mov	r1, r3
 800559c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d10f      	bne.n	80055c2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	68da      	ldr	r2, [r3, #12]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80055b0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	68da      	ldr	r2, [r3, #12]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80055c0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80055c2:	2300      	movs	r3, #0
 80055c4:	e000      	b.n	80055c8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80055c6:	2302      	movs	r3, #2
  }
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3714      	adds	r7, #20
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	68da      	ldr	r2, [r3, #12]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055ea:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2220      	movs	r2, #32
 80055f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f7ff fe73 	bl	80052e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80055fa:	2300      	movs	r3, #0
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3708      	adds	r7, #8
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}

08005604 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b08c      	sub	sp, #48	@ 0x30
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005612:	b2db      	uxtb	r3, r3
 8005614:	2b22      	cmp	r3, #34	@ 0x22
 8005616:	f040 80ae 	bne.w	8005776 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005622:	d117      	bne.n	8005654 <UART_Receive_IT+0x50>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	691b      	ldr	r3, [r3, #16]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d113      	bne.n	8005654 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800562c:	2300      	movs	r3, #0
 800562e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005634:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	b29b      	uxth	r3, r3
 800563e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005642:	b29a      	uxth	r2, r3
 8005644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005646:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800564c:	1c9a      	adds	r2, r3, #2
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	629a      	str	r2, [r3, #40]	@ 0x28
 8005652:	e026      	b.n	80056a2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005658:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800565a:	2300      	movs	r3, #0
 800565c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005666:	d007      	beq.n	8005678 <UART_Receive_IT+0x74>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d10a      	bne.n	8005686 <UART_Receive_IT+0x82>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	691b      	ldr	r3, [r3, #16]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d106      	bne.n	8005686 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	b2da      	uxtb	r2, r3
 8005680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005682:	701a      	strb	r2, [r3, #0]
 8005684:	e008      	b.n	8005698 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	b2db      	uxtb	r3, r3
 800568e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005692:	b2da      	uxtb	r2, r3
 8005694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005696:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800569c:	1c5a      	adds	r2, r3, #1
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	3b01      	subs	r3, #1
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	4619      	mov	r1, r3
 80056b0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d15d      	bne.n	8005772 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	68da      	ldr	r2, [r3, #12]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f022 0220 	bic.w	r2, r2, #32
 80056c4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	68da      	ldr	r2, [r3, #12]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80056d4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	695a      	ldr	r2, [r3, #20]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f022 0201 	bic.w	r2, r2, #1
 80056e4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2220      	movs	r2, #32
 80056ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d135      	bne.n	8005768 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	330c      	adds	r3, #12
 8005708:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	e853 3f00 	ldrex	r3, [r3]
 8005710:	613b      	str	r3, [r7, #16]
   return(result);
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	f023 0310 	bic.w	r3, r3, #16
 8005718:	627b      	str	r3, [r7, #36]	@ 0x24
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	330c      	adds	r3, #12
 8005720:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005722:	623a      	str	r2, [r7, #32]
 8005724:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005726:	69f9      	ldr	r1, [r7, #28]
 8005728:	6a3a      	ldr	r2, [r7, #32]
 800572a:	e841 2300 	strex	r3, r2, [r1]
 800572e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d1e5      	bne.n	8005702 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 0310 	and.w	r3, r3, #16
 8005740:	2b10      	cmp	r3, #16
 8005742:	d10a      	bne.n	800575a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005744:	2300      	movs	r3, #0
 8005746:	60fb      	str	r3, [r7, #12]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	60fb      	str	r3, [r7, #12]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	60fb      	str	r3, [r7, #12]
 8005758:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800575e:	4619      	mov	r1, r3
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f7ff fdd1 	bl	8005308 <HAL_UARTEx_RxEventCallback>
 8005766:	e002      	b.n	800576e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f7fb ff5d 	bl	8001628 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800576e:	2300      	movs	r3, #0
 8005770:	e002      	b.n	8005778 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005772:	2300      	movs	r3, #0
 8005774:	e000      	b.n	8005778 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005776:	2302      	movs	r3, #2
  }
}
 8005778:	4618      	mov	r0, r3
 800577a:	3730      	adds	r7, #48	@ 0x30
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}

08005780 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005780:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005784:	b0c0      	sub	sp, #256	@ 0x100
 8005786:	af00      	add	r7, sp, #0
 8005788:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800578c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	691b      	ldr	r3, [r3, #16]
 8005794:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800579c:	68d9      	ldr	r1, [r3, #12]
 800579e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	ea40 0301 	orr.w	r3, r0, r1
 80057a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80057aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057ae:	689a      	ldr	r2, [r3, #8]
 80057b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	431a      	orrs	r2, r3
 80057b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057bc:	695b      	ldr	r3, [r3, #20]
 80057be:	431a      	orrs	r2, r3
 80057c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057c4:	69db      	ldr	r3, [r3, #28]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80057cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80057d8:	f021 010c 	bic.w	r1, r1, #12
 80057dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80057e6:	430b      	orrs	r3, r1
 80057e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80057ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	695b      	ldr	r3, [r3, #20]
 80057f2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80057f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057fa:	6999      	ldr	r1, [r3, #24]
 80057fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	ea40 0301 	orr.w	r3, r0, r1
 8005806:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	4b8f      	ldr	r3, [pc, #572]	@ (8005a4c <UART_SetConfig+0x2cc>)
 8005810:	429a      	cmp	r2, r3
 8005812:	d005      	beq.n	8005820 <UART_SetConfig+0xa0>
 8005814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	4b8d      	ldr	r3, [pc, #564]	@ (8005a50 <UART_SetConfig+0x2d0>)
 800581c:	429a      	cmp	r2, r3
 800581e:	d104      	bne.n	800582a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005820:	f7ff f9b8 	bl	8004b94 <HAL_RCC_GetPCLK2Freq>
 8005824:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005828:	e003      	b.n	8005832 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800582a:	f7ff f99f 	bl	8004b6c <HAL_RCC_GetPCLK1Freq>
 800582e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005836:	69db      	ldr	r3, [r3, #28]
 8005838:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800583c:	f040 810c 	bne.w	8005a58 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005840:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005844:	2200      	movs	r2, #0
 8005846:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800584a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800584e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005852:	4622      	mov	r2, r4
 8005854:	462b      	mov	r3, r5
 8005856:	1891      	adds	r1, r2, r2
 8005858:	65b9      	str	r1, [r7, #88]	@ 0x58
 800585a:	415b      	adcs	r3, r3
 800585c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800585e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005862:	4621      	mov	r1, r4
 8005864:	eb12 0801 	adds.w	r8, r2, r1
 8005868:	4629      	mov	r1, r5
 800586a:	eb43 0901 	adc.w	r9, r3, r1
 800586e:	f04f 0200 	mov.w	r2, #0
 8005872:	f04f 0300 	mov.w	r3, #0
 8005876:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800587a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800587e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005882:	4690      	mov	r8, r2
 8005884:	4699      	mov	r9, r3
 8005886:	4623      	mov	r3, r4
 8005888:	eb18 0303 	adds.w	r3, r8, r3
 800588c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005890:	462b      	mov	r3, r5
 8005892:	eb49 0303 	adc.w	r3, r9, r3
 8005896:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800589a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80058a6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80058aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80058ae:	460b      	mov	r3, r1
 80058b0:	18db      	adds	r3, r3, r3
 80058b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80058b4:	4613      	mov	r3, r2
 80058b6:	eb42 0303 	adc.w	r3, r2, r3
 80058ba:	657b      	str	r3, [r7, #84]	@ 0x54
 80058bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80058c0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80058c4:	f7fa fcec 	bl	80002a0 <__aeabi_uldivmod>
 80058c8:	4602      	mov	r2, r0
 80058ca:	460b      	mov	r3, r1
 80058cc:	4b61      	ldr	r3, [pc, #388]	@ (8005a54 <UART_SetConfig+0x2d4>)
 80058ce:	fba3 2302 	umull	r2, r3, r3, r2
 80058d2:	095b      	lsrs	r3, r3, #5
 80058d4:	011c      	lsls	r4, r3, #4
 80058d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058da:	2200      	movs	r2, #0
 80058dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80058e0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80058e4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80058e8:	4642      	mov	r2, r8
 80058ea:	464b      	mov	r3, r9
 80058ec:	1891      	adds	r1, r2, r2
 80058ee:	64b9      	str	r1, [r7, #72]	@ 0x48
 80058f0:	415b      	adcs	r3, r3
 80058f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058f4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80058f8:	4641      	mov	r1, r8
 80058fa:	eb12 0a01 	adds.w	sl, r2, r1
 80058fe:	4649      	mov	r1, r9
 8005900:	eb43 0b01 	adc.w	fp, r3, r1
 8005904:	f04f 0200 	mov.w	r2, #0
 8005908:	f04f 0300 	mov.w	r3, #0
 800590c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005910:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005914:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005918:	4692      	mov	sl, r2
 800591a:	469b      	mov	fp, r3
 800591c:	4643      	mov	r3, r8
 800591e:	eb1a 0303 	adds.w	r3, sl, r3
 8005922:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005926:	464b      	mov	r3, r9
 8005928:	eb4b 0303 	adc.w	r3, fp, r3
 800592c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800593c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005940:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005944:	460b      	mov	r3, r1
 8005946:	18db      	adds	r3, r3, r3
 8005948:	643b      	str	r3, [r7, #64]	@ 0x40
 800594a:	4613      	mov	r3, r2
 800594c:	eb42 0303 	adc.w	r3, r2, r3
 8005950:	647b      	str	r3, [r7, #68]	@ 0x44
 8005952:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005956:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800595a:	f7fa fca1 	bl	80002a0 <__aeabi_uldivmod>
 800595e:	4602      	mov	r2, r0
 8005960:	460b      	mov	r3, r1
 8005962:	4611      	mov	r1, r2
 8005964:	4b3b      	ldr	r3, [pc, #236]	@ (8005a54 <UART_SetConfig+0x2d4>)
 8005966:	fba3 2301 	umull	r2, r3, r3, r1
 800596a:	095b      	lsrs	r3, r3, #5
 800596c:	2264      	movs	r2, #100	@ 0x64
 800596e:	fb02 f303 	mul.w	r3, r2, r3
 8005972:	1acb      	subs	r3, r1, r3
 8005974:	00db      	lsls	r3, r3, #3
 8005976:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800597a:	4b36      	ldr	r3, [pc, #216]	@ (8005a54 <UART_SetConfig+0x2d4>)
 800597c:	fba3 2302 	umull	r2, r3, r3, r2
 8005980:	095b      	lsrs	r3, r3, #5
 8005982:	005b      	lsls	r3, r3, #1
 8005984:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005988:	441c      	add	r4, r3
 800598a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800598e:	2200      	movs	r2, #0
 8005990:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005994:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005998:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800599c:	4642      	mov	r2, r8
 800599e:	464b      	mov	r3, r9
 80059a0:	1891      	adds	r1, r2, r2
 80059a2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80059a4:	415b      	adcs	r3, r3
 80059a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80059ac:	4641      	mov	r1, r8
 80059ae:	1851      	adds	r1, r2, r1
 80059b0:	6339      	str	r1, [r7, #48]	@ 0x30
 80059b2:	4649      	mov	r1, r9
 80059b4:	414b      	adcs	r3, r1
 80059b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80059b8:	f04f 0200 	mov.w	r2, #0
 80059bc:	f04f 0300 	mov.w	r3, #0
 80059c0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80059c4:	4659      	mov	r1, fp
 80059c6:	00cb      	lsls	r3, r1, #3
 80059c8:	4651      	mov	r1, sl
 80059ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059ce:	4651      	mov	r1, sl
 80059d0:	00ca      	lsls	r2, r1, #3
 80059d2:	4610      	mov	r0, r2
 80059d4:	4619      	mov	r1, r3
 80059d6:	4603      	mov	r3, r0
 80059d8:	4642      	mov	r2, r8
 80059da:	189b      	adds	r3, r3, r2
 80059dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80059e0:	464b      	mov	r3, r9
 80059e2:	460a      	mov	r2, r1
 80059e4:	eb42 0303 	adc.w	r3, r2, r3
 80059e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80059ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80059f8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80059fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005a00:	460b      	mov	r3, r1
 8005a02:	18db      	adds	r3, r3, r3
 8005a04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a06:	4613      	mov	r3, r2
 8005a08:	eb42 0303 	adc.w	r3, r2, r3
 8005a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005a12:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005a16:	f7fa fc43 	bl	80002a0 <__aeabi_uldivmod>
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	460b      	mov	r3, r1
 8005a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8005a54 <UART_SetConfig+0x2d4>)
 8005a20:	fba3 1302 	umull	r1, r3, r3, r2
 8005a24:	095b      	lsrs	r3, r3, #5
 8005a26:	2164      	movs	r1, #100	@ 0x64
 8005a28:	fb01 f303 	mul.w	r3, r1, r3
 8005a2c:	1ad3      	subs	r3, r2, r3
 8005a2e:	00db      	lsls	r3, r3, #3
 8005a30:	3332      	adds	r3, #50	@ 0x32
 8005a32:	4a08      	ldr	r2, [pc, #32]	@ (8005a54 <UART_SetConfig+0x2d4>)
 8005a34:	fba2 2303 	umull	r2, r3, r2, r3
 8005a38:	095b      	lsrs	r3, r3, #5
 8005a3a:	f003 0207 	and.w	r2, r3, #7
 8005a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4422      	add	r2, r4
 8005a46:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005a48:	e106      	b.n	8005c58 <UART_SetConfig+0x4d8>
 8005a4a:	bf00      	nop
 8005a4c:	40011000 	.word	0x40011000
 8005a50:	40011400 	.word	0x40011400
 8005a54:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005a62:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005a66:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005a6a:	4642      	mov	r2, r8
 8005a6c:	464b      	mov	r3, r9
 8005a6e:	1891      	adds	r1, r2, r2
 8005a70:	6239      	str	r1, [r7, #32]
 8005a72:	415b      	adcs	r3, r3
 8005a74:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005a7a:	4641      	mov	r1, r8
 8005a7c:	1854      	adds	r4, r2, r1
 8005a7e:	4649      	mov	r1, r9
 8005a80:	eb43 0501 	adc.w	r5, r3, r1
 8005a84:	f04f 0200 	mov.w	r2, #0
 8005a88:	f04f 0300 	mov.w	r3, #0
 8005a8c:	00eb      	lsls	r3, r5, #3
 8005a8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a92:	00e2      	lsls	r2, r4, #3
 8005a94:	4614      	mov	r4, r2
 8005a96:	461d      	mov	r5, r3
 8005a98:	4643      	mov	r3, r8
 8005a9a:	18e3      	adds	r3, r4, r3
 8005a9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005aa0:	464b      	mov	r3, r9
 8005aa2:	eb45 0303 	adc.w	r3, r5, r3
 8005aa6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005ab6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005aba:	f04f 0200 	mov.w	r2, #0
 8005abe:	f04f 0300 	mov.w	r3, #0
 8005ac2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005ac6:	4629      	mov	r1, r5
 8005ac8:	008b      	lsls	r3, r1, #2
 8005aca:	4621      	mov	r1, r4
 8005acc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ad0:	4621      	mov	r1, r4
 8005ad2:	008a      	lsls	r2, r1, #2
 8005ad4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005ad8:	f7fa fbe2 	bl	80002a0 <__aeabi_uldivmod>
 8005adc:	4602      	mov	r2, r0
 8005ade:	460b      	mov	r3, r1
 8005ae0:	4b60      	ldr	r3, [pc, #384]	@ (8005c64 <UART_SetConfig+0x4e4>)
 8005ae2:	fba3 2302 	umull	r2, r3, r3, r2
 8005ae6:	095b      	lsrs	r3, r3, #5
 8005ae8:	011c      	lsls	r4, r3, #4
 8005aea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005aee:	2200      	movs	r2, #0
 8005af0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005af4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005af8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005afc:	4642      	mov	r2, r8
 8005afe:	464b      	mov	r3, r9
 8005b00:	1891      	adds	r1, r2, r2
 8005b02:	61b9      	str	r1, [r7, #24]
 8005b04:	415b      	adcs	r3, r3
 8005b06:	61fb      	str	r3, [r7, #28]
 8005b08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b0c:	4641      	mov	r1, r8
 8005b0e:	1851      	adds	r1, r2, r1
 8005b10:	6139      	str	r1, [r7, #16]
 8005b12:	4649      	mov	r1, r9
 8005b14:	414b      	adcs	r3, r1
 8005b16:	617b      	str	r3, [r7, #20]
 8005b18:	f04f 0200 	mov.w	r2, #0
 8005b1c:	f04f 0300 	mov.w	r3, #0
 8005b20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b24:	4659      	mov	r1, fp
 8005b26:	00cb      	lsls	r3, r1, #3
 8005b28:	4651      	mov	r1, sl
 8005b2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b2e:	4651      	mov	r1, sl
 8005b30:	00ca      	lsls	r2, r1, #3
 8005b32:	4610      	mov	r0, r2
 8005b34:	4619      	mov	r1, r3
 8005b36:	4603      	mov	r3, r0
 8005b38:	4642      	mov	r2, r8
 8005b3a:	189b      	adds	r3, r3, r2
 8005b3c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005b40:	464b      	mov	r3, r9
 8005b42:	460a      	mov	r2, r1
 8005b44:	eb42 0303 	adc.w	r3, r2, r3
 8005b48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005b56:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005b58:	f04f 0200 	mov.w	r2, #0
 8005b5c:	f04f 0300 	mov.w	r3, #0
 8005b60:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005b64:	4649      	mov	r1, r9
 8005b66:	008b      	lsls	r3, r1, #2
 8005b68:	4641      	mov	r1, r8
 8005b6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b6e:	4641      	mov	r1, r8
 8005b70:	008a      	lsls	r2, r1, #2
 8005b72:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005b76:	f7fa fb93 	bl	80002a0 <__aeabi_uldivmod>
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	460b      	mov	r3, r1
 8005b7e:	4611      	mov	r1, r2
 8005b80:	4b38      	ldr	r3, [pc, #224]	@ (8005c64 <UART_SetConfig+0x4e4>)
 8005b82:	fba3 2301 	umull	r2, r3, r3, r1
 8005b86:	095b      	lsrs	r3, r3, #5
 8005b88:	2264      	movs	r2, #100	@ 0x64
 8005b8a:	fb02 f303 	mul.w	r3, r2, r3
 8005b8e:	1acb      	subs	r3, r1, r3
 8005b90:	011b      	lsls	r3, r3, #4
 8005b92:	3332      	adds	r3, #50	@ 0x32
 8005b94:	4a33      	ldr	r2, [pc, #204]	@ (8005c64 <UART_SetConfig+0x4e4>)
 8005b96:	fba2 2303 	umull	r2, r3, r2, r3
 8005b9a:	095b      	lsrs	r3, r3, #5
 8005b9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005ba0:	441c      	add	r4, r3
 8005ba2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	673b      	str	r3, [r7, #112]	@ 0x70
 8005baa:	677a      	str	r2, [r7, #116]	@ 0x74
 8005bac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005bb0:	4642      	mov	r2, r8
 8005bb2:	464b      	mov	r3, r9
 8005bb4:	1891      	adds	r1, r2, r2
 8005bb6:	60b9      	str	r1, [r7, #8]
 8005bb8:	415b      	adcs	r3, r3
 8005bba:	60fb      	str	r3, [r7, #12]
 8005bbc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005bc0:	4641      	mov	r1, r8
 8005bc2:	1851      	adds	r1, r2, r1
 8005bc4:	6039      	str	r1, [r7, #0]
 8005bc6:	4649      	mov	r1, r9
 8005bc8:	414b      	adcs	r3, r1
 8005bca:	607b      	str	r3, [r7, #4]
 8005bcc:	f04f 0200 	mov.w	r2, #0
 8005bd0:	f04f 0300 	mov.w	r3, #0
 8005bd4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005bd8:	4659      	mov	r1, fp
 8005bda:	00cb      	lsls	r3, r1, #3
 8005bdc:	4651      	mov	r1, sl
 8005bde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005be2:	4651      	mov	r1, sl
 8005be4:	00ca      	lsls	r2, r1, #3
 8005be6:	4610      	mov	r0, r2
 8005be8:	4619      	mov	r1, r3
 8005bea:	4603      	mov	r3, r0
 8005bec:	4642      	mov	r2, r8
 8005bee:	189b      	adds	r3, r3, r2
 8005bf0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005bf2:	464b      	mov	r3, r9
 8005bf4:	460a      	mov	r2, r1
 8005bf6:	eb42 0303 	adc.w	r3, r2, r3
 8005bfa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	663b      	str	r3, [r7, #96]	@ 0x60
 8005c06:	667a      	str	r2, [r7, #100]	@ 0x64
 8005c08:	f04f 0200 	mov.w	r2, #0
 8005c0c:	f04f 0300 	mov.w	r3, #0
 8005c10:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005c14:	4649      	mov	r1, r9
 8005c16:	008b      	lsls	r3, r1, #2
 8005c18:	4641      	mov	r1, r8
 8005c1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c1e:	4641      	mov	r1, r8
 8005c20:	008a      	lsls	r2, r1, #2
 8005c22:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005c26:	f7fa fb3b 	bl	80002a0 <__aeabi_uldivmod>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	460b      	mov	r3, r1
 8005c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8005c64 <UART_SetConfig+0x4e4>)
 8005c30:	fba3 1302 	umull	r1, r3, r3, r2
 8005c34:	095b      	lsrs	r3, r3, #5
 8005c36:	2164      	movs	r1, #100	@ 0x64
 8005c38:	fb01 f303 	mul.w	r3, r1, r3
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	011b      	lsls	r3, r3, #4
 8005c40:	3332      	adds	r3, #50	@ 0x32
 8005c42:	4a08      	ldr	r2, [pc, #32]	@ (8005c64 <UART_SetConfig+0x4e4>)
 8005c44:	fba2 2303 	umull	r2, r3, r2, r3
 8005c48:	095b      	lsrs	r3, r3, #5
 8005c4a:	f003 020f 	and.w	r2, r3, #15
 8005c4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4422      	add	r2, r4
 8005c56:	609a      	str	r2, [r3, #8]
}
 8005c58:	bf00      	nop
 8005c5a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c64:	51eb851f 	.word	0x51eb851f

08005c68 <siscanf>:
 8005c68:	b40e      	push	{r1, r2, r3}
 8005c6a:	b530      	push	{r4, r5, lr}
 8005c6c:	b09c      	sub	sp, #112	@ 0x70
 8005c6e:	ac1f      	add	r4, sp, #124	@ 0x7c
 8005c70:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8005c74:	f854 5b04 	ldr.w	r5, [r4], #4
 8005c78:	f8ad 2014 	strh.w	r2, [sp, #20]
 8005c7c:	9002      	str	r0, [sp, #8]
 8005c7e:	9006      	str	r0, [sp, #24]
 8005c80:	f7fa fab6 	bl	80001f0 <strlen>
 8005c84:	4b0b      	ldr	r3, [pc, #44]	@ (8005cb4 <siscanf+0x4c>)
 8005c86:	9003      	str	r0, [sp, #12]
 8005c88:	9007      	str	r0, [sp, #28]
 8005c8a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005c8c:	480a      	ldr	r0, [pc, #40]	@ (8005cb8 <siscanf+0x50>)
 8005c8e:	9401      	str	r4, [sp, #4]
 8005c90:	2300      	movs	r3, #0
 8005c92:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005c94:	9314      	str	r3, [sp, #80]	@ 0x50
 8005c96:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005c9a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005c9e:	462a      	mov	r2, r5
 8005ca0:	4623      	mov	r3, r4
 8005ca2:	a902      	add	r1, sp, #8
 8005ca4:	6800      	ldr	r0, [r0, #0]
 8005ca6:	f000 f98f 	bl	8005fc8 <__ssvfiscanf_r>
 8005caa:	b01c      	add	sp, #112	@ 0x70
 8005cac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005cb0:	b003      	add	sp, #12
 8005cb2:	4770      	bx	lr
 8005cb4:	08005cbd 	.word	0x08005cbd
 8005cb8:	20000014 	.word	0x20000014

08005cbc <__seofread>:
 8005cbc:	2000      	movs	r0, #0
 8005cbe:	4770      	bx	lr

08005cc0 <memset>:
 8005cc0:	4402      	add	r2, r0
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d100      	bne.n	8005cca <memset+0xa>
 8005cc8:	4770      	bx	lr
 8005cca:	f803 1b01 	strb.w	r1, [r3], #1
 8005cce:	e7f9      	b.n	8005cc4 <memset+0x4>

08005cd0 <__errno>:
 8005cd0:	4b01      	ldr	r3, [pc, #4]	@ (8005cd8 <__errno+0x8>)
 8005cd2:	6818      	ldr	r0, [r3, #0]
 8005cd4:	4770      	bx	lr
 8005cd6:	bf00      	nop
 8005cd8:	20000014 	.word	0x20000014

08005cdc <__libc_init_array>:
 8005cdc:	b570      	push	{r4, r5, r6, lr}
 8005cde:	4d0d      	ldr	r5, [pc, #52]	@ (8005d14 <__libc_init_array+0x38>)
 8005ce0:	4c0d      	ldr	r4, [pc, #52]	@ (8005d18 <__libc_init_array+0x3c>)
 8005ce2:	1b64      	subs	r4, r4, r5
 8005ce4:	10a4      	asrs	r4, r4, #2
 8005ce6:	2600      	movs	r6, #0
 8005ce8:	42a6      	cmp	r6, r4
 8005cea:	d109      	bne.n	8005d00 <__libc_init_array+0x24>
 8005cec:	4d0b      	ldr	r5, [pc, #44]	@ (8005d1c <__libc_init_array+0x40>)
 8005cee:	4c0c      	ldr	r4, [pc, #48]	@ (8005d20 <__libc_init_array+0x44>)
 8005cf0:	f000 fde0 	bl	80068b4 <_init>
 8005cf4:	1b64      	subs	r4, r4, r5
 8005cf6:	10a4      	asrs	r4, r4, #2
 8005cf8:	2600      	movs	r6, #0
 8005cfa:	42a6      	cmp	r6, r4
 8005cfc:	d105      	bne.n	8005d0a <__libc_init_array+0x2e>
 8005cfe:	bd70      	pop	{r4, r5, r6, pc}
 8005d00:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d04:	4798      	blx	r3
 8005d06:	3601      	adds	r6, #1
 8005d08:	e7ee      	b.n	8005ce8 <__libc_init_array+0xc>
 8005d0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d0e:	4798      	blx	r3
 8005d10:	3601      	adds	r6, #1
 8005d12:	e7f2      	b.n	8005cfa <__libc_init_array+0x1e>
 8005d14:	08006d00 	.word	0x08006d00
 8005d18:	08006d00 	.word	0x08006d00
 8005d1c:	08006d00 	.word	0x08006d00
 8005d20:	08006d04 	.word	0x08006d04

08005d24 <__retarget_lock_acquire_recursive>:
 8005d24:	4770      	bx	lr

08005d26 <__retarget_lock_release_recursive>:
 8005d26:	4770      	bx	lr

08005d28 <_free_r>:
 8005d28:	b538      	push	{r3, r4, r5, lr}
 8005d2a:	4605      	mov	r5, r0
 8005d2c:	2900      	cmp	r1, #0
 8005d2e:	d041      	beq.n	8005db4 <_free_r+0x8c>
 8005d30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d34:	1f0c      	subs	r4, r1, #4
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	bfb8      	it	lt
 8005d3a:	18e4      	addlt	r4, r4, r3
 8005d3c:	f000 f8e0 	bl	8005f00 <__malloc_lock>
 8005d40:	4a1d      	ldr	r2, [pc, #116]	@ (8005db8 <_free_r+0x90>)
 8005d42:	6813      	ldr	r3, [r2, #0]
 8005d44:	b933      	cbnz	r3, 8005d54 <_free_r+0x2c>
 8005d46:	6063      	str	r3, [r4, #4]
 8005d48:	6014      	str	r4, [r2, #0]
 8005d4a:	4628      	mov	r0, r5
 8005d4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d50:	f000 b8dc 	b.w	8005f0c <__malloc_unlock>
 8005d54:	42a3      	cmp	r3, r4
 8005d56:	d908      	bls.n	8005d6a <_free_r+0x42>
 8005d58:	6820      	ldr	r0, [r4, #0]
 8005d5a:	1821      	adds	r1, r4, r0
 8005d5c:	428b      	cmp	r3, r1
 8005d5e:	bf01      	itttt	eq
 8005d60:	6819      	ldreq	r1, [r3, #0]
 8005d62:	685b      	ldreq	r3, [r3, #4]
 8005d64:	1809      	addeq	r1, r1, r0
 8005d66:	6021      	streq	r1, [r4, #0]
 8005d68:	e7ed      	b.n	8005d46 <_free_r+0x1e>
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	b10b      	cbz	r3, 8005d74 <_free_r+0x4c>
 8005d70:	42a3      	cmp	r3, r4
 8005d72:	d9fa      	bls.n	8005d6a <_free_r+0x42>
 8005d74:	6811      	ldr	r1, [r2, #0]
 8005d76:	1850      	adds	r0, r2, r1
 8005d78:	42a0      	cmp	r0, r4
 8005d7a:	d10b      	bne.n	8005d94 <_free_r+0x6c>
 8005d7c:	6820      	ldr	r0, [r4, #0]
 8005d7e:	4401      	add	r1, r0
 8005d80:	1850      	adds	r0, r2, r1
 8005d82:	4283      	cmp	r3, r0
 8005d84:	6011      	str	r1, [r2, #0]
 8005d86:	d1e0      	bne.n	8005d4a <_free_r+0x22>
 8005d88:	6818      	ldr	r0, [r3, #0]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	6053      	str	r3, [r2, #4]
 8005d8e:	4408      	add	r0, r1
 8005d90:	6010      	str	r0, [r2, #0]
 8005d92:	e7da      	b.n	8005d4a <_free_r+0x22>
 8005d94:	d902      	bls.n	8005d9c <_free_r+0x74>
 8005d96:	230c      	movs	r3, #12
 8005d98:	602b      	str	r3, [r5, #0]
 8005d9a:	e7d6      	b.n	8005d4a <_free_r+0x22>
 8005d9c:	6820      	ldr	r0, [r4, #0]
 8005d9e:	1821      	adds	r1, r4, r0
 8005da0:	428b      	cmp	r3, r1
 8005da2:	bf04      	itt	eq
 8005da4:	6819      	ldreq	r1, [r3, #0]
 8005da6:	685b      	ldreq	r3, [r3, #4]
 8005da8:	6063      	str	r3, [r4, #4]
 8005daa:	bf04      	itt	eq
 8005dac:	1809      	addeq	r1, r1, r0
 8005dae:	6021      	streq	r1, [r4, #0]
 8005db0:	6054      	str	r4, [r2, #4]
 8005db2:	e7ca      	b.n	8005d4a <_free_r+0x22>
 8005db4:	bd38      	pop	{r3, r4, r5, pc}
 8005db6:	bf00      	nop
 8005db8:	20000334 	.word	0x20000334

08005dbc <sbrk_aligned>:
 8005dbc:	b570      	push	{r4, r5, r6, lr}
 8005dbe:	4e0f      	ldr	r6, [pc, #60]	@ (8005dfc <sbrk_aligned+0x40>)
 8005dc0:	460c      	mov	r4, r1
 8005dc2:	6831      	ldr	r1, [r6, #0]
 8005dc4:	4605      	mov	r5, r0
 8005dc6:	b911      	cbnz	r1, 8005dce <sbrk_aligned+0x12>
 8005dc8:	f000 fc34 	bl	8006634 <_sbrk_r>
 8005dcc:	6030      	str	r0, [r6, #0]
 8005dce:	4621      	mov	r1, r4
 8005dd0:	4628      	mov	r0, r5
 8005dd2:	f000 fc2f 	bl	8006634 <_sbrk_r>
 8005dd6:	1c43      	adds	r3, r0, #1
 8005dd8:	d103      	bne.n	8005de2 <sbrk_aligned+0x26>
 8005dda:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005dde:	4620      	mov	r0, r4
 8005de0:	bd70      	pop	{r4, r5, r6, pc}
 8005de2:	1cc4      	adds	r4, r0, #3
 8005de4:	f024 0403 	bic.w	r4, r4, #3
 8005de8:	42a0      	cmp	r0, r4
 8005dea:	d0f8      	beq.n	8005dde <sbrk_aligned+0x22>
 8005dec:	1a21      	subs	r1, r4, r0
 8005dee:	4628      	mov	r0, r5
 8005df0:	f000 fc20 	bl	8006634 <_sbrk_r>
 8005df4:	3001      	adds	r0, #1
 8005df6:	d1f2      	bne.n	8005dde <sbrk_aligned+0x22>
 8005df8:	e7ef      	b.n	8005dda <sbrk_aligned+0x1e>
 8005dfa:	bf00      	nop
 8005dfc:	20000330 	.word	0x20000330

08005e00 <_malloc_r>:
 8005e00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e04:	1ccd      	adds	r5, r1, #3
 8005e06:	f025 0503 	bic.w	r5, r5, #3
 8005e0a:	3508      	adds	r5, #8
 8005e0c:	2d0c      	cmp	r5, #12
 8005e0e:	bf38      	it	cc
 8005e10:	250c      	movcc	r5, #12
 8005e12:	2d00      	cmp	r5, #0
 8005e14:	4606      	mov	r6, r0
 8005e16:	db01      	blt.n	8005e1c <_malloc_r+0x1c>
 8005e18:	42a9      	cmp	r1, r5
 8005e1a:	d904      	bls.n	8005e26 <_malloc_r+0x26>
 8005e1c:	230c      	movs	r3, #12
 8005e1e:	6033      	str	r3, [r6, #0]
 8005e20:	2000      	movs	r0, #0
 8005e22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e26:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005efc <_malloc_r+0xfc>
 8005e2a:	f000 f869 	bl	8005f00 <__malloc_lock>
 8005e2e:	f8d8 3000 	ldr.w	r3, [r8]
 8005e32:	461c      	mov	r4, r3
 8005e34:	bb44      	cbnz	r4, 8005e88 <_malloc_r+0x88>
 8005e36:	4629      	mov	r1, r5
 8005e38:	4630      	mov	r0, r6
 8005e3a:	f7ff ffbf 	bl	8005dbc <sbrk_aligned>
 8005e3e:	1c43      	adds	r3, r0, #1
 8005e40:	4604      	mov	r4, r0
 8005e42:	d158      	bne.n	8005ef6 <_malloc_r+0xf6>
 8005e44:	f8d8 4000 	ldr.w	r4, [r8]
 8005e48:	4627      	mov	r7, r4
 8005e4a:	2f00      	cmp	r7, #0
 8005e4c:	d143      	bne.n	8005ed6 <_malloc_r+0xd6>
 8005e4e:	2c00      	cmp	r4, #0
 8005e50:	d04b      	beq.n	8005eea <_malloc_r+0xea>
 8005e52:	6823      	ldr	r3, [r4, #0]
 8005e54:	4639      	mov	r1, r7
 8005e56:	4630      	mov	r0, r6
 8005e58:	eb04 0903 	add.w	r9, r4, r3
 8005e5c:	f000 fbea 	bl	8006634 <_sbrk_r>
 8005e60:	4581      	cmp	r9, r0
 8005e62:	d142      	bne.n	8005eea <_malloc_r+0xea>
 8005e64:	6821      	ldr	r1, [r4, #0]
 8005e66:	1a6d      	subs	r5, r5, r1
 8005e68:	4629      	mov	r1, r5
 8005e6a:	4630      	mov	r0, r6
 8005e6c:	f7ff ffa6 	bl	8005dbc <sbrk_aligned>
 8005e70:	3001      	adds	r0, #1
 8005e72:	d03a      	beq.n	8005eea <_malloc_r+0xea>
 8005e74:	6823      	ldr	r3, [r4, #0]
 8005e76:	442b      	add	r3, r5
 8005e78:	6023      	str	r3, [r4, #0]
 8005e7a:	f8d8 3000 	ldr.w	r3, [r8]
 8005e7e:	685a      	ldr	r2, [r3, #4]
 8005e80:	bb62      	cbnz	r2, 8005edc <_malloc_r+0xdc>
 8005e82:	f8c8 7000 	str.w	r7, [r8]
 8005e86:	e00f      	b.n	8005ea8 <_malloc_r+0xa8>
 8005e88:	6822      	ldr	r2, [r4, #0]
 8005e8a:	1b52      	subs	r2, r2, r5
 8005e8c:	d420      	bmi.n	8005ed0 <_malloc_r+0xd0>
 8005e8e:	2a0b      	cmp	r2, #11
 8005e90:	d917      	bls.n	8005ec2 <_malloc_r+0xc2>
 8005e92:	1961      	adds	r1, r4, r5
 8005e94:	42a3      	cmp	r3, r4
 8005e96:	6025      	str	r5, [r4, #0]
 8005e98:	bf18      	it	ne
 8005e9a:	6059      	strne	r1, [r3, #4]
 8005e9c:	6863      	ldr	r3, [r4, #4]
 8005e9e:	bf08      	it	eq
 8005ea0:	f8c8 1000 	streq.w	r1, [r8]
 8005ea4:	5162      	str	r2, [r4, r5]
 8005ea6:	604b      	str	r3, [r1, #4]
 8005ea8:	4630      	mov	r0, r6
 8005eaa:	f000 f82f 	bl	8005f0c <__malloc_unlock>
 8005eae:	f104 000b 	add.w	r0, r4, #11
 8005eb2:	1d23      	adds	r3, r4, #4
 8005eb4:	f020 0007 	bic.w	r0, r0, #7
 8005eb8:	1ac2      	subs	r2, r0, r3
 8005eba:	bf1c      	itt	ne
 8005ebc:	1a1b      	subne	r3, r3, r0
 8005ebe:	50a3      	strne	r3, [r4, r2]
 8005ec0:	e7af      	b.n	8005e22 <_malloc_r+0x22>
 8005ec2:	6862      	ldr	r2, [r4, #4]
 8005ec4:	42a3      	cmp	r3, r4
 8005ec6:	bf0c      	ite	eq
 8005ec8:	f8c8 2000 	streq.w	r2, [r8]
 8005ecc:	605a      	strne	r2, [r3, #4]
 8005ece:	e7eb      	b.n	8005ea8 <_malloc_r+0xa8>
 8005ed0:	4623      	mov	r3, r4
 8005ed2:	6864      	ldr	r4, [r4, #4]
 8005ed4:	e7ae      	b.n	8005e34 <_malloc_r+0x34>
 8005ed6:	463c      	mov	r4, r7
 8005ed8:	687f      	ldr	r7, [r7, #4]
 8005eda:	e7b6      	b.n	8005e4a <_malloc_r+0x4a>
 8005edc:	461a      	mov	r2, r3
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	42a3      	cmp	r3, r4
 8005ee2:	d1fb      	bne.n	8005edc <_malloc_r+0xdc>
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	6053      	str	r3, [r2, #4]
 8005ee8:	e7de      	b.n	8005ea8 <_malloc_r+0xa8>
 8005eea:	230c      	movs	r3, #12
 8005eec:	6033      	str	r3, [r6, #0]
 8005eee:	4630      	mov	r0, r6
 8005ef0:	f000 f80c 	bl	8005f0c <__malloc_unlock>
 8005ef4:	e794      	b.n	8005e20 <_malloc_r+0x20>
 8005ef6:	6005      	str	r5, [r0, #0]
 8005ef8:	e7d6      	b.n	8005ea8 <_malloc_r+0xa8>
 8005efa:	bf00      	nop
 8005efc:	20000334 	.word	0x20000334

08005f00 <__malloc_lock>:
 8005f00:	4801      	ldr	r0, [pc, #4]	@ (8005f08 <__malloc_lock+0x8>)
 8005f02:	f7ff bf0f 	b.w	8005d24 <__retarget_lock_acquire_recursive>
 8005f06:	bf00      	nop
 8005f08:	2000032c 	.word	0x2000032c

08005f0c <__malloc_unlock>:
 8005f0c:	4801      	ldr	r0, [pc, #4]	@ (8005f14 <__malloc_unlock+0x8>)
 8005f0e:	f7ff bf0a 	b.w	8005d26 <__retarget_lock_release_recursive>
 8005f12:	bf00      	nop
 8005f14:	2000032c 	.word	0x2000032c

08005f18 <_sungetc_r>:
 8005f18:	b538      	push	{r3, r4, r5, lr}
 8005f1a:	1c4b      	adds	r3, r1, #1
 8005f1c:	4614      	mov	r4, r2
 8005f1e:	d103      	bne.n	8005f28 <_sungetc_r+0x10>
 8005f20:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8005f24:	4628      	mov	r0, r5
 8005f26:	bd38      	pop	{r3, r4, r5, pc}
 8005f28:	8993      	ldrh	r3, [r2, #12]
 8005f2a:	f023 0320 	bic.w	r3, r3, #32
 8005f2e:	8193      	strh	r3, [r2, #12]
 8005f30:	6853      	ldr	r3, [r2, #4]
 8005f32:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005f34:	b2cd      	uxtb	r5, r1
 8005f36:	b18a      	cbz	r2, 8005f5c <_sungetc_r+0x44>
 8005f38:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	dd08      	ble.n	8005f50 <_sungetc_r+0x38>
 8005f3e:	6823      	ldr	r3, [r4, #0]
 8005f40:	1e5a      	subs	r2, r3, #1
 8005f42:	6022      	str	r2, [r4, #0]
 8005f44:	f803 5c01 	strb.w	r5, [r3, #-1]
 8005f48:	6863      	ldr	r3, [r4, #4]
 8005f4a:	3301      	adds	r3, #1
 8005f4c:	6063      	str	r3, [r4, #4]
 8005f4e:	e7e9      	b.n	8005f24 <_sungetc_r+0xc>
 8005f50:	4621      	mov	r1, r4
 8005f52:	f000 fb34 	bl	80065be <__submore>
 8005f56:	2800      	cmp	r0, #0
 8005f58:	d0f1      	beq.n	8005f3e <_sungetc_r+0x26>
 8005f5a:	e7e1      	b.n	8005f20 <_sungetc_r+0x8>
 8005f5c:	6921      	ldr	r1, [r4, #16]
 8005f5e:	6822      	ldr	r2, [r4, #0]
 8005f60:	b141      	cbz	r1, 8005f74 <_sungetc_r+0x5c>
 8005f62:	4291      	cmp	r1, r2
 8005f64:	d206      	bcs.n	8005f74 <_sungetc_r+0x5c>
 8005f66:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8005f6a:	42a9      	cmp	r1, r5
 8005f6c:	d102      	bne.n	8005f74 <_sungetc_r+0x5c>
 8005f6e:	3a01      	subs	r2, #1
 8005f70:	6022      	str	r2, [r4, #0]
 8005f72:	e7ea      	b.n	8005f4a <_sungetc_r+0x32>
 8005f74:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8005f78:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005f7c:	6363      	str	r3, [r4, #52]	@ 0x34
 8005f7e:	2303      	movs	r3, #3
 8005f80:	63a3      	str	r3, [r4, #56]	@ 0x38
 8005f82:	4623      	mov	r3, r4
 8005f84:	f803 5f46 	strb.w	r5, [r3, #70]!
 8005f88:	6023      	str	r3, [r4, #0]
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	e7de      	b.n	8005f4c <_sungetc_r+0x34>

08005f8e <__ssrefill_r>:
 8005f8e:	b510      	push	{r4, lr}
 8005f90:	460c      	mov	r4, r1
 8005f92:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8005f94:	b169      	cbz	r1, 8005fb2 <__ssrefill_r+0x24>
 8005f96:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005f9a:	4299      	cmp	r1, r3
 8005f9c:	d001      	beq.n	8005fa2 <__ssrefill_r+0x14>
 8005f9e:	f7ff fec3 	bl	8005d28 <_free_r>
 8005fa2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005fa4:	6063      	str	r3, [r4, #4]
 8005fa6:	2000      	movs	r0, #0
 8005fa8:	6360      	str	r0, [r4, #52]	@ 0x34
 8005faa:	b113      	cbz	r3, 8005fb2 <__ssrefill_r+0x24>
 8005fac:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005fae:	6023      	str	r3, [r4, #0]
 8005fb0:	bd10      	pop	{r4, pc}
 8005fb2:	6923      	ldr	r3, [r4, #16]
 8005fb4:	6023      	str	r3, [r4, #0]
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	6063      	str	r3, [r4, #4]
 8005fba:	89a3      	ldrh	r3, [r4, #12]
 8005fbc:	f043 0320 	orr.w	r3, r3, #32
 8005fc0:	81a3      	strh	r3, [r4, #12]
 8005fc2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005fc6:	e7f3      	b.n	8005fb0 <__ssrefill_r+0x22>

08005fc8 <__ssvfiscanf_r>:
 8005fc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fcc:	460c      	mov	r4, r1
 8005fce:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8005fd2:	2100      	movs	r1, #0
 8005fd4:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8005fd8:	49a5      	ldr	r1, [pc, #660]	@ (8006270 <__ssvfiscanf_r+0x2a8>)
 8005fda:	91a0      	str	r1, [sp, #640]	@ 0x280
 8005fdc:	f10d 0804 	add.w	r8, sp, #4
 8005fe0:	49a4      	ldr	r1, [pc, #656]	@ (8006274 <__ssvfiscanf_r+0x2ac>)
 8005fe2:	4fa5      	ldr	r7, [pc, #660]	@ (8006278 <__ssvfiscanf_r+0x2b0>)
 8005fe4:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8005fe8:	4606      	mov	r6, r0
 8005fea:	91a1      	str	r1, [sp, #644]	@ 0x284
 8005fec:	9300      	str	r3, [sp, #0]
 8005fee:	7813      	ldrb	r3, [r2, #0]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	f000 8158 	beq.w	80062a6 <__ssvfiscanf_r+0x2de>
 8005ff6:	5cf9      	ldrb	r1, [r7, r3]
 8005ff8:	f011 0108 	ands.w	r1, r1, #8
 8005ffc:	f102 0501 	add.w	r5, r2, #1
 8006000:	d019      	beq.n	8006036 <__ssvfiscanf_r+0x6e>
 8006002:	6863      	ldr	r3, [r4, #4]
 8006004:	2b00      	cmp	r3, #0
 8006006:	dd0f      	ble.n	8006028 <__ssvfiscanf_r+0x60>
 8006008:	6823      	ldr	r3, [r4, #0]
 800600a:	781a      	ldrb	r2, [r3, #0]
 800600c:	5cba      	ldrb	r2, [r7, r2]
 800600e:	0712      	lsls	r2, r2, #28
 8006010:	d401      	bmi.n	8006016 <__ssvfiscanf_r+0x4e>
 8006012:	462a      	mov	r2, r5
 8006014:	e7eb      	b.n	8005fee <__ssvfiscanf_r+0x26>
 8006016:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8006018:	3201      	adds	r2, #1
 800601a:	9245      	str	r2, [sp, #276]	@ 0x114
 800601c:	6862      	ldr	r2, [r4, #4]
 800601e:	3301      	adds	r3, #1
 8006020:	3a01      	subs	r2, #1
 8006022:	6062      	str	r2, [r4, #4]
 8006024:	6023      	str	r3, [r4, #0]
 8006026:	e7ec      	b.n	8006002 <__ssvfiscanf_r+0x3a>
 8006028:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800602a:	4621      	mov	r1, r4
 800602c:	4630      	mov	r0, r6
 800602e:	4798      	blx	r3
 8006030:	2800      	cmp	r0, #0
 8006032:	d0e9      	beq.n	8006008 <__ssvfiscanf_r+0x40>
 8006034:	e7ed      	b.n	8006012 <__ssvfiscanf_r+0x4a>
 8006036:	2b25      	cmp	r3, #37	@ 0x25
 8006038:	d012      	beq.n	8006060 <__ssvfiscanf_r+0x98>
 800603a:	4699      	mov	r9, r3
 800603c:	6863      	ldr	r3, [r4, #4]
 800603e:	2b00      	cmp	r3, #0
 8006040:	f340 8093 	ble.w	800616a <__ssvfiscanf_r+0x1a2>
 8006044:	6822      	ldr	r2, [r4, #0]
 8006046:	7813      	ldrb	r3, [r2, #0]
 8006048:	454b      	cmp	r3, r9
 800604a:	f040 812c 	bne.w	80062a6 <__ssvfiscanf_r+0x2de>
 800604e:	6863      	ldr	r3, [r4, #4]
 8006050:	3b01      	subs	r3, #1
 8006052:	6063      	str	r3, [r4, #4]
 8006054:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8006056:	3201      	adds	r2, #1
 8006058:	3301      	adds	r3, #1
 800605a:	6022      	str	r2, [r4, #0]
 800605c:	9345      	str	r3, [sp, #276]	@ 0x114
 800605e:	e7d8      	b.n	8006012 <__ssvfiscanf_r+0x4a>
 8006060:	9141      	str	r1, [sp, #260]	@ 0x104
 8006062:	9143      	str	r1, [sp, #268]	@ 0x10c
 8006064:	7853      	ldrb	r3, [r2, #1]
 8006066:	2b2a      	cmp	r3, #42	@ 0x2a
 8006068:	bf02      	ittt	eq
 800606a:	2310      	moveq	r3, #16
 800606c:	1c95      	addeq	r5, r2, #2
 800606e:	9341      	streq	r3, [sp, #260]	@ 0x104
 8006070:	220a      	movs	r2, #10
 8006072:	46a9      	mov	r9, r5
 8006074:	f819 1b01 	ldrb.w	r1, [r9], #1
 8006078:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800607c:	2b09      	cmp	r3, #9
 800607e:	d91e      	bls.n	80060be <__ssvfiscanf_r+0xf6>
 8006080:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800627c <__ssvfiscanf_r+0x2b4>
 8006084:	2203      	movs	r2, #3
 8006086:	4650      	mov	r0, sl
 8006088:	f7fa f8ba 	bl	8000200 <memchr>
 800608c:	b138      	cbz	r0, 800609e <__ssvfiscanf_r+0xd6>
 800608e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8006090:	eba0 000a 	sub.w	r0, r0, sl
 8006094:	2301      	movs	r3, #1
 8006096:	4083      	lsls	r3, r0
 8006098:	4313      	orrs	r3, r2
 800609a:	9341      	str	r3, [sp, #260]	@ 0x104
 800609c:	464d      	mov	r5, r9
 800609e:	f815 3b01 	ldrb.w	r3, [r5], #1
 80060a2:	2b78      	cmp	r3, #120	@ 0x78
 80060a4:	d806      	bhi.n	80060b4 <__ssvfiscanf_r+0xec>
 80060a6:	2b57      	cmp	r3, #87	@ 0x57
 80060a8:	d810      	bhi.n	80060cc <__ssvfiscanf_r+0x104>
 80060aa:	2b25      	cmp	r3, #37	@ 0x25
 80060ac:	d0c5      	beq.n	800603a <__ssvfiscanf_r+0x72>
 80060ae:	d857      	bhi.n	8006160 <__ssvfiscanf_r+0x198>
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d065      	beq.n	8006180 <__ssvfiscanf_r+0x1b8>
 80060b4:	2303      	movs	r3, #3
 80060b6:	9347      	str	r3, [sp, #284]	@ 0x11c
 80060b8:	230a      	movs	r3, #10
 80060ba:	9342      	str	r3, [sp, #264]	@ 0x108
 80060bc:	e078      	b.n	80061b0 <__ssvfiscanf_r+0x1e8>
 80060be:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80060c0:	fb02 1103 	mla	r1, r2, r3, r1
 80060c4:	3930      	subs	r1, #48	@ 0x30
 80060c6:	9143      	str	r1, [sp, #268]	@ 0x10c
 80060c8:	464d      	mov	r5, r9
 80060ca:	e7d2      	b.n	8006072 <__ssvfiscanf_r+0xaa>
 80060cc:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80060d0:	2a20      	cmp	r2, #32
 80060d2:	d8ef      	bhi.n	80060b4 <__ssvfiscanf_r+0xec>
 80060d4:	a101      	add	r1, pc, #4	@ (adr r1, 80060dc <__ssvfiscanf_r+0x114>)
 80060d6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80060da:	bf00      	nop
 80060dc:	0800618f 	.word	0x0800618f
 80060e0:	080060b5 	.word	0x080060b5
 80060e4:	080060b5 	.word	0x080060b5
 80060e8:	080061e9 	.word	0x080061e9
 80060ec:	080060b5 	.word	0x080060b5
 80060f0:	080060b5 	.word	0x080060b5
 80060f4:	080060b5 	.word	0x080060b5
 80060f8:	080060b5 	.word	0x080060b5
 80060fc:	080060b5 	.word	0x080060b5
 8006100:	080060b5 	.word	0x080060b5
 8006104:	080060b5 	.word	0x080060b5
 8006108:	080061ff 	.word	0x080061ff
 800610c:	080061e5 	.word	0x080061e5
 8006110:	08006167 	.word	0x08006167
 8006114:	08006167 	.word	0x08006167
 8006118:	08006167 	.word	0x08006167
 800611c:	080060b5 	.word	0x080060b5
 8006120:	080061a1 	.word	0x080061a1
 8006124:	080060b5 	.word	0x080060b5
 8006128:	080060b5 	.word	0x080060b5
 800612c:	080060b5 	.word	0x080060b5
 8006130:	080060b5 	.word	0x080060b5
 8006134:	0800620f 	.word	0x0800620f
 8006138:	080061a9 	.word	0x080061a9
 800613c:	08006187 	.word	0x08006187
 8006140:	080060b5 	.word	0x080060b5
 8006144:	080060b5 	.word	0x080060b5
 8006148:	0800620b 	.word	0x0800620b
 800614c:	080060b5 	.word	0x080060b5
 8006150:	080061e5 	.word	0x080061e5
 8006154:	080060b5 	.word	0x080060b5
 8006158:	080060b5 	.word	0x080060b5
 800615c:	0800618f 	.word	0x0800618f
 8006160:	3b45      	subs	r3, #69	@ 0x45
 8006162:	2b02      	cmp	r3, #2
 8006164:	d8a6      	bhi.n	80060b4 <__ssvfiscanf_r+0xec>
 8006166:	2305      	movs	r3, #5
 8006168:	e021      	b.n	80061ae <__ssvfiscanf_r+0x1e6>
 800616a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800616c:	4621      	mov	r1, r4
 800616e:	4630      	mov	r0, r6
 8006170:	4798      	blx	r3
 8006172:	2800      	cmp	r0, #0
 8006174:	f43f af66 	beq.w	8006044 <__ssvfiscanf_r+0x7c>
 8006178:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800617a:	2800      	cmp	r0, #0
 800617c:	f040 808b 	bne.w	8006296 <__ssvfiscanf_r+0x2ce>
 8006180:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006184:	e08b      	b.n	800629e <__ssvfiscanf_r+0x2d6>
 8006186:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8006188:	f042 0220 	orr.w	r2, r2, #32
 800618c:	9241      	str	r2, [sp, #260]	@ 0x104
 800618e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8006190:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006194:	9241      	str	r2, [sp, #260]	@ 0x104
 8006196:	2210      	movs	r2, #16
 8006198:	2b6e      	cmp	r3, #110	@ 0x6e
 800619a:	9242      	str	r2, [sp, #264]	@ 0x108
 800619c:	d902      	bls.n	80061a4 <__ssvfiscanf_r+0x1dc>
 800619e:	e005      	b.n	80061ac <__ssvfiscanf_r+0x1e4>
 80061a0:	2300      	movs	r3, #0
 80061a2:	9342      	str	r3, [sp, #264]	@ 0x108
 80061a4:	2303      	movs	r3, #3
 80061a6:	e002      	b.n	80061ae <__ssvfiscanf_r+0x1e6>
 80061a8:	2308      	movs	r3, #8
 80061aa:	9342      	str	r3, [sp, #264]	@ 0x108
 80061ac:	2304      	movs	r3, #4
 80061ae:	9347      	str	r3, [sp, #284]	@ 0x11c
 80061b0:	6863      	ldr	r3, [r4, #4]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	dd39      	ble.n	800622a <__ssvfiscanf_r+0x262>
 80061b6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80061b8:	0659      	lsls	r1, r3, #25
 80061ba:	d404      	bmi.n	80061c6 <__ssvfiscanf_r+0x1fe>
 80061bc:	6823      	ldr	r3, [r4, #0]
 80061be:	781a      	ldrb	r2, [r3, #0]
 80061c0:	5cba      	ldrb	r2, [r7, r2]
 80061c2:	0712      	lsls	r2, r2, #28
 80061c4:	d438      	bmi.n	8006238 <__ssvfiscanf_r+0x270>
 80061c6:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80061c8:	2b02      	cmp	r3, #2
 80061ca:	dc47      	bgt.n	800625c <__ssvfiscanf_r+0x294>
 80061cc:	466b      	mov	r3, sp
 80061ce:	4622      	mov	r2, r4
 80061d0:	a941      	add	r1, sp, #260	@ 0x104
 80061d2:	4630      	mov	r0, r6
 80061d4:	f000 f86c 	bl	80062b0 <_scanf_chars>
 80061d8:	2801      	cmp	r0, #1
 80061da:	d064      	beq.n	80062a6 <__ssvfiscanf_r+0x2de>
 80061dc:	2802      	cmp	r0, #2
 80061de:	f47f af18 	bne.w	8006012 <__ssvfiscanf_r+0x4a>
 80061e2:	e7c9      	b.n	8006178 <__ssvfiscanf_r+0x1b0>
 80061e4:	220a      	movs	r2, #10
 80061e6:	e7d7      	b.n	8006198 <__ssvfiscanf_r+0x1d0>
 80061e8:	4629      	mov	r1, r5
 80061ea:	4640      	mov	r0, r8
 80061ec:	f000 f9ae 	bl	800654c <__sccl>
 80061f0:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80061f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80061f6:	9341      	str	r3, [sp, #260]	@ 0x104
 80061f8:	4605      	mov	r5, r0
 80061fa:	2301      	movs	r3, #1
 80061fc:	e7d7      	b.n	80061ae <__ssvfiscanf_r+0x1e6>
 80061fe:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8006200:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006204:	9341      	str	r3, [sp, #260]	@ 0x104
 8006206:	2300      	movs	r3, #0
 8006208:	e7d1      	b.n	80061ae <__ssvfiscanf_r+0x1e6>
 800620a:	2302      	movs	r3, #2
 800620c:	e7cf      	b.n	80061ae <__ssvfiscanf_r+0x1e6>
 800620e:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8006210:	06c3      	lsls	r3, r0, #27
 8006212:	f53f aefe 	bmi.w	8006012 <__ssvfiscanf_r+0x4a>
 8006216:	9b00      	ldr	r3, [sp, #0]
 8006218:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800621a:	1d19      	adds	r1, r3, #4
 800621c:	9100      	str	r1, [sp, #0]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	07c0      	lsls	r0, r0, #31
 8006222:	bf4c      	ite	mi
 8006224:	801a      	strhmi	r2, [r3, #0]
 8006226:	601a      	strpl	r2, [r3, #0]
 8006228:	e6f3      	b.n	8006012 <__ssvfiscanf_r+0x4a>
 800622a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800622c:	4621      	mov	r1, r4
 800622e:	4630      	mov	r0, r6
 8006230:	4798      	blx	r3
 8006232:	2800      	cmp	r0, #0
 8006234:	d0bf      	beq.n	80061b6 <__ssvfiscanf_r+0x1ee>
 8006236:	e79f      	b.n	8006178 <__ssvfiscanf_r+0x1b0>
 8006238:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800623a:	3201      	adds	r2, #1
 800623c:	9245      	str	r2, [sp, #276]	@ 0x114
 800623e:	6862      	ldr	r2, [r4, #4]
 8006240:	3a01      	subs	r2, #1
 8006242:	2a00      	cmp	r2, #0
 8006244:	6062      	str	r2, [r4, #4]
 8006246:	dd02      	ble.n	800624e <__ssvfiscanf_r+0x286>
 8006248:	3301      	adds	r3, #1
 800624a:	6023      	str	r3, [r4, #0]
 800624c:	e7b6      	b.n	80061bc <__ssvfiscanf_r+0x1f4>
 800624e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8006250:	4621      	mov	r1, r4
 8006252:	4630      	mov	r0, r6
 8006254:	4798      	blx	r3
 8006256:	2800      	cmp	r0, #0
 8006258:	d0b0      	beq.n	80061bc <__ssvfiscanf_r+0x1f4>
 800625a:	e78d      	b.n	8006178 <__ssvfiscanf_r+0x1b0>
 800625c:	2b04      	cmp	r3, #4
 800625e:	dc0f      	bgt.n	8006280 <__ssvfiscanf_r+0x2b8>
 8006260:	466b      	mov	r3, sp
 8006262:	4622      	mov	r2, r4
 8006264:	a941      	add	r1, sp, #260	@ 0x104
 8006266:	4630      	mov	r0, r6
 8006268:	f000 f87c 	bl	8006364 <_scanf_i>
 800626c:	e7b4      	b.n	80061d8 <__ssvfiscanf_r+0x210>
 800626e:	bf00      	nop
 8006270:	08005f19 	.word	0x08005f19
 8006274:	08005f8f 	.word	0x08005f8f
 8006278:	08006bf8 	.word	0x08006bf8
 800627c:	08006bd8 	.word	0x08006bd8
 8006280:	4b0a      	ldr	r3, [pc, #40]	@ (80062ac <__ssvfiscanf_r+0x2e4>)
 8006282:	2b00      	cmp	r3, #0
 8006284:	f43f aec5 	beq.w	8006012 <__ssvfiscanf_r+0x4a>
 8006288:	466b      	mov	r3, sp
 800628a:	4622      	mov	r2, r4
 800628c:	a941      	add	r1, sp, #260	@ 0x104
 800628e:	4630      	mov	r0, r6
 8006290:	f3af 8000 	nop.w
 8006294:	e7a0      	b.n	80061d8 <__ssvfiscanf_r+0x210>
 8006296:	89a3      	ldrh	r3, [r4, #12]
 8006298:	065b      	lsls	r3, r3, #25
 800629a:	f53f af71 	bmi.w	8006180 <__ssvfiscanf_r+0x1b8>
 800629e:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 80062a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062a6:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80062a8:	e7f9      	b.n	800629e <__ssvfiscanf_r+0x2d6>
 80062aa:	bf00      	nop
 80062ac:	00000000 	.word	0x00000000

080062b0 <_scanf_chars>:
 80062b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062b4:	4615      	mov	r5, r2
 80062b6:	688a      	ldr	r2, [r1, #8]
 80062b8:	4680      	mov	r8, r0
 80062ba:	460c      	mov	r4, r1
 80062bc:	b932      	cbnz	r2, 80062cc <_scanf_chars+0x1c>
 80062be:	698a      	ldr	r2, [r1, #24]
 80062c0:	2a00      	cmp	r2, #0
 80062c2:	bf14      	ite	ne
 80062c4:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 80062c8:	2201      	moveq	r2, #1
 80062ca:	608a      	str	r2, [r1, #8]
 80062cc:	6822      	ldr	r2, [r4, #0]
 80062ce:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8006360 <_scanf_chars+0xb0>
 80062d2:	06d1      	lsls	r1, r2, #27
 80062d4:	bf5f      	itttt	pl
 80062d6:	681a      	ldrpl	r2, [r3, #0]
 80062d8:	1d11      	addpl	r1, r2, #4
 80062da:	6019      	strpl	r1, [r3, #0]
 80062dc:	6816      	ldrpl	r6, [r2, #0]
 80062de:	2700      	movs	r7, #0
 80062e0:	69a0      	ldr	r0, [r4, #24]
 80062e2:	b188      	cbz	r0, 8006308 <_scanf_chars+0x58>
 80062e4:	2801      	cmp	r0, #1
 80062e6:	d107      	bne.n	80062f8 <_scanf_chars+0x48>
 80062e8:	682b      	ldr	r3, [r5, #0]
 80062ea:	781a      	ldrb	r2, [r3, #0]
 80062ec:	6963      	ldr	r3, [r4, #20]
 80062ee:	5c9b      	ldrb	r3, [r3, r2]
 80062f0:	b953      	cbnz	r3, 8006308 <_scanf_chars+0x58>
 80062f2:	2f00      	cmp	r7, #0
 80062f4:	d031      	beq.n	800635a <_scanf_chars+0xaa>
 80062f6:	e022      	b.n	800633e <_scanf_chars+0x8e>
 80062f8:	2802      	cmp	r0, #2
 80062fa:	d120      	bne.n	800633e <_scanf_chars+0x8e>
 80062fc:	682b      	ldr	r3, [r5, #0]
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	f819 3003 	ldrb.w	r3, [r9, r3]
 8006304:	071b      	lsls	r3, r3, #28
 8006306:	d41a      	bmi.n	800633e <_scanf_chars+0x8e>
 8006308:	6823      	ldr	r3, [r4, #0]
 800630a:	06da      	lsls	r2, r3, #27
 800630c:	bf5e      	ittt	pl
 800630e:	682b      	ldrpl	r3, [r5, #0]
 8006310:	781b      	ldrbpl	r3, [r3, #0]
 8006312:	f806 3b01 	strbpl.w	r3, [r6], #1
 8006316:	682a      	ldr	r2, [r5, #0]
 8006318:	686b      	ldr	r3, [r5, #4]
 800631a:	3201      	adds	r2, #1
 800631c:	602a      	str	r2, [r5, #0]
 800631e:	68a2      	ldr	r2, [r4, #8]
 8006320:	3b01      	subs	r3, #1
 8006322:	3a01      	subs	r2, #1
 8006324:	606b      	str	r3, [r5, #4]
 8006326:	3701      	adds	r7, #1
 8006328:	60a2      	str	r2, [r4, #8]
 800632a:	b142      	cbz	r2, 800633e <_scanf_chars+0x8e>
 800632c:	2b00      	cmp	r3, #0
 800632e:	dcd7      	bgt.n	80062e0 <_scanf_chars+0x30>
 8006330:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006334:	4629      	mov	r1, r5
 8006336:	4640      	mov	r0, r8
 8006338:	4798      	blx	r3
 800633a:	2800      	cmp	r0, #0
 800633c:	d0d0      	beq.n	80062e0 <_scanf_chars+0x30>
 800633e:	6823      	ldr	r3, [r4, #0]
 8006340:	f013 0310 	ands.w	r3, r3, #16
 8006344:	d105      	bne.n	8006352 <_scanf_chars+0xa2>
 8006346:	68e2      	ldr	r2, [r4, #12]
 8006348:	3201      	adds	r2, #1
 800634a:	60e2      	str	r2, [r4, #12]
 800634c:	69a2      	ldr	r2, [r4, #24]
 800634e:	b102      	cbz	r2, 8006352 <_scanf_chars+0xa2>
 8006350:	7033      	strb	r3, [r6, #0]
 8006352:	6923      	ldr	r3, [r4, #16]
 8006354:	443b      	add	r3, r7
 8006356:	6123      	str	r3, [r4, #16]
 8006358:	2000      	movs	r0, #0
 800635a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800635e:	bf00      	nop
 8006360:	08006bf8 	.word	0x08006bf8

08006364 <_scanf_i>:
 8006364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006368:	4698      	mov	r8, r3
 800636a:	4b74      	ldr	r3, [pc, #464]	@ (800653c <_scanf_i+0x1d8>)
 800636c:	460c      	mov	r4, r1
 800636e:	4682      	mov	sl, r0
 8006370:	4616      	mov	r6, r2
 8006372:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006376:	b087      	sub	sp, #28
 8006378:	ab03      	add	r3, sp, #12
 800637a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800637e:	4b70      	ldr	r3, [pc, #448]	@ (8006540 <_scanf_i+0x1dc>)
 8006380:	69a1      	ldr	r1, [r4, #24]
 8006382:	4a70      	ldr	r2, [pc, #448]	@ (8006544 <_scanf_i+0x1e0>)
 8006384:	2903      	cmp	r1, #3
 8006386:	bf08      	it	eq
 8006388:	461a      	moveq	r2, r3
 800638a:	68a3      	ldr	r3, [r4, #8]
 800638c:	9201      	str	r2, [sp, #4]
 800638e:	1e5a      	subs	r2, r3, #1
 8006390:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006394:	bf88      	it	hi
 8006396:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800639a:	4627      	mov	r7, r4
 800639c:	bf82      	ittt	hi
 800639e:	eb03 0905 	addhi.w	r9, r3, r5
 80063a2:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80063a6:	60a3      	strhi	r3, [r4, #8]
 80063a8:	f857 3b1c 	ldr.w	r3, [r7], #28
 80063ac:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80063b0:	bf98      	it	ls
 80063b2:	f04f 0900 	movls.w	r9, #0
 80063b6:	6023      	str	r3, [r4, #0]
 80063b8:	463d      	mov	r5, r7
 80063ba:	f04f 0b00 	mov.w	fp, #0
 80063be:	6831      	ldr	r1, [r6, #0]
 80063c0:	ab03      	add	r3, sp, #12
 80063c2:	7809      	ldrb	r1, [r1, #0]
 80063c4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80063c8:	2202      	movs	r2, #2
 80063ca:	f7f9 ff19 	bl	8000200 <memchr>
 80063ce:	b328      	cbz	r0, 800641c <_scanf_i+0xb8>
 80063d0:	f1bb 0f01 	cmp.w	fp, #1
 80063d4:	d159      	bne.n	800648a <_scanf_i+0x126>
 80063d6:	6862      	ldr	r2, [r4, #4]
 80063d8:	b92a      	cbnz	r2, 80063e6 <_scanf_i+0x82>
 80063da:	6822      	ldr	r2, [r4, #0]
 80063dc:	2108      	movs	r1, #8
 80063de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80063e2:	6061      	str	r1, [r4, #4]
 80063e4:	6022      	str	r2, [r4, #0]
 80063e6:	6822      	ldr	r2, [r4, #0]
 80063e8:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80063ec:	6022      	str	r2, [r4, #0]
 80063ee:	68a2      	ldr	r2, [r4, #8]
 80063f0:	1e51      	subs	r1, r2, #1
 80063f2:	60a1      	str	r1, [r4, #8]
 80063f4:	b192      	cbz	r2, 800641c <_scanf_i+0xb8>
 80063f6:	6832      	ldr	r2, [r6, #0]
 80063f8:	1c51      	adds	r1, r2, #1
 80063fa:	6031      	str	r1, [r6, #0]
 80063fc:	7812      	ldrb	r2, [r2, #0]
 80063fe:	f805 2b01 	strb.w	r2, [r5], #1
 8006402:	6872      	ldr	r2, [r6, #4]
 8006404:	3a01      	subs	r2, #1
 8006406:	2a00      	cmp	r2, #0
 8006408:	6072      	str	r2, [r6, #4]
 800640a:	dc07      	bgt.n	800641c <_scanf_i+0xb8>
 800640c:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8006410:	4631      	mov	r1, r6
 8006412:	4650      	mov	r0, sl
 8006414:	4790      	blx	r2
 8006416:	2800      	cmp	r0, #0
 8006418:	f040 8085 	bne.w	8006526 <_scanf_i+0x1c2>
 800641c:	f10b 0b01 	add.w	fp, fp, #1
 8006420:	f1bb 0f03 	cmp.w	fp, #3
 8006424:	d1cb      	bne.n	80063be <_scanf_i+0x5a>
 8006426:	6863      	ldr	r3, [r4, #4]
 8006428:	b90b      	cbnz	r3, 800642e <_scanf_i+0xca>
 800642a:	230a      	movs	r3, #10
 800642c:	6063      	str	r3, [r4, #4]
 800642e:	6863      	ldr	r3, [r4, #4]
 8006430:	4945      	ldr	r1, [pc, #276]	@ (8006548 <_scanf_i+0x1e4>)
 8006432:	6960      	ldr	r0, [r4, #20]
 8006434:	1ac9      	subs	r1, r1, r3
 8006436:	f000 f889 	bl	800654c <__sccl>
 800643a:	f04f 0b00 	mov.w	fp, #0
 800643e:	68a3      	ldr	r3, [r4, #8]
 8006440:	6822      	ldr	r2, [r4, #0]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d03d      	beq.n	80064c2 <_scanf_i+0x15e>
 8006446:	6831      	ldr	r1, [r6, #0]
 8006448:	6960      	ldr	r0, [r4, #20]
 800644a:	f891 c000 	ldrb.w	ip, [r1]
 800644e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8006452:	2800      	cmp	r0, #0
 8006454:	d035      	beq.n	80064c2 <_scanf_i+0x15e>
 8006456:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800645a:	d124      	bne.n	80064a6 <_scanf_i+0x142>
 800645c:	0510      	lsls	r0, r2, #20
 800645e:	d522      	bpl.n	80064a6 <_scanf_i+0x142>
 8006460:	f10b 0b01 	add.w	fp, fp, #1
 8006464:	f1b9 0f00 	cmp.w	r9, #0
 8006468:	d003      	beq.n	8006472 <_scanf_i+0x10e>
 800646a:	3301      	adds	r3, #1
 800646c:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8006470:	60a3      	str	r3, [r4, #8]
 8006472:	6873      	ldr	r3, [r6, #4]
 8006474:	3b01      	subs	r3, #1
 8006476:	2b00      	cmp	r3, #0
 8006478:	6073      	str	r3, [r6, #4]
 800647a:	dd1b      	ble.n	80064b4 <_scanf_i+0x150>
 800647c:	6833      	ldr	r3, [r6, #0]
 800647e:	3301      	adds	r3, #1
 8006480:	6033      	str	r3, [r6, #0]
 8006482:	68a3      	ldr	r3, [r4, #8]
 8006484:	3b01      	subs	r3, #1
 8006486:	60a3      	str	r3, [r4, #8]
 8006488:	e7d9      	b.n	800643e <_scanf_i+0xda>
 800648a:	f1bb 0f02 	cmp.w	fp, #2
 800648e:	d1ae      	bne.n	80063ee <_scanf_i+0x8a>
 8006490:	6822      	ldr	r2, [r4, #0]
 8006492:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8006496:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800649a:	d1bf      	bne.n	800641c <_scanf_i+0xb8>
 800649c:	2110      	movs	r1, #16
 800649e:	6061      	str	r1, [r4, #4]
 80064a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80064a4:	e7a2      	b.n	80063ec <_scanf_i+0x88>
 80064a6:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80064aa:	6022      	str	r2, [r4, #0]
 80064ac:	780b      	ldrb	r3, [r1, #0]
 80064ae:	f805 3b01 	strb.w	r3, [r5], #1
 80064b2:	e7de      	b.n	8006472 <_scanf_i+0x10e>
 80064b4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80064b8:	4631      	mov	r1, r6
 80064ba:	4650      	mov	r0, sl
 80064bc:	4798      	blx	r3
 80064be:	2800      	cmp	r0, #0
 80064c0:	d0df      	beq.n	8006482 <_scanf_i+0x11e>
 80064c2:	6823      	ldr	r3, [r4, #0]
 80064c4:	05d9      	lsls	r1, r3, #23
 80064c6:	d50d      	bpl.n	80064e4 <_scanf_i+0x180>
 80064c8:	42bd      	cmp	r5, r7
 80064ca:	d909      	bls.n	80064e0 <_scanf_i+0x17c>
 80064cc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80064d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80064d4:	4632      	mov	r2, r6
 80064d6:	4650      	mov	r0, sl
 80064d8:	4798      	blx	r3
 80064da:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 80064de:	464d      	mov	r5, r9
 80064e0:	42bd      	cmp	r5, r7
 80064e2:	d028      	beq.n	8006536 <_scanf_i+0x1d2>
 80064e4:	6822      	ldr	r2, [r4, #0]
 80064e6:	f012 0210 	ands.w	r2, r2, #16
 80064ea:	d113      	bne.n	8006514 <_scanf_i+0x1b0>
 80064ec:	702a      	strb	r2, [r5, #0]
 80064ee:	6863      	ldr	r3, [r4, #4]
 80064f0:	9e01      	ldr	r6, [sp, #4]
 80064f2:	4639      	mov	r1, r7
 80064f4:	4650      	mov	r0, sl
 80064f6:	47b0      	blx	r6
 80064f8:	f8d8 3000 	ldr.w	r3, [r8]
 80064fc:	6821      	ldr	r1, [r4, #0]
 80064fe:	1d1a      	adds	r2, r3, #4
 8006500:	f8c8 2000 	str.w	r2, [r8]
 8006504:	f011 0f20 	tst.w	r1, #32
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	d00f      	beq.n	800652c <_scanf_i+0x1c8>
 800650c:	6018      	str	r0, [r3, #0]
 800650e:	68e3      	ldr	r3, [r4, #12]
 8006510:	3301      	adds	r3, #1
 8006512:	60e3      	str	r3, [r4, #12]
 8006514:	6923      	ldr	r3, [r4, #16]
 8006516:	1bed      	subs	r5, r5, r7
 8006518:	445d      	add	r5, fp
 800651a:	442b      	add	r3, r5
 800651c:	6123      	str	r3, [r4, #16]
 800651e:	2000      	movs	r0, #0
 8006520:	b007      	add	sp, #28
 8006522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006526:	f04f 0b00 	mov.w	fp, #0
 800652a:	e7ca      	b.n	80064c2 <_scanf_i+0x15e>
 800652c:	07ca      	lsls	r2, r1, #31
 800652e:	bf4c      	ite	mi
 8006530:	8018      	strhmi	r0, [r3, #0]
 8006532:	6018      	strpl	r0, [r3, #0]
 8006534:	e7eb      	b.n	800650e <_scanf_i+0x1aa>
 8006536:	2001      	movs	r0, #1
 8006538:	e7f2      	b.n	8006520 <_scanf_i+0x1bc>
 800653a:	bf00      	nop
 800653c:	08006bb4 	.word	0x08006bb4
 8006540:	080067c1 	.word	0x080067c1
 8006544:	080068a1 	.word	0x080068a1
 8006548:	08006bec 	.word	0x08006bec

0800654c <__sccl>:
 800654c:	b570      	push	{r4, r5, r6, lr}
 800654e:	780b      	ldrb	r3, [r1, #0]
 8006550:	4604      	mov	r4, r0
 8006552:	2b5e      	cmp	r3, #94	@ 0x5e
 8006554:	bf0b      	itete	eq
 8006556:	784b      	ldrbeq	r3, [r1, #1]
 8006558:	1c4a      	addne	r2, r1, #1
 800655a:	1c8a      	addeq	r2, r1, #2
 800655c:	2100      	movne	r1, #0
 800655e:	bf08      	it	eq
 8006560:	2101      	moveq	r1, #1
 8006562:	3801      	subs	r0, #1
 8006564:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8006568:	f800 1f01 	strb.w	r1, [r0, #1]!
 800656c:	42a8      	cmp	r0, r5
 800656e:	d1fb      	bne.n	8006568 <__sccl+0x1c>
 8006570:	b90b      	cbnz	r3, 8006576 <__sccl+0x2a>
 8006572:	1e50      	subs	r0, r2, #1
 8006574:	bd70      	pop	{r4, r5, r6, pc}
 8006576:	f081 0101 	eor.w	r1, r1, #1
 800657a:	54e1      	strb	r1, [r4, r3]
 800657c:	4610      	mov	r0, r2
 800657e:	4602      	mov	r2, r0
 8006580:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006584:	2d2d      	cmp	r5, #45	@ 0x2d
 8006586:	d005      	beq.n	8006594 <__sccl+0x48>
 8006588:	2d5d      	cmp	r5, #93	@ 0x5d
 800658a:	d016      	beq.n	80065ba <__sccl+0x6e>
 800658c:	2d00      	cmp	r5, #0
 800658e:	d0f1      	beq.n	8006574 <__sccl+0x28>
 8006590:	462b      	mov	r3, r5
 8006592:	e7f2      	b.n	800657a <__sccl+0x2e>
 8006594:	7846      	ldrb	r6, [r0, #1]
 8006596:	2e5d      	cmp	r6, #93	@ 0x5d
 8006598:	d0fa      	beq.n	8006590 <__sccl+0x44>
 800659a:	42b3      	cmp	r3, r6
 800659c:	dcf8      	bgt.n	8006590 <__sccl+0x44>
 800659e:	3002      	adds	r0, #2
 80065a0:	461a      	mov	r2, r3
 80065a2:	3201      	adds	r2, #1
 80065a4:	4296      	cmp	r6, r2
 80065a6:	54a1      	strb	r1, [r4, r2]
 80065a8:	dcfb      	bgt.n	80065a2 <__sccl+0x56>
 80065aa:	1af2      	subs	r2, r6, r3
 80065ac:	3a01      	subs	r2, #1
 80065ae:	1c5d      	adds	r5, r3, #1
 80065b0:	42b3      	cmp	r3, r6
 80065b2:	bfa8      	it	ge
 80065b4:	2200      	movge	r2, #0
 80065b6:	18ab      	adds	r3, r5, r2
 80065b8:	e7e1      	b.n	800657e <__sccl+0x32>
 80065ba:	4610      	mov	r0, r2
 80065bc:	e7da      	b.n	8006574 <__sccl+0x28>

080065be <__submore>:
 80065be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065c2:	460c      	mov	r4, r1
 80065c4:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80065c6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80065ca:	4299      	cmp	r1, r3
 80065cc:	d11d      	bne.n	800660a <__submore+0x4c>
 80065ce:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80065d2:	f7ff fc15 	bl	8005e00 <_malloc_r>
 80065d6:	b918      	cbnz	r0, 80065e0 <__submore+0x22>
 80065d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80065dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80065e4:	63a3      	str	r3, [r4, #56]	@ 0x38
 80065e6:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80065ea:	6360      	str	r0, [r4, #52]	@ 0x34
 80065ec:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80065f0:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80065f4:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 80065f8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80065fc:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8006600:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8006604:	6020      	str	r0, [r4, #0]
 8006606:	2000      	movs	r0, #0
 8006608:	e7e8      	b.n	80065dc <__submore+0x1e>
 800660a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800660c:	0077      	lsls	r7, r6, #1
 800660e:	463a      	mov	r2, r7
 8006610:	f000 f82e 	bl	8006670 <_realloc_r>
 8006614:	4605      	mov	r5, r0
 8006616:	2800      	cmp	r0, #0
 8006618:	d0de      	beq.n	80065d8 <__submore+0x1a>
 800661a:	eb00 0806 	add.w	r8, r0, r6
 800661e:	4601      	mov	r1, r0
 8006620:	4632      	mov	r2, r6
 8006622:	4640      	mov	r0, r8
 8006624:	f000 f816 	bl	8006654 <memcpy>
 8006628:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800662c:	f8c4 8000 	str.w	r8, [r4]
 8006630:	e7e9      	b.n	8006606 <__submore+0x48>
	...

08006634 <_sbrk_r>:
 8006634:	b538      	push	{r3, r4, r5, lr}
 8006636:	4d06      	ldr	r5, [pc, #24]	@ (8006650 <_sbrk_r+0x1c>)
 8006638:	2300      	movs	r3, #0
 800663a:	4604      	mov	r4, r0
 800663c:	4608      	mov	r0, r1
 800663e:	602b      	str	r3, [r5, #0]
 8006640:	f7fa f968 	bl	8000914 <_sbrk>
 8006644:	1c43      	adds	r3, r0, #1
 8006646:	d102      	bne.n	800664e <_sbrk_r+0x1a>
 8006648:	682b      	ldr	r3, [r5, #0]
 800664a:	b103      	cbz	r3, 800664e <_sbrk_r+0x1a>
 800664c:	6023      	str	r3, [r4, #0]
 800664e:	bd38      	pop	{r3, r4, r5, pc}
 8006650:	20000328 	.word	0x20000328

08006654 <memcpy>:
 8006654:	440a      	add	r2, r1
 8006656:	4291      	cmp	r1, r2
 8006658:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800665c:	d100      	bne.n	8006660 <memcpy+0xc>
 800665e:	4770      	bx	lr
 8006660:	b510      	push	{r4, lr}
 8006662:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006666:	f803 4f01 	strb.w	r4, [r3, #1]!
 800666a:	4291      	cmp	r1, r2
 800666c:	d1f9      	bne.n	8006662 <memcpy+0xe>
 800666e:	bd10      	pop	{r4, pc}

08006670 <_realloc_r>:
 8006670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006674:	4680      	mov	r8, r0
 8006676:	4615      	mov	r5, r2
 8006678:	460c      	mov	r4, r1
 800667a:	b921      	cbnz	r1, 8006686 <_realloc_r+0x16>
 800667c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006680:	4611      	mov	r1, r2
 8006682:	f7ff bbbd 	b.w	8005e00 <_malloc_r>
 8006686:	b92a      	cbnz	r2, 8006694 <_realloc_r+0x24>
 8006688:	f7ff fb4e 	bl	8005d28 <_free_r>
 800668c:	2400      	movs	r4, #0
 800668e:	4620      	mov	r0, r4
 8006690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006694:	f000 f906 	bl	80068a4 <_malloc_usable_size_r>
 8006698:	4285      	cmp	r5, r0
 800669a:	4606      	mov	r6, r0
 800669c:	d802      	bhi.n	80066a4 <_realloc_r+0x34>
 800669e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80066a2:	d8f4      	bhi.n	800668e <_realloc_r+0x1e>
 80066a4:	4629      	mov	r1, r5
 80066a6:	4640      	mov	r0, r8
 80066a8:	f7ff fbaa 	bl	8005e00 <_malloc_r>
 80066ac:	4607      	mov	r7, r0
 80066ae:	2800      	cmp	r0, #0
 80066b0:	d0ec      	beq.n	800668c <_realloc_r+0x1c>
 80066b2:	42b5      	cmp	r5, r6
 80066b4:	462a      	mov	r2, r5
 80066b6:	4621      	mov	r1, r4
 80066b8:	bf28      	it	cs
 80066ba:	4632      	movcs	r2, r6
 80066bc:	f7ff ffca 	bl	8006654 <memcpy>
 80066c0:	4621      	mov	r1, r4
 80066c2:	4640      	mov	r0, r8
 80066c4:	f7ff fb30 	bl	8005d28 <_free_r>
 80066c8:	463c      	mov	r4, r7
 80066ca:	e7e0      	b.n	800668e <_realloc_r+0x1e>

080066cc <_strtol_l.constprop.0>:
 80066cc:	2b24      	cmp	r3, #36	@ 0x24
 80066ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066d2:	4686      	mov	lr, r0
 80066d4:	4690      	mov	r8, r2
 80066d6:	d801      	bhi.n	80066dc <_strtol_l.constprop.0+0x10>
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d106      	bne.n	80066ea <_strtol_l.constprop.0+0x1e>
 80066dc:	f7ff faf8 	bl	8005cd0 <__errno>
 80066e0:	2316      	movs	r3, #22
 80066e2:	6003      	str	r3, [r0, #0]
 80066e4:	2000      	movs	r0, #0
 80066e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066ea:	4834      	ldr	r0, [pc, #208]	@ (80067bc <_strtol_l.constprop.0+0xf0>)
 80066ec:	460d      	mov	r5, r1
 80066ee:	462a      	mov	r2, r5
 80066f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80066f4:	5d06      	ldrb	r6, [r0, r4]
 80066f6:	f016 0608 	ands.w	r6, r6, #8
 80066fa:	d1f8      	bne.n	80066ee <_strtol_l.constprop.0+0x22>
 80066fc:	2c2d      	cmp	r4, #45	@ 0x2d
 80066fe:	d12d      	bne.n	800675c <_strtol_l.constprop.0+0x90>
 8006700:	782c      	ldrb	r4, [r5, #0]
 8006702:	2601      	movs	r6, #1
 8006704:	1c95      	adds	r5, r2, #2
 8006706:	f033 0210 	bics.w	r2, r3, #16
 800670a:	d109      	bne.n	8006720 <_strtol_l.constprop.0+0x54>
 800670c:	2c30      	cmp	r4, #48	@ 0x30
 800670e:	d12a      	bne.n	8006766 <_strtol_l.constprop.0+0x9a>
 8006710:	782a      	ldrb	r2, [r5, #0]
 8006712:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006716:	2a58      	cmp	r2, #88	@ 0x58
 8006718:	d125      	bne.n	8006766 <_strtol_l.constprop.0+0x9a>
 800671a:	786c      	ldrb	r4, [r5, #1]
 800671c:	2310      	movs	r3, #16
 800671e:	3502      	adds	r5, #2
 8006720:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006724:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8006728:	2200      	movs	r2, #0
 800672a:	fbbc f9f3 	udiv	r9, ip, r3
 800672e:	4610      	mov	r0, r2
 8006730:	fb03 ca19 	mls	sl, r3, r9, ip
 8006734:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006738:	2f09      	cmp	r7, #9
 800673a:	d81b      	bhi.n	8006774 <_strtol_l.constprop.0+0xa8>
 800673c:	463c      	mov	r4, r7
 800673e:	42a3      	cmp	r3, r4
 8006740:	dd27      	ble.n	8006792 <_strtol_l.constprop.0+0xc6>
 8006742:	1c57      	adds	r7, r2, #1
 8006744:	d007      	beq.n	8006756 <_strtol_l.constprop.0+0x8a>
 8006746:	4581      	cmp	r9, r0
 8006748:	d320      	bcc.n	800678c <_strtol_l.constprop.0+0xc0>
 800674a:	d101      	bne.n	8006750 <_strtol_l.constprop.0+0x84>
 800674c:	45a2      	cmp	sl, r4
 800674e:	db1d      	blt.n	800678c <_strtol_l.constprop.0+0xc0>
 8006750:	fb00 4003 	mla	r0, r0, r3, r4
 8006754:	2201      	movs	r2, #1
 8006756:	f815 4b01 	ldrb.w	r4, [r5], #1
 800675a:	e7eb      	b.n	8006734 <_strtol_l.constprop.0+0x68>
 800675c:	2c2b      	cmp	r4, #43	@ 0x2b
 800675e:	bf04      	itt	eq
 8006760:	782c      	ldrbeq	r4, [r5, #0]
 8006762:	1c95      	addeq	r5, r2, #2
 8006764:	e7cf      	b.n	8006706 <_strtol_l.constprop.0+0x3a>
 8006766:	2b00      	cmp	r3, #0
 8006768:	d1da      	bne.n	8006720 <_strtol_l.constprop.0+0x54>
 800676a:	2c30      	cmp	r4, #48	@ 0x30
 800676c:	bf0c      	ite	eq
 800676e:	2308      	moveq	r3, #8
 8006770:	230a      	movne	r3, #10
 8006772:	e7d5      	b.n	8006720 <_strtol_l.constprop.0+0x54>
 8006774:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006778:	2f19      	cmp	r7, #25
 800677a:	d801      	bhi.n	8006780 <_strtol_l.constprop.0+0xb4>
 800677c:	3c37      	subs	r4, #55	@ 0x37
 800677e:	e7de      	b.n	800673e <_strtol_l.constprop.0+0x72>
 8006780:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006784:	2f19      	cmp	r7, #25
 8006786:	d804      	bhi.n	8006792 <_strtol_l.constprop.0+0xc6>
 8006788:	3c57      	subs	r4, #87	@ 0x57
 800678a:	e7d8      	b.n	800673e <_strtol_l.constprop.0+0x72>
 800678c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006790:	e7e1      	b.n	8006756 <_strtol_l.constprop.0+0x8a>
 8006792:	1c53      	adds	r3, r2, #1
 8006794:	d108      	bne.n	80067a8 <_strtol_l.constprop.0+0xdc>
 8006796:	2322      	movs	r3, #34	@ 0x22
 8006798:	f8ce 3000 	str.w	r3, [lr]
 800679c:	4660      	mov	r0, ip
 800679e:	f1b8 0f00 	cmp.w	r8, #0
 80067a2:	d0a0      	beq.n	80066e6 <_strtol_l.constprop.0+0x1a>
 80067a4:	1e69      	subs	r1, r5, #1
 80067a6:	e006      	b.n	80067b6 <_strtol_l.constprop.0+0xea>
 80067a8:	b106      	cbz	r6, 80067ac <_strtol_l.constprop.0+0xe0>
 80067aa:	4240      	negs	r0, r0
 80067ac:	f1b8 0f00 	cmp.w	r8, #0
 80067b0:	d099      	beq.n	80066e6 <_strtol_l.constprop.0+0x1a>
 80067b2:	2a00      	cmp	r2, #0
 80067b4:	d1f6      	bne.n	80067a4 <_strtol_l.constprop.0+0xd8>
 80067b6:	f8c8 1000 	str.w	r1, [r8]
 80067ba:	e794      	b.n	80066e6 <_strtol_l.constprop.0+0x1a>
 80067bc:	08006bf8 	.word	0x08006bf8

080067c0 <_strtol_r>:
 80067c0:	f7ff bf84 	b.w	80066cc <_strtol_l.constprop.0>

080067c4 <_strtoul_l.constprop.0>:
 80067c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80067c8:	4e34      	ldr	r6, [pc, #208]	@ (800689c <_strtoul_l.constprop.0+0xd8>)
 80067ca:	4686      	mov	lr, r0
 80067cc:	460d      	mov	r5, r1
 80067ce:	4628      	mov	r0, r5
 80067d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80067d4:	5d37      	ldrb	r7, [r6, r4]
 80067d6:	f017 0708 	ands.w	r7, r7, #8
 80067da:	d1f8      	bne.n	80067ce <_strtoul_l.constprop.0+0xa>
 80067dc:	2c2d      	cmp	r4, #45	@ 0x2d
 80067de:	d12f      	bne.n	8006840 <_strtoul_l.constprop.0+0x7c>
 80067e0:	782c      	ldrb	r4, [r5, #0]
 80067e2:	2701      	movs	r7, #1
 80067e4:	1c85      	adds	r5, r0, #2
 80067e6:	f033 0010 	bics.w	r0, r3, #16
 80067ea:	d109      	bne.n	8006800 <_strtoul_l.constprop.0+0x3c>
 80067ec:	2c30      	cmp	r4, #48	@ 0x30
 80067ee:	d12c      	bne.n	800684a <_strtoul_l.constprop.0+0x86>
 80067f0:	7828      	ldrb	r0, [r5, #0]
 80067f2:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80067f6:	2858      	cmp	r0, #88	@ 0x58
 80067f8:	d127      	bne.n	800684a <_strtoul_l.constprop.0+0x86>
 80067fa:	786c      	ldrb	r4, [r5, #1]
 80067fc:	2310      	movs	r3, #16
 80067fe:	3502      	adds	r5, #2
 8006800:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8006804:	2600      	movs	r6, #0
 8006806:	fbb8 f8f3 	udiv	r8, r8, r3
 800680a:	fb03 f908 	mul.w	r9, r3, r8
 800680e:	ea6f 0909 	mvn.w	r9, r9
 8006812:	4630      	mov	r0, r6
 8006814:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8006818:	f1bc 0f09 	cmp.w	ip, #9
 800681c:	d81c      	bhi.n	8006858 <_strtoul_l.constprop.0+0x94>
 800681e:	4664      	mov	r4, ip
 8006820:	42a3      	cmp	r3, r4
 8006822:	dd2a      	ble.n	800687a <_strtoul_l.constprop.0+0xb6>
 8006824:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8006828:	d007      	beq.n	800683a <_strtoul_l.constprop.0+0x76>
 800682a:	4580      	cmp	r8, r0
 800682c:	d322      	bcc.n	8006874 <_strtoul_l.constprop.0+0xb0>
 800682e:	d101      	bne.n	8006834 <_strtoul_l.constprop.0+0x70>
 8006830:	45a1      	cmp	r9, r4
 8006832:	db1f      	blt.n	8006874 <_strtoul_l.constprop.0+0xb0>
 8006834:	fb00 4003 	mla	r0, r0, r3, r4
 8006838:	2601      	movs	r6, #1
 800683a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800683e:	e7e9      	b.n	8006814 <_strtoul_l.constprop.0+0x50>
 8006840:	2c2b      	cmp	r4, #43	@ 0x2b
 8006842:	bf04      	itt	eq
 8006844:	782c      	ldrbeq	r4, [r5, #0]
 8006846:	1c85      	addeq	r5, r0, #2
 8006848:	e7cd      	b.n	80067e6 <_strtoul_l.constprop.0+0x22>
 800684a:	2b00      	cmp	r3, #0
 800684c:	d1d8      	bne.n	8006800 <_strtoul_l.constprop.0+0x3c>
 800684e:	2c30      	cmp	r4, #48	@ 0x30
 8006850:	bf0c      	ite	eq
 8006852:	2308      	moveq	r3, #8
 8006854:	230a      	movne	r3, #10
 8006856:	e7d3      	b.n	8006800 <_strtoul_l.constprop.0+0x3c>
 8006858:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800685c:	f1bc 0f19 	cmp.w	ip, #25
 8006860:	d801      	bhi.n	8006866 <_strtoul_l.constprop.0+0xa2>
 8006862:	3c37      	subs	r4, #55	@ 0x37
 8006864:	e7dc      	b.n	8006820 <_strtoul_l.constprop.0+0x5c>
 8006866:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800686a:	f1bc 0f19 	cmp.w	ip, #25
 800686e:	d804      	bhi.n	800687a <_strtoul_l.constprop.0+0xb6>
 8006870:	3c57      	subs	r4, #87	@ 0x57
 8006872:	e7d5      	b.n	8006820 <_strtoul_l.constprop.0+0x5c>
 8006874:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8006878:	e7df      	b.n	800683a <_strtoul_l.constprop.0+0x76>
 800687a:	1c73      	adds	r3, r6, #1
 800687c:	d106      	bne.n	800688c <_strtoul_l.constprop.0+0xc8>
 800687e:	2322      	movs	r3, #34	@ 0x22
 8006880:	f8ce 3000 	str.w	r3, [lr]
 8006884:	4630      	mov	r0, r6
 8006886:	b932      	cbnz	r2, 8006896 <_strtoul_l.constprop.0+0xd2>
 8006888:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800688c:	b107      	cbz	r7, 8006890 <_strtoul_l.constprop.0+0xcc>
 800688e:	4240      	negs	r0, r0
 8006890:	2a00      	cmp	r2, #0
 8006892:	d0f9      	beq.n	8006888 <_strtoul_l.constprop.0+0xc4>
 8006894:	b106      	cbz	r6, 8006898 <_strtoul_l.constprop.0+0xd4>
 8006896:	1e69      	subs	r1, r5, #1
 8006898:	6011      	str	r1, [r2, #0]
 800689a:	e7f5      	b.n	8006888 <_strtoul_l.constprop.0+0xc4>
 800689c:	08006bf8 	.word	0x08006bf8

080068a0 <_strtoul_r>:
 80068a0:	f7ff bf90 	b.w	80067c4 <_strtoul_l.constprop.0>

080068a4 <_malloc_usable_size_r>:
 80068a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068a8:	1f18      	subs	r0, r3, #4
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	bfbc      	itt	lt
 80068ae:	580b      	ldrlt	r3, [r1, r0]
 80068b0:	18c0      	addlt	r0, r0, r3
 80068b2:	4770      	bx	lr

080068b4 <_init>:
 80068b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068b6:	bf00      	nop
 80068b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068ba:	bc08      	pop	{r3}
 80068bc:	469e      	mov	lr, r3
 80068be:	4770      	bx	lr

080068c0 <_fini>:
 80068c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068c2:	bf00      	nop
 80068c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068c6:	bc08      	pop	{r3}
 80068c8:	469e      	mov	lr, r3
 80068ca:	4770      	bx	lr
