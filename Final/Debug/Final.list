
Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003558  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08003704  08003704  00004704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037f0  080037f0  00005014  2**0
                  CONTENTS
  4 .ARM          00000008  080037f0  080037f0  000047f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080037f8  080037f8  00005014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037f8  080037f8  000047f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080037fc  080037fc  000047fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08003800  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005014  2**0
                  CONTENTS
 10 .bss          00000144  20000014  20000014  00005014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000158  20000158  00005014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bf3c  00000000  00000000  00005044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002192  00000000  00000000  00010f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b60  00000000  00000000  00013118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008c4  00000000  00000000  00013c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022f5f  00000000  00000000  0001453c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e381  00000000  00000000  0003749b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d151e  00000000  00000000  0004581c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00116d3a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002d48  00000000  00000000  00116d80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  00119ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000014 	.word	0x20000014
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080036ec 	.word	0x080036ec

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000018 	.word	0x20000018
 80001e8:	080036ec 	.word	0x080036ec

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f000 ffc2 	bl	8001468 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f82c 	bl	8000540 <SystemClock_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

  /* USER CODE BEGIN 2 */
  uartInit();
 80004e8:	f000 fd04 	bl	8000ef4 <uartInit>
  buttonInit();
 80004ec:	f000 fe64 	bl	80011b8 <buttonInit>
  lcdInit();
 80004f0:	f000 fab8 	bl	8000a64 <lcdInit>
  lcdPrintString(" !@ABCD`abcd");
 80004f4:	480f      	ldr	r0, [pc, #60]	@ (8000534 <main+0x58>)
 80004f6:	f000 fbb0 	bl	8000c5a <lcdPrintString>
  lcdSetCursor(0, 0);
 80004fa:	2100      	movs	r1, #0
 80004fc:	2000      	movs	r0, #0
 80004fe:	f000 faf3 	bl	8000ae8 <lcdSetCursor>
  lcdPrintInt(69);
 8000502:	2045      	movs	r0, #69	@ 0x45
 8000504:	f000 fb22 	bl	8000b4c <lcdPrintInt>
  lcdSetCursor(1, 2);
 8000508:	2102      	movs	r1, #2
 800050a:	2001      	movs	r0, #1
 800050c:	f000 faec 	bl	8000ae8 <lcdSetCursor>
  lcdPrintfCenteredString("hola %d ", ' ', 420, " ");
 8000510:	4b09      	ldr	r3, [pc, #36]	@ (8000538 <main+0x5c>)
 8000512:	f44f 72d2 	mov.w	r2, #420	@ 0x1a4
 8000516:	2120      	movs	r1, #32
 8000518:	4808      	ldr	r0, [pc, #32]	@ (800053c <main+0x60>)
 800051a:	f000 fbef 	bl	8000cfc <lcdPrintfCenteredString>
  rtcInit();
 800051e:	f000 fca9 	bl	8000e74 <rtcInit>
  displayFSMInit();
 8000522:	f000 ff35 	bl	8001390 <displayFSMInit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  buttonFSM();
 8000526:	f000 fe5f 	bl	80011e8 <buttonFSM>
	  displayFSM();
 800052a:	f000 ff7d 	bl	8001428 <displayFSM>
	  buttonFSM();
 800052e:	bf00      	nop
 8000530:	e7f9      	b.n	8000526 <main+0x4a>
 8000532:	bf00      	nop
 8000534:	08003708 	.word	0x08003708
 8000538:	08003718 	.word	0x08003718
 800053c:	0800371c 	.word	0x0800371c

08000540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b094      	sub	sp, #80	@ 0x50
 8000544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	f107 0320 	add.w	r3, r7, #32
 800054a:	2230      	movs	r2, #48	@ 0x30
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f003 f8a0 	bl	8003694 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000554:	f107 030c 	add.w	r3, r7, #12
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
 8000562:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000564:	2300      	movs	r3, #0
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	4b23      	ldr	r3, [pc, #140]	@ (80005f8 <SystemClock_Config+0xb8>)
 800056a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800056c:	4a22      	ldr	r2, [pc, #136]	@ (80005f8 <SystemClock_Config+0xb8>)
 800056e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000572:	6413      	str	r3, [r2, #64]	@ 0x40
 8000574:	4b20      	ldr	r3, [pc, #128]	@ (80005f8 <SystemClock_Config+0xb8>)
 8000576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000578:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800057c:	60bb      	str	r3, [r7, #8]
 800057e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000580:	2300      	movs	r3, #0
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	4b1d      	ldr	r3, [pc, #116]	@ (80005fc <SystemClock_Config+0xbc>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800058c:	4a1b      	ldr	r2, [pc, #108]	@ (80005fc <SystemClock_Config+0xbc>)
 800058e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000592:	6013      	str	r3, [r2, #0]
 8000594:	4b19      	ldr	r3, [pc, #100]	@ (80005fc <SystemClock_Config+0xbc>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005a0:	2302      	movs	r3, #2
 80005a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a4:	2301      	movs	r3, #1
 80005a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a8:	2310      	movs	r3, #16
 80005aa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005ac:	2300      	movs	r3, #0
 80005ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b0:	f107 0320 	add.w	r3, r7, #32
 80005b4:	4618      	mov	r0, r3
 80005b6:	f001 ffc9 	bl	800254c <HAL_RCC_OscConfig>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005c0:	f000 f81e 	bl	8000600 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c4:	230f      	movs	r3, #15
 80005c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005c8:	2300      	movs	r3, #0
 80005ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005da:	f107 030c 	add.w	r3, r7, #12
 80005de:	2100      	movs	r1, #0
 80005e0:	4618      	mov	r0, r3
 80005e2:	f002 fa2b 	bl	8002a3c <HAL_RCC_ClockConfig>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80005ec:	f000 f808 	bl	8000600 <Error_Handler>
  }
}
 80005f0:	bf00      	nop
 80005f2:	3750      	adds	r7, #80	@ 0x50
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	40023800 	.word	0x40023800
 80005fc:	40007000 	.word	0x40007000

08000600 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	uartSendString("error nashe");
 8000604:	4803      	ldr	r0, [pc, #12]	@ (8000614 <Error_Handler+0x14>)
 8000606:	f000 fc81 	bl	8000f0c <uartSendString>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800060a:	b672      	cpsid	i
}
 800060c:	bf00      	nop
  __disable_irq();
  while (1)
 800060e:	bf00      	nop
 8000610:	e7fd      	b.n	800060e <Error_Handler+0xe>
 8000612:	bf00      	nop
 8000614:	08003728 	.word	0x08003728

08000618 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800061e:	2300      	movs	r3, #0
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	4b10      	ldr	r3, [pc, #64]	@ (8000664 <HAL_MspInit+0x4c>)
 8000624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000626:	4a0f      	ldr	r2, [pc, #60]	@ (8000664 <HAL_MspInit+0x4c>)
 8000628:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800062c:	6453      	str	r3, [r2, #68]	@ 0x44
 800062e:	4b0d      	ldr	r3, [pc, #52]	@ (8000664 <HAL_MspInit+0x4c>)
 8000630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000632:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800063a:	2300      	movs	r3, #0
 800063c:	603b      	str	r3, [r7, #0]
 800063e:	4b09      	ldr	r3, [pc, #36]	@ (8000664 <HAL_MspInit+0x4c>)
 8000640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000642:	4a08      	ldr	r2, [pc, #32]	@ (8000664 <HAL_MspInit+0x4c>)
 8000644:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000648:	6413      	str	r3, [r2, #64]	@ 0x40
 800064a:	4b06      	ldr	r3, [pc, #24]	@ (8000664 <HAL_MspInit+0x4c>)
 800064c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800064e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000652:	603b      	str	r3, [r7, #0]
 8000654:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000656:	bf00      	nop
 8000658:	370c      	adds	r7, #12
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	40023800 	.word	0x40023800

08000668 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b08c      	sub	sp, #48	@ 0x30
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000670:	f107 031c 	add.w	r3, r7, #28
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a3b      	ldr	r2, [pc, #236]	@ (8000774 <HAL_I2C_MspInit+0x10c>)
 8000686:	4293      	cmp	r3, r2
 8000688:	d12d      	bne.n	80006e6 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	61bb      	str	r3, [r7, #24]
 800068e:	4b3a      	ldr	r3, [pc, #232]	@ (8000778 <HAL_I2C_MspInit+0x110>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000692:	4a39      	ldr	r2, [pc, #228]	@ (8000778 <HAL_I2C_MspInit+0x110>)
 8000694:	f043 0302 	orr.w	r3, r3, #2
 8000698:	6313      	str	r3, [r2, #48]	@ 0x30
 800069a:	4b37      	ldr	r3, [pc, #220]	@ (8000778 <HAL_I2C_MspInit+0x110>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069e:	f003 0302 	and.w	r3, r3, #2
 80006a2:	61bb      	str	r3, [r7, #24]
 80006a4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80006a6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80006aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006ac:	2312      	movs	r3, #18
 80006ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b0:	2300      	movs	r3, #0
 80006b2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006b4:	2303      	movs	r3, #3
 80006b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006b8:	2304      	movs	r3, #4
 80006ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006bc:	f107 031c 	add.w	r3, r7, #28
 80006c0:	4619      	mov	r1, r3
 80006c2:	482e      	ldr	r0, [pc, #184]	@ (800077c <HAL_I2C_MspInit+0x114>)
 80006c4:	f001 f84c 	bl	8001760 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006c8:	2300      	movs	r3, #0
 80006ca:	617b      	str	r3, [r7, #20]
 80006cc:	4b2a      	ldr	r3, [pc, #168]	@ (8000778 <HAL_I2C_MspInit+0x110>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d0:	4a29      	ldr	r2, [pc, #164]	@ (8000778 <HAL_I2C_MspInit+0x110>)
 80006d2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80006d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80006d8:	4b27      	ldr	r3, [pc, #156]	@ (8000778 <HAL_I2C_MspInit+0x110>)
 80006da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80006e0:	617b      	str	r3, [r7, #20]
 80006e2:	697b      	ldr	r3, [r7, #20]
      __HAL_RCC_I2C2_CLK_ENABLE();
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
    }
}
 80006e4:	e042      	b.n	800076c <HAL_I2C_MspInit+0x104>
  else if(hi2c->Instance==I2C2)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4a25      	ldr	r2, [pc, #148]	@ (8000780 <HAL_I2C_MspInit+0x118>)
 80006ec:	4293      	cmp	r3, r2
 80006ee:	d13d      	bne.n	800076c <HAL_I2C_MspInit+0x104>
      __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f0:	2300      	movs	r3, #0
 80006f2:	613b      	str	r3, [r7, #16]
 80006f4:	4b20      	ldr	r3, [pc, #128]	@ (8000778 <HAL_I2C_MspInit+0x110>)
 80006f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f8:	4a1f      	ldr	r2, [pc, #124]	@ (8000778 <HAL_I2C_MspInit+0x110>)
 80006fa:	f043 0302 	orr.w	r3, r3, #2
 80006fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8000700:	4b1d      	ldr	r3, [pc, #116]	@ (8000778 <HAL_I2C_MspInit+0x110>)
 8000702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000704:	f003 0302 	and.w	r3, r3, #2
 8000708:	613b      	str	r3, [r7, #16]
 800070a:	693b      	ldr	r3, [r7, #16]
      GPIO_InitStruct.Pin = RTC_SCL_Pin;
 800070c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000710:	61fb      	str	r3, [r7, #28]
      GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000712:	2312      	movs	r3, #18
 8000714:	623b      	str	r3, [r7, #32]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	627b      	str	r3, [r7, #36]	@ 0x24
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800071a:	2303      	movs	r3, #3
 800071c:	62bb      	str	r3, [r7, #40]	@ 0x28
      GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800071e:	2304      	movs	r3, #4
 8000720:	62fb      	str	r3, [r7, #44]	@ 0x2c
      HAL_GPIO_Init(RTC_SCL_GPIO_Port, &GPIO_InitStruct);
 8000722:	f107 031c 	add.w	r3, r7, #28
 8000726:	4619      	mov	r1, r3
 8000728:	4814      	ldr	r0, [pc, #80]	@ (800077c <HAL_I2C_MspInit+0x114>)
 800072a:	f001 f819 	bl	8001760 <HAL_GPIO_Init>
      GPIO_InitStruct.Pin = RTC_SDA_Pin;
 800072e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000732:	61fb      	str	r3, [r7, #28]
      GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000734:	2312      	movs	r3, #18
 8000736:	623b      	str	r3, [r7, #32]
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000738:	2301      	movs	r3, #1
 800073a:	627b      	str	r3, [r7, #36]	@ 0x24
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800073c:	2303      	movs	r3, #3
 800073e:	62bb      	str	r3, [r7, #40]	@ 0x28
      GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000740:	2304      	movs	r3, #4
 8000742:	62fb      	str	r3, [r7, #44]	@ 0x2c
      HAL_GPIO_Init(RTC_SDA_GPIO_Port, &GPIO_InitStruct);
 8000744:	f107 031c 	add.w	r3, r7, #28
 8000748:	4619      	mov	r1, r3
 800074a:	480c      	ldr	r0, [pc, #48]	@ (800077c <HAL_I2C_MspInit+0x114>)
 800074c:	f001 f808 	bl	8001760 <HAL_GPIO_Init>
      __HAL_RCC_I2C2_CLK_ENABLE();
 8000750:	2300      	movs	r3, #0
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	4b08      	ldr	r3, [pc, #32]	@ (8000778 <HAL_I2C_MspInit+0x110>)
 8000756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000758:	4a07      	ldr	r2, [pc, #28]	@ (8000778 <HAL_I2C_MspInit+0x110>)
 800075a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800075e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000760:	4b05      	ldr	r3, [pc, #20]	@ (8000778 <HAL_I2C_MspInit+0x110>)
 8000762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000764:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000768:	60fb      	str	r3, [r7, #12]
 800076a:	68fb      	ldr	r3, [r7, #12]
}
 800076c:	bf00      	nop
 800076e:	3730      	adds	r7, #48	@ 0x30
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	40005400 	.word	0x40005400
 8000778:	40023800 	.word	0x40023800
 800077c:	40020400 	.word	0x40020400
 8000780:	40005800 	.word	0x40005800

08000784 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08a      	sub	sp, #40	@ 0x28
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078c:	f107 0314 	add.w	r3, r7, #20
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
 8000798:	60da      	str	r2, [r3, #12]
 800079a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a19      	ldr	r2, [pc, #100]	@ (8000808 <HAL_UART_MspInit+0x84>)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d12c      	bne.n	8000800 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	613b      	str	r3, [r7, #16]
 80007aa:	4b18      	ldr	r3, [pc, #96]	@ (800080c <HAL_UART_MspInit+0x88>)
 80007ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ae:	4a17      	ldr	r2, [pc, #92]	@ (800080c <HAL_UART_MspInit+0x88>)
 80007b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80007b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80007b6:	4b15      	ldr	r3, [pc, #84]	@ (800080c <HAL_UART_MspInit+0x88>)
 80007b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80007be:	613b      	str	r3, [r7, #16]
 80007c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	60fb      	str	r3, [r7, #12]
 80007c6:	4b11      	ldr	r3, [pc, #68]	@ (800080c <HAL_UART_MspInit+0x88>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	4a10      	ldr	r2, [pc, #64]	@ (800080c <HAL_UART_MspInit+0x88>)
 80007cc:	f043 0308 	orr.w	r3, r3, #8
 80007d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d2:	4b0e      	ldr	r3, [pc, #56]	@ (800080c <HAL_UART_MspInit+0x88>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	f003 0308 	and.w	r3, r3, #8
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80007de:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80007e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e4:	2302      	movs	r3, #2
 80007e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007e8:	2301      	movs	r3, #1
 80007ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ec:	2303      	movs	r3, #3
 80007ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80007f0:	2307      	movs	r3, #7
 80007f2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007f4:	f107 0314 	add.w	r3, r7, #20
 80007f8:	4619      	mov	r1, r3
 80007fa:	4805      	ldr	r0, [pc, #20]	@ (8000810 <HAL_UART_MspInit+0x8c>)
 80007fc:	f000 ffb0 	bl	8001760 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000800:	bf00      	nop
 8000802:	3728      	adds	r7, #40	@ 0x28
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40004800 	.word	0x40004800
 800080c:	40023800 	.word	0x40023800
 8000810:	40020c00 	.word	0x40020c00

08000814 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000818:	bf00      	nop
 800081a:	e7fd      	b.n	8000818 <NMI_Handler+0x4>

0800081c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000820:	bf00      	nop
 8000822:	e7fd      	b.n	8000820 <HardFault_Handler+0x4>

08000824 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000828:	bf00      	nop
 800082a:	e7fd      	b.n	8000828 <MemManage_Handler+0x4>

0800082c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000830:	bf00      	nop
 8000832:	e7fd      	b.n	8000830 <BusFault_Handler+0x4>

08000834 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000838:	bf00      	nop
 800083a:	e7fd      	b.n	8000838 <UsageFault_Handler+0x4>

0800083c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000840:	bf00      	nop
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr

0800084a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800084a:	b480      	push	{r7}
 800084c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800084e:	bf00      	nop
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr

08000858 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800085c:	bf00      	nop
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr

08000866 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000866:	b580      	push	{r7, lr}
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800086a:	f000 fe4f 	bl	800150c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
	...

08000874 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000878:	4b06      	ldr	r3, [pc, #24]	@ (8000894 <SystemInit+0x20>)
 800087a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800087e:	4a05      	ldr	r2, [pc, #20]	@ (8000894 <SystemInit+0x20>)
 8000880:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000884:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	e000ed00 	.word	0xe000ed00

08000898 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000898:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008d0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800089c:	f7ff ffea 	bl	8000874 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008a0:	480c      	ldr	r0, [pc, #48]	@ (80008d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008a2:	490d      	ldr	r1, [pc, #52]	@ (80008d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008a4:	4a0d      	ldr	r2, [pc, #52]	@ (80008dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008a8:	e002      	b.n	80008b0 <LoopCopyDataInit>

080008aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ae:	3304      	adds	r3, #4

080008b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008b4:	d3f9      	bcc.n	80008aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008b6:	4a0a      	ldr	r2, [pc, #40]	@ (80008e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008b8:	4c0a      	ldr	r4, [pc, #40]	@ (80008e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80008ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008bc:	e001      	b.n	80008c2 <LoopFillZerobss>

080008be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008c0:	3204      	adds	r2, #4

080008c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008c4:	d3fb      	bcc.n	80008be <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80008c6:	f002 feed 	bl	80036a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008ca:	f7ff fe07 	bl	80004dc <main>
  bx  lr    
 80008ce:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80008d0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80008d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008d8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80008dc:	08003800 	.word	0x08003800
  ldr r2, =_sbss
 80008e0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80008e4:	20000158 	.word	0x20000158

080008e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008e8:	e7fe      	b.n	80008e8 <ADC_IRQHandler>
	...

080008ec <lcdSendCommand>:

/************************************
 * STATIC FUNCTIONS
 ************************************/
static void lcdSendCommand (uint8_t cmd)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b086      	sub	sp, #24
 80008f0:	af02      	add	r7, sp, #8
 80008f2:	4603      	mov	r3, r0
 80008f4:	71fb      	strb	r3, [r7, #7]
	uint8_t highNibble, lowNibble;
	uint8_t txData[4];

	highNibble = (cmd & 0xF0) | BL_BIT;
 80008f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008fa:	f023 030f 	bic.w	r3, r3, #15
 80008fe:	b25b      	sxtb	r3, r3
 8000900:	f043 0308 	orr.w	r3, r3, #8
 8000904:	b25b      	sxtb	r3, r3
 8000906:	73fb      	strb	r3, [r7, #15]
	lowNibble = ((cmd<<4) & 0xF0) | BL_BIT;
 8000908:	79fb      	ldrb	r3, [r7, #7]
 800090a:	011b      	lsls	r3, r3, #4
 800090c:	b25b      	sxtb	r3, r3
 800090e:	f043 0308 	orr.w	r3, r3, #8
 8000912:	b25b      	sxtb	r3, r3
 8000914:	73bb      	strb	r3, [r7, #14]

	txData[0] = highNibble | EN_BIT;
 8000916:	7bfb      	ldrb	r3, [r7, #15]
 8000918:	f043 0304 	orr.w	r3, r3, #4
 800091c:	b2db      	uxtb	r3, r3
 800091e:	723b      	strb	r3, [r7, #8]
	txData[1] = highNibble;
 8000920:	7bfb      	ldrb	r3, [r7, #15]
 8000922:	727b      	strb	r3, [r7, #9]
	txData[2] = lowNibble | EN_BIT;
 8000924:	7bbb      	ldrb	r3, [r7, #14]
 8000926:	f043 0304 	orr.w	r3, r3, #4
 800092a:	b2db      	uxtb	r3, r3
 800092c:	72bb      	strb	r3, [r7, #10]
	txData[3] = lowNibble;
 800092e:	7bbb      	ldrb	r3, [r7, #14]
 8000930:	72fb      	strb	r3, [r7, #11]

	if (HAL_I2C_Master_Transmit(&hi2c1, (LCD_ADDRESS<<1), txData, 4, HAL_MAX_DELAY) != HAL_OK)
 8000932:	f107 0208 	add.w	r2, r7, #8
 8000936:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800093a:	9300      	str	r3, [sp, #0]
 800093c:	2304      	movs	r3, #4
 800093e:	214e      	movs	r1, #78	@ 0x4e
 8000940:	4807      	ldr	r0, [pc, #28]	@ (8000960 <lcdSendCommand+0x74>)
 8000942:	f001 fa2f 	bl	8001da4 <HAL_I2C_Master_Transmit>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d002      	beq.n	8000952 <lcdSendCommand+0x66>
	{
		uartSendString((uint8_t*)"tx de lcd broken");
 800094c:	4805      	ldr	r0, [pc, #20]	@ (8000964 <lcdSendCommand+0x78>)
 800094e:	f000 fadd 	bl	8000f0c <uartSendString>
	}
	HAL_Delay(5);
 8000952:	2005      	movs	r0, #5
 8000954:	f000 fdfa 	bl	800154c <HAL_Delay>
}
 8000958:	bf00      	nop
 800095a:	3710      	adds	r7, #16
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	20000030 	.word	0x20000030
 8000964:	08003734 	.word	0x08003734

08000968 <lcdSendData>:

static void lcdSendData (uint8_t data)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b086      	sub	sp, #24
 800096c:	af02      	add	r7, sp, #8
 800096e:	4603      	mov	r3, r0
 8000970:	71fb      	strb	r3, [r7, #7]
	uint8_t highNibble, lowNibble;
	uint8_t txData[4];

	highNibble = (data & 0xF0) | BL_BIT | RS_BIT;
 8000972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000976:	f023 030f 	bic.w	r3, r3, #15
 800097a:	b25b      	sxtb	r3, r3
 800097c:	f043 0309 	orr.w	r3, r3, #9
 8000980:	b25b      	sxtb	r3, r3
 8000982:	73fb      	strb	r3, [r7, #15]
	lowNibble = ((data<<4) & 0xF0) | BL_BIT | RS_BIT;
 8000984:	79fb      	ldrb	r3, [r7, #7]
 8000986:	011b      	lsls	r3, r3, #4
 8000988:	b25b      	sxtb	r3, r3
 800098a:	f043 0309 	orr.w	r3, r3, #9
 800098e:	b25b      	sxtb	r3, r3
 8000990:	73bb      	strb	r3, [r7, #14]

	txData[0] = lowNibble  | EN_BIT;
 8000992:	7bbb      	ldrb	r3, [r7, #14]
 8000994:	f043 0304 	orr.w	r3, r3, #4
 8000998:	b2db      	uxtb	r3, r3
 800099a:	723b      	strb	r3, [r7, #8]
	txData[1] = lowNibble;
 800099c:	7bbb      	ldrb	r3, [r7, #14]
 800099e:	727b      	strb	r3, [r7, #9]
	txData[2] = highNibble | EN_BIT;
 80009a0:	7bfb      	ldrb	r3, [r7, #15]
 80009a2:	f043 0304 	orr.w	r3, r3, #4
 80009a6:	b2db      	uxtb	r3, r3
 80009a8:	72bb      	strb	r3, [r7, #10]
	txData[3] = highNibble;
 80009aa:	7bfb      	ldrb	r3, [r7, #15]
 80009ac:	72fb      	strb	r3, [r7, #11]

	if (HAL_I2C_Master_Transmit(&hi2c1, (LCD_ADDRESS<<1), txData, 4, HAL_MAX_DELAY) != HAL_OK)
 80009ae:	f107 0208 	add.w	r2, r7, #8
 80009b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80009b6:	9300      	str	r3, [sp, #0]
 80009b8:	2304      	movs	r3, #4
 80009ba:	214e      	movs	r1, #78	@ 0x4e
 80009bc:	4807      	ldr	r0, [pc, #28]	@ (80009dc <lcdSendData+0x74>)
 80009be:	f001 f9f1 	bl	8001da4 <HAL_I2C_Master_Transmit>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d002      	beq.n	80009ce <lcdSendData+0x66>
	{
		uartSendString((uint8_t*)"tx de lcd broken");
 80009c8:	4805      	ldr	r0, [pc, #20]	@ (80009e0 <lcdSendData+0x78>)
 80009ca:	f000 fa9f 	bl	8000f0c <uartSendString>
	}
	HAL_Delay(5);
 80009ce:	2005      	movs	r0, #5
 80009d0:	f000 fdbc 	bl	800154c <HAL_Delay>
}
 80009d4:	bf00      	nop
 80009d6:	3710      	adds	r7, #16
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	20000030 	.word	0x20000030
 80009e0:	08003734 	.word	0x08003734

080009e4 <MX_I2C1_Init>:

static void MX_I2C1_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 80009e8:	4b1c      	ldr	r3, [pc, #112]	@ (8000a5c <MX_I2C1_Init+0x78>)
 80009ea:	4a1d      	ldr	r2, [pc, #116]	@ (8000a60 <MX_I2C1_Init+0x7c>)
 80009ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 10000;
 80009ee:	4b1b      	ldr	r3, [pc, #108]	@ (8000a5c <MX_I2C1_Init+0x78>)
 80009f0:	f242 7210 	movw	r2, #10000	@ 0x2710
 80009f4:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009f6:	4b19      	ldr	r3, [pc, #100]	@ (8000a5c <MX_I2C1_Init+0x78>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009fc:	4b17      	ldr	r3, [pc, #92]	@ (8000a5c <MX_I2C1_Init+0x78>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a02:	4b16      	ldr	r3, [pc, #88]	@ (8000a5c <MX_I2C1_Init+0x78>)
 8000a04:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a08:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a0a:	4b14      	ldr	r3, [pc, #80]	@ (8000a5c <MX_I2C1_Init+0x78>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a10:	4b12      	ldr	r3, [pc, #72]	@ (8000a5c <MX_I2C1_Init+0x78>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a16:	4b11      	ldr	r3, [pc, #68]	@ (8000a5c <MX_I2C1_Init+0x78>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a5c <MX_I2C1_Init+0x78>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a22:	480e      	ldr	r0, [pc, #56]	@ (8000a5c <MX_I2C1_Init+0x78>)
 8000a24:	f001 f87a 	bl	8001b1c <HAL_I2C_Init>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8000a2e:	f7ff fde7 	bl	8000600 <Error_Handler>
  }

  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a32:	2100      	movs	r1, #0
 8000a34:	4809      	ldr	r0, [pc, #36]	@ (8000a5c <MX_I2C1_Init+0x78>)
 8000a36:	f001 fd0e 	bl	8002456 <HAL_I2CEx_ConfigAnalogFilter>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_I2C1_Init+0x60>
  {
    Error_Handler();
 8000a40:	f7ff fdde 	bl	8000600 <Error_Handler>
  }

  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a44:	2100      	movs	r1, #0
 8000a46:	4805      	ldr	r0, [pc, #20]	@ (8000a5c <MX_I2C1_Init+0x78>)
 8000a48:	f001 fd41 	bl	80024ce <HAL_I2CEx_ConfigDigitalFilter>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_I2C1_Init+0x72>
  {
    Error_Handler();
 8000a52:	f7ff fdd5 	bl	8000600 <Error_Handler>
  }
}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	20000030 	.word	0x20000030
 8000a60:	40005400 	.word	0x40005400

08000a64 <lcdInit>:

/************************************
 * GLOBAL FUNCTIONS
 ************************************/
void lcdInit ()
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
	MX_I2C1_Init();
 8000a68:	f7ff ffbc 	bl	80009e4 <MX_I2C1_Init>
	HAL_Delay(100);
 8000a6c:	2064      	movs	r0, #100	@ 0x64
 8000a6e:	f000 fd6d 	bl	800154c <HAL_Delay>

	lcdSendCommand(0x30);
 8000a72:	2030      	movs	r0, #48	@ 0x30
 8000a74:	f7ff ff3a 	bl	80008ec <lcdSendCommand>
	HAL_Delay(5);
 8000a78:	2005      	movs	r0, #5
 8000a7a:	f000 fd67 	bl	800154c <HAL_Delay>

	lcdSendCommand(0x30);
 8000a7e:	2030      	movs	r0, #48	@ 0x30
 8000a80:	f7ff ff34 	bl	80008ec <lcdSendCommand>
	HAL_Delay(5);
 8000a84:	2005      	movs	r0, #5
 8000a86:	f000 fd61 	bl	800154c <HAL_Delay>

	lcdSendCommand(0x30);
 8000a8a:	2030      	movs	r0, #48	@ 0x30
 8000a8c:	f7ff ff2e 	bl	80008ec <lcdSendCommand>
	HAL_Delay(5);
 8000a90:	2005      	movs	r0, #5
 8000a92:	f000 fd5b 	bl	800154c <HAL_Delay>

	lcdSendCommand(0x20);
 8000a96:	2020      	movs	r0, #32
 8000a98:	f7ff ff28 	bl	80008ec <lcdSendCommand>
	HAL_Delay(1);
 8000a9c:	2001      	movs	r0, #1
 8000a9e:	f000 fd55 	bl	800154c <HAL_Delay>

	lcdSendCommand(FUNCTIONSET | MODE_4BITMODE| LINES_2LINE | FONT_5x8DOTS);
 8000aa2:	2028      	movs	r0, #40	@ 0x28
 8000aa4:	f7ff ff22 	bl	80008ec <lcdSendCommand>
	HAL_Delay(1);
 8000aa8:	2001      	movs	r0, #1
 8000aaa:	f000 fd4f 	bl	800154c <HAL_Delay>

	lcdSendCommand(DISPLAYCONTROL | DISPLAYOFF | CURSOROFF | BLINKOFF);
 8000aae:	2008      	movs	r0, #8
 8000ab0:	f7ff ff1c 	bl	80008ec <lcdSendCommand>
	HAL_Delay(1);
 8000ab4:	2001      	movs	r0, #1
 8000ab6:	f000 fd49 	bl	800154c <HAL_Delay>

	lcdSendCommand(ENTRYMODESET | ENTRYLEFT | SHIFTINCREMENT);
 8000aba:	2007      	movs	r0, #7
 8000abc:	f7ff ff16 	bl	80008ec <lcdSendCommand>
	HAL_Delay(1);
 8000ac0:	2001      	movs	r0, #1
 8000ac2:	f000 fd43 	bl	800154c <HAL_Delay>

	lcdClear();
 8000ac6:	f000 f804 	bl	8000ad2 <lcdClear>
	lcdDisplayOn();
 8000aca:	f000 f835 	bl	8000b38 <lcdDisplayOn>
}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}

08000ad2 <lcdClear>:
void lcdClear ()
{
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	af00      	add	r7, sp, #0
	lcdSendCommand(CLEARDISPLAY);
 8000ad6:	2001      	movs	r0, #1
 8000ad8:	f7ff ff08 	bl	80008ec <lcdSendCommand>
	HAL_Delay(5);
 8000adc:	2005      	movs	r0, #5
 8000ade:	f000 fd35 	bl	800154c <HAL_Delay>
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
	...

08000ae8 <lcdSetCursor>:
{
	lcdSendCommand(RETURNHOME);
	HAL_Delay(5);
}
void lcdSetCursor (uint8_t row, uint8_t col)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	460a      	mov	r2, r1
 8000af2:	71fb      	strb	r3, [r7, #7]
 8000af4:	4613      	mov	r3, r2
 8000af6:	71bb      	strb	r3, [r7, #6]
	uint8_t rowOffsets[] = {0x00, 0x40, 0x14, 0x54};
 8000af8:	4b0e      	ldr	r3, [pc, #56]	@ (8000b34 <lcdSetCursor+0x4c>)
 8000afa:	60fb      	str	r3, [r7, #12]
	row = row % ROWS;
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	f003 0303 	and.w	r3, r3, #3
 8000b02:	71fb      	strb	r3, [r7, #7]
	lcdSendCommand(SETDDRAM | (col + rowOffsets[row]));
 8000b04:	79fb      	ldrb	r3, [r7, #7]
 8000b06:	3310      	adds	r3, #16
 8000b08:	443b      	add	r3, r7
 8000b0a:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 8000b0e:	79bb      	ldrb	r3, [r7, #6]
 8000b10:	4413      	add	r3, r2
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	b25b      	sxtb	r3, r3
 8000b16:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000b1a:	b25b      	sxtb	r3, r3
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f7ff fee4 	bl	80008ec <lcdSendCommand>
	HAL_Delay(5);
 8000b24:	2005      	movs	r0, #5
 8000b26:	f000 fd11 	bl	800154c <HAL_Delay>
}
 8000b2a:	bf00      	nop
 8000b2c:	3710      	adds	r7, #16
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	54144000 	.word	0x54144000

08000b38 <lcdDisplayOn>:
void lcdDisplayOn ()
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
	lcdSendCommand(DISPLAYCONTROL | DISPLAYON);
 8000b3c:	200c      	movs	r0, #12
 8000b3e:	f7ff fed5 	bl	80008ec <lcdSendCommand>
	HAL_Delay(5);
 8000b42:	2005      	movs	r0, #5
 8000b44:	f000 fd02 	bl	800154c <HAL_Delay>
}
 8000b48:	bf00      	nop
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <lcdPrintInt>:
{
	lcdSendCommand(DISPLAYCONTROL | BLINKOFF);
	HAL_Delay(5);
}
void lcdPrintInt(int16_t num)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	80fb      	strh	r3, [r7, #6]
    uint8_t str[3];  // Buffer for the converted string
    uint8_t i = 0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	73fb      	strb	r3, [r7, #15]
    bool_t isNegative = false;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	73bb      	strb	r3, [r7, #14]

    // Handle negative numbers
    if (num < 0) {
 8000b5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	da05      	bge.n	8000b72 <lcdPrintInt+0x26>
        isNegative = true;
 8000b66:	2301      	movs	r3, #1
 8000b68:	73bb      	strb	r3, [r7, #14]
        num = -num;
 8000b6a:	88fb      	ldrh	r3, [r7, #6]
 8000b6c:	425b      	negs	r3, r3
 8000b6e:	b29b      	uxth	r3, r3
 8000b70:	80fb      	strh	r3, [r7, #6]
    }

    // Convert to string (in reverse order)
    do {
        str[i++] = (num % 10) + '0'; // Get digit and convert to character
 8000b72:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000b76:	4b31      	ldr	r3, [pc, #196]	@ (8000c3c <lcdPrintInt+0xf0>)
 8000b78:	fb83 1302 	smull	r1, r3, r3, r2
 8000b7c:	1099      	asrs	r1, r3, #2
 8000b7e:	17d3      	asrs	r3, r2, #31
 8000b80:	1ac9      	subs	r1, r1, r3
 8000b82:	460b      	mov	r3, r1
 8000b84:	009b      	lsls	r3, r3, #2
 8000b86:	440b      	add	r3, r1
 8000b88:	005b      	lsls	r3, r3, #1
 8000b8a:	1ad3      	subs	r3, r2, r3
 8000b8c:	b21b      	sxth	r3, r3
 8000b8e:	b2da      	uxtb	r2, r3
 8000b90:	7bfb      	ldrb	r3, [r7, #15]
 8000b92:	1c59      	adds	r1, r3, #1
 8000b94:	73f9      	strb	r1, [r7, #15]
 8000b96:	3230      	adds	r2, #48	@ 0x30
 8000b98:	b2d2      	uxtb	r2, r2
 8000b9a:	3310      	adds	r3, #16
 8000b9c:	443b      	add	r3, r7
 8000b9e:	f803 2c08 	strb.w	r2, [r3, #-8]
        num /= 10;
 8000ba2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ba6:	4a25      	ldr	r2, [pc, #148]	@ (8000c3c <lcdPrintInt+0xf0>)
 8000ba8:	fb82 1203 	smull	r1, r2, r2, r3
 8000bac:	1092      	asrs	r2, r2, #2
 8000bae:	17db      	asrs	r3, r3, #31
 8000bb0:	1ad3      	subs	r3, r2, r3
 8000bb2:	80fb      	strh	r3, [r7, #6]
    } while (num > 0);
 8000bb4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	dcda      	bgt.n	8000b72 <lcdPrintInt+0x26>

    if (isNegative) {
 8000bbc:	7bbb      	ldrb	r3, [r7, #14]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d007      	beq.n	8000bd2 <lcdPrintInt+0x86>
        str[i++] = '-';
 8000bc2:	7bfb      	ldrb	r3, [r7, #15]
 8000bc4:	1c5a      	adds	r2, r3, #1
 8000bc6:	73fa      	strb	r2, [r7, #15]
 8000bc8:	3310      	adds	r3, #16
 8000bca:	443b      	add	r3, r7
 8000bcc:	222d      	movs	r2, #45	@ 0x2d
 8000bce:	f803 2c08 	strb.w	r2, [r3, #-8]
    }

    str[i] = '\0'; // Add null terminator
 8000bd2:	7bfb      	ldrb	r3, [r7, #15]
 8000bd4:	3310      	adds	r3, #16
 8000bd6:	443b      	add	r3, r7
 8000bd8:	2200      	movs	r2, #0
 8000bda:	f803 2c08 	strb.w	r2, [r3, #-8]

    // Reverse the string
    for (uint8_t j = 0, k = i - 1; j < k; j++, k--) {
 8000bde:	2300      	movs	r3, #0
 8000be0:	737b      	strb	r3, [r7, #13]
 8000be2:	7bfb      	ldrb	r3, [r7, #15]
 8000be4:	3b01      	subs	r3, #1
 8000be6:	733b      	strb	r3, [r7, #12]
 8000be8:	e01b      	b.n	8000c22 <lcdPrintInt+0xd6>
        char temp = str[j];
 8000bea:	7b7b      	ldrb	r3, [r7, #13]
 8000bec:	3310      	adds	r3, #16
 8000bee:	443b      	add	r3, r7
 8000bf0:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8000bf4:	72fb      	strb	r3, [r7, #11]
        str[j] = str[k];
 8000bf6:	7b3a      	ldrb	r2, [r7, #12]
 8000bf8:	7b7b      	ldrb	r3, [r7, #13]
 8000bfa:	3210      	adds	r2, #16
 8000bfc:	443a      	add	r2, r7
 8000bfe:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8000c02:	3310      	adds	r3, #16
 8000c04:	443b      	add	r3, r7
 8000c06:	f803 2c08 	strb.w	r2, [r3, #-8]
        str[k] = temp;
 8000c0a:	7b3b      	ldrb	r3, [r7, #12]
 8000c0c:	3310      	adds	r3, #16
 8000c0e:	443b      	add	r3, r7
 8000c10:	7afa      	ldrb	r2, [r7, #11]
 8000c12:	f803 2c08 	strb.w	r2, [r3, #-8]
    for (uint8_t j = 0, k = i - 1; j < k; j++, k--) {
 8000c16:	7b7b      	ldrb	r3, [r7, #13]
 8000c18:	3301      	adds	r3, #1
 8000c1a:	737b      	strb	r3, [r7, #13]
 8000c1c:	7b3b      	ldrb	r3, [r7, #12]
 8000c1e:	3b01      	subs	r3, #1
 8000c20:	733b      	strb	r3, [r7, #12]
 8000c22:	7b7a      	ldrb	r2, [r7, #13]
 8000c24:	7b3b      	ldrb	r3, [r7, #12]
 8000c26:	429a      	cmp	r2, r3
 8000c28:	d3df      	bcc.n	8000bea <lcdPrintInt+0x9e>
    }

    lcdPrintString((uint8_t*)str); // Write directly to the current position
 8000c2a:	f107 0308 	add.w	r3, r7, #8
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f000 f813 	bl	8000c5a <lcdPrintString>
}
 8000c34:	bf00      	nop
 8000c36:	3710      	adds	r7, #16
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	66666667 	.word	0x66666667

08000c40 <lcdPrintChar>:
void lcdPrintChar (uint8_t c)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	71fb      	strb	r3, [r7, #7]
	lcdSendData(c);
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f7ff fe8b 	bl	8000968 <lcdSendData>
}
 8000c52:	bf00      	nop
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <lcdPrintString>:
void lcdPrintString (uint8_t* str)
{
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b082      	sub	sp, #8
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
	while (*str != '\0')
 8000c62:	e006      	b.n	8000c72 <lcdPrintString+0x18>
	{
		lcdSendData(*str++);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	1c5a      	adds	r2, r3, #1
 8000c68:	607a      	str	r2, [r7, #4]
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff fe7b 	bl	8000968 <lcdSendData>
	while (*str != '\0')
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d1f4      	bne.n	8000c64 <lcdPrintString+0xa>
	}
}
 8000c7a:	bf00      	nop
 8000c7c:	bf00      	nop
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <lcdPrintf>:
void lcdPrintf(const uint8_t* format, uint8_t c, int16_t num, const uint8_t* str)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	60f8      	str	r0, [r7, #12]
 8000c8c:	607b      	str	r3, [r7, #4]
 8000c8e:	460b      	mov	r3, r1
 8000c90:	72fb      	strb	r3, [r7, #11]
 8000c92:	4613      	mov	r3, r2
 8000c94:	813b      	strh	r3, [r7, #8]
    while (*format != '\0')
 8000c96:	e028      	b.n	8000cea <lcdPrintf+0x66>
    {
        if (*format == '%')
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	2b25      	cmp	r3, #37	@ 0x25
 8000c9e:	d11c      	bne.n	8000cda <lcdPrintf+0x56>
        {
            format++;
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	60fb      	str	r3, [r7, #12]
            switch (*format)
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	2b73      	cmp	r3, #115	@ 0x73
 8000cac:	d011      	beq.n	8000cd2 <lcdPrintf+0x4e>
 8000cae:	2b73      	cmp	r3, #115	@ 0x73
 8000cb0:	dc18      	bgt.n	8000ce4 <lcdPrintf+0x60>
 8000cb2:	2b63      	cmp	r3, #99	@ 0x63
 8000cb4:	d002      	beq.n	8000cbc <lcdPrintf+0x38>
 8000cb6:	2b64      	cmp	r3, #100	@ 0x64
 8000cb8:	d005      	beq.n	8000cc6 <lcdPrintf+0x42>
 8000cba:	e013      	b.n	8000ce4 <lcdPrintf+0x60>
            {
                case 'c':
                    lcdPrintChar(c);
 8000cbc:	7afb      	ldrb	r3, [r7, #11]
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff ffbe 	bl	8000c40 <lcdPrintChar>
                    break;
 8000cc4:	e00e      	b.n	8000ce4 <lcdPrintf+0x60>
                case 'd':
                    lcdPrintInt(num);
 8000cc6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff ff3e 	bl	8000b4c <lcdPrintInt>
                    break;
 8000cd0:	e008      	b.n	8000ce4 <lcdPrintf+0x60>
                case 's':
                    lcdPrintString((uint8_t*)str);
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	f7ff ffc1 	bl	8000c5a <lcdPrintString>
                    break;
 8000cd8:	e004      	b.n	8000ce4 <lcdPrintf+0x60>
            }
        }
        else
        {
            lcdPrintChar(*format);
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff ffae 	bl	8000c40 <lcdPrintChar>
        }
        format++;
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	60fb      	str	r3, [r7, #12]
    while (*format != '\0')
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d1d2      	bne.n	8000c98 <lcdPrintf+0x14>
    }
}
 8000cf2:	bf00      	nop
 8000cf4:	bf00      	nop
 8000cf6:	3710      	adds	r7, #16
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <lcdPrintfCenteredString>:
void lcdPrintfCenteredString(uint8_t* str, uint8_t c, int16_t num, const uint8_t* string)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b086      	sub	sp, #24
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	60f8      	str	r0, [r7, #12]
 8000d04:	607b      	str	r3, [r7, #4]
 8000d06:	460b      	mov	r3, r1
 8000d08:	72fb      	strb	r3, [r7, #11]
 8000d0a:	4613      	mov	r3, r2
 8000d0c:	813b      	strh	r3, [r7, #8]
    if (str == NULL) {
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d103      	bne.n	8000d1c <lcdPrintfCenteredString+0x20>
        uartSendString((uint8_t*)"error printeo lcd\n\r");
 8000d14:	4822      	ldr	r0, [pc, #136]	@ (8000da0 <lcdPrintfCenteredString+0xa4>)
 8000d16:	f000 f8f9 	bl	8000f0c <uartSendString>
        return;
 8000d1a:	e03d      	b.n	8000d98 <lcdPrintfCenteredString+0x9c>
    }

    uint8_t strLen = 0;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	75fb      	strb	r3, [r7, #23]
    while (str[strLen] != '\0' && strLen < COLS) {
 8000d20:	e002      	b.n	8000d28 <lcdPrintfCenteredString+0x2c>
        strLen++;
 8000d22:	7dfb      	ldrb	r3, [r7, #23]
 8000d24:	3301      	adds	r3, #1
 8000d26:	75fb      	strb	r3, [r7, #23]
    while (str[strLen] != '\0' && strLen < COLS) {
 8000d28:	7dfb      	ldrb	r3, [r7, #23]
 8000d2a:	68fa      	ldr	r2, [r7, #12]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d002      	beq.n	8000d3a <lcdPrintfCenteredString+0x3e>
 8000d34:	7dfb      	ldrb	r3, [r7, #23]
 8000d36:	2b13      	cmp	r3, #19
 8000d38:	d9f3      	bls.n	8000d22 <lcdPrintfCenteredString+0x26>
    }

    uint8_t paddingBefore = (COLS - strLen) / 2; // Integer division for even padding
 8000d3a:	7dfb      	ldrb	r3, [r7, #23]
 8000d3c:	f1c3 0314 	rsb	r3, r3, #20
 8000d40:	0fda      	lsrs	r2, r3, #31
 8000d42:	4413      	add	r3, r2
 8000d44:	105b      	asrs	r3, r3, #1
 8000d46:	753b      	strb	r3, [r7, #20]

    // Write padding (spaces) before the string
    for (uint8_t i = 0; i < paddingBefore; i++) {
 8000d48:	2300      	movs	r3, #0
 8000d4a:	75bb      	strb	r3, [r7, #22]
 8000d4c:	e005      	b.n	8000d5a <lcdPrintfCenteredString+0x5e>
        lcdPrintChar(' ');
 8000d4e:	2020      	movs	r0, #32
 8000d50:	f7ff ff76 	bl	8000c40 <lcdPrintChar>
    for (uint8_t i = 0; i < paddingBefore; i++) {
 8000d54:	7dbb      	ldrb	r3, [r7, #22]
 8000d56:	3301      	adds	r3, #1
 8000d58:	75bb      	strb	r3, [r7, #22]
 8000d5a:	7dba      	ldrb	r2, [r7, #22]
 8000d5c:	7d3b      	ldrb	r3, [r7, #20]
 8000d5e:	429a      	cmp	r2, r3
 8000d60:	d3f5      	bcc.n	8000d4e <lcdPrintfCenteredString+0x52>
    }

    lcdPrintf(str, c, num, string);
 8000d62:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000d66:	7af9      	ldrb	r1, [r7, #11]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	68f8      	ldr	r0, [r7, #12]
 8000d6c:	f7ff ff8a 	bl	8000c84 <lcdPrintf>

    // Write padding (spaces) after the string
    uint8_t paddingAfter = COLS - strLen - paddingBefore;
 8000d70:	7dfa      	ldrb	r2, [r7, #23]
 8000d72:	7d3b      	ldrb	r3, [r7, #20]
 8000d74:	4413      	add	r3, r2
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	f1c3 0314 	rsb	r3, r3, #20
 8000d7c:	74fb      	strb	r3, [r7, #19]
    for (uint8_t i = 0; i < paddingAfter; i++) {
 8000d7e:	2300      	movs	r3, #0
 8000d80:	757b      	strb	r3, [r7, #21]
 8000d82:	e005      	b.n	8000d90 <lcdPrintfCenteredString+0x94>
        lcdPrintChar(' ');
 8000d84:	2020      	movs	r0, #32
 8000d86:	f7ff ff5b 	bl	8000c40 <lcdPrintChar>
    for (uint8_t i = 0; i < paddingAfter; i++) {
 8000d8a:	7d7b      	ldrb	r3, [r7, #21]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	757b      	strb	r3, [r7, #21]
 8000d90:	7d7a      	ldrb	r2, [r7, #21]
 8000d92:	7cfb      	ldrb	r3, [r7, #19]
 8000d94:	429a      	cmp	r2, r3
 8000d96:	d3f5      	bcc.n	8000d84 <lcdPrintfCenteredString+0x88>
    }
}
 8000d98:	3718      	adds	r7, #24
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	08003748 	.word	0x08003748

08000da4 <rtcSetRegByte>:

/************************************
 * STATIC FUNCTIONS
 ************************************/
static void rtcSetRegByte (uint8_t regAddr, uint8_t val)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b086      	sub	sp, #24
 8000da8:	af02      	add	r7, sp, #8
 8000daa:	4603      	mov	r3, r0
 8000dac:	460a      	mov	r2, r1
 8000dae:	71fb      	strb	r3, [r7, #7]
 8000db0:	4613      	mov	r3, r2
 8000db2:	71bb      	strb	r3, [r7, #6]
	uint8_t bytes[2]= {regAddr, val};
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	733b      	strb	r3, [r7, #12]
 8000db8:	79bb      	ldrb	r3, [r7, #6]
 8000dba:	737b      	strb	r3, [r7, #13]
	if (HAL_I2C_Master_Transmit(rtcHandle.hi2c, (rtcHandle.address<<1), bytes, 2, 100)!= HAL_OK)
 8000dbc:	4b0b      	ldr	r3, [pc, #44]	@ (8000dec <rtcSetRegByte+0x48>)
 8000dbe:	6818      	ldr	r0, [r3, #0]
 8000dc0:	4b0a      	ldr	r3, [pc, #40]	@ (8000dec <rtcSetRegByte+0x48>)
 8000dc2:	791b      	ldrb	r3, [r3, #4]
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	b299      	uxth	r1, r3
 8000dc8:	f107 020c 	add.w	r2, r7, #12
 8000dcc:	2364      	movs	r3, #100	@ 0x64
 8000dce:	9300      	str	r3, [sp, #0]
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	f000 ffe7 	bl	8001da4 <HAL_I2C_Master_Transmit>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d002      	beq.n	8000de2 <rtcSetRegByte+0x3e>
		{
		uartSendString((uint8_t*)"error tx RTC\n\r");
 8000ddc:	4804      	ldr	r0, [pc, #16]	@ (8000df0 <rtcSetRegByte+0x4c>)
 8000dde:	f000 f895 	bl	8000f0c <uartSendString>
		}
}
 8000de2:	bf00      	nop
 8000de4:	3710      	adds	r7, #16
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20000004 	.word	0x20000004
 8000df0:	0800375c 	.word	0x0800375c

08000df4 <MX_I2C2_Init>:
{
	return (dec % 10 + ((dec / 10) << 4));
}

static void MX_I2C2_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000df8:	4b1b      	ldr	r3, [pc, #108]	@ (8000e68 <MX_I2C2_Init+0x74>)
 8000dfa:	4a1c      	ldr	r2, [pc, #112]	@ (8000e6c <MX_I2C2_Init+0x78>)
 8000dfc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = CLOCKSPEED;
 8000dfe:	4b1a      	ldr	r3, [pc, #104]	@ (8000e68 <MX_I2C2_Init+0x74>)
 8000e00:	4a1b      	ldr	r2, [pc, #108]	@ (8000e70 <MX_I2C2_Init+0x7c>)
 8000e02:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e04:	4b18      	ldr	r3, [pc, #96]	@ (8000e68 <MX_I2C2_Init+0x74>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000e0a:	4b17      	ldr	r3, [pc, #92]	@ (8000e68 <MX_I2C2_Init+0x74>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e10:	4b15      	ldr	r3, [pc, #84]	@ (8000e68 <MX_I2C2_Init+0x74>)
 8000e12:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e16:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e18:	4b13      	ldr	r3, [pc, #76]	@ (8000e68 <MX_I2C2_Init+0x74>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000e1e:	4b12      	ldr	r3, [pc, #72]	@ (8000e68 <MX_I2C2_Init+0x74>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e24:	4b10      	ldr	r3, [pc, #64]	@ (8000e68 <MX_I2C2_Init+0x74>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e68 <MX_I2C2_Init+0x74>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000e30:	480d      	ldr	r0, [pc, #52]	@ (8000e68 <MX_I2C2_Init+0x74>)
 8000e32:	f000 fe73 	bl	8001b1c <HAL_I2C_Init>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000e3c:	f7ff fbe0 	bl	8000600 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e40:	2100      	movs	r1, #0
 8000e42:	4809      	ldr	r0, [pc, #36]	@ (8000e68 <MX_I2C2_Init+0x74>)
 8000e44:	f001 fb07 	bl	8002456 <HAL_I2CEx_ConfigAnalogFilter>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000e4e:	f7ff fbd7 	bl	8000600 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000e52:	2100      	movs	r1, #0
 8000e54:	4804      	ldr	r0, [pc, #16]	@ (8000e68 <MX_I2C2_Init+0x74>)
 8000e56:	f001 fb3a 	bl	80024ce <HAL_I2CEx_ConfigDigitalFilter>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000e60:	f7ff fbce 	bl	8000600 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000e64:	bf00      	nop
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20000084 	.word	0x20000084
 8000e6c:	40005800 	.word	0x40005800
 8000e70:	000186a0 	.word	0x000186a0

08000e74 <rtcInit>:
/************************************
 * GLOBAL FUNCTIONS
 ************************************/
void rtcInit()
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
	MX_I2C2_Init();
 8000e78:	f7ff ffbc 	bl	8000df4 <MX_I2C2_Init>
	rtcHaltnt();
 8000e7c:	f000 f802 	bl	8000e84 <rtcHaltnt>
}
 8000e80:	bf00      	nop
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <rtcHaltnt>:
{
	rtcSetRegByte(RTC_SECOND, HALT_BIT);
	rtcHandle.halt = true;
}
void rtcHaltnt()
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
	rtcSetRegByte(RTC_SECOND, 0x00);
 8000e88:	2100      	movs	r1, #0
 8000e8a:	2000      	movs	r0, #0
 8000e8c:	f7ff ff8a 	bl	8000da4 <rtcSetRegByte>
	rtcHandle.halt = false;
 8000e90:	4b02      	ldr	r3, [pc, #8]	@ (8000e9c <rtcHaltnt+0x18>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	715a      	strb	r2, [r3, #5]
}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20000004 	.word	0x20000004

08000ea0 <MX_USART3_UART_Init>:

/************************************
 * STATIC FUNCTIONS
 ************************************/
static void MX_USART3_UART_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  huart3.Instance = USART3;
 8000ea4:	4b11      	ldr	r3, [pc, #68]	@ (8000eec <MX_USART3_UART_Init+0x4c>)
 8000ea6:	4a12      	ldr	r2, [pc, #72]	@ (8000ef0 <MX_USART3_UART_Init+0x50>)
 8000ea8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = BAUDRATE;
 8000eaa:	4b10      	ldr	r3, [pc, #64]	@ (8000eec <MX_USART3_UART_Init+0x4c>)
 8000eac:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000eb0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000eb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000eec <MX_USART3_UART_Init+0x4c>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000eb8:	4b0c      	ldr	r3, [pc, #48]	@ (8000eec <MX_USART3_UART_Init+0x4c>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ebe:	4b0b      	ldr	r3, [pc, #44]	@ (8000eec <MX_USART3_UART_Init+0x4c>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ec4:	4b09      	ldr	r3, [pc, #36]	@ (8000eec <MX_USART3_UART_Init+0x4c>)
 8000ec6:	220c      	movs	r2, #12
 8000ec8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eca:	4b08      	ldr	r3, [pc, #32]	@ (8000eec <MX_USART3_UART_Init+0x4c>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ed0:	4b06      	ldr	r3, [pc, #24]	@ (8000eec <MX_USART3_UART_Init+0x4c>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	61da      	str	r2, [r3, #28]

  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ed6:	4805      	ldr	r0, [pc, #20]	@ (8000eec <MX_USART3_UART_Init+0x4c>)
 8000ed8:	f001 ffd0 	bl	8002e7c <HAL_UART_Init>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000ee2:	f7ff fb8d 	bl	8000600 <Error_Handler>
  }
}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	200000d8 	.word	0x200000d8
 8000ef0:	40004800 	.word	0x40004800

08000ef4 <uartInit>:
/************************************
 * GLOBAL FUNCTIONS
 ************************************/
bool_t uartInit ()
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
	MX_USART3_UART_Init();
 8000ef8:	f7ff ffd2 	bl	8000ea0 <MX_USART3_UART_Init>
	uartSendString(UART_CONFIG_STRING);
 8000efc:	4802      	ldr	r0, [pc, #8]	@ (8000f08 <uartInit+0x14>)
 8000efe:	f000 f805 	bl	8000f0c <uartSendString>
	return true;
 8000f02:	2301      	movs	r3, #1
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	0800378c 	.word	0x0800378c

08000f0c <uartSendString>:
	HAL_UART_MspDeInit(&huart3);
	return true;
}

void uartSendString (uint8_t* pstring)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef uartStatus;
	uint16_t size = 0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	81fb      	strh	r3, [r7, #14]

	if (pstring == NULL)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d105      	bne.n	8000f2a <uartSendString+0x1e>
	{
		Error_Handler();
 8000f1e:	f7ff fb6f 	bl	8000600 <Error_Handler>
	}

	while (pstring[size] != '\0')
 8000f22:	e002      	b.n	8000f2a <uartSendString+0x1e>
	{
		size++;
 8000f24:	89fb      	ldrh	r3, [r7, #14]
 8000f26:	3301      	adds	r3, #1
 8000f28:	81fb      	strh	r3, [r7, #14]
	while (pstring[size] != '\0')
 8000f2a:	89fb      	ldrh	r3, [r7, #14]
 8000f2c:	687a      	ldr	r2, [r7, #4]
 8000f2e:	4413      	add	r3, r2
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d1f6      	bne.n	8000f24 <uartSendString+0x18>
	}

	//TX and Status
	uartStatus = HAL_UART_Transmit(&huart3, pstring, size, HAL_MAX_DELAY);
 8000f36:	89fa      	ldrh	r2, [r7, #14]
 8000f38:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f3c:	6879      	ldr	r1, [r7, #4]
 8000f3e:	4807      	ldr	r0, [pc, #28]	@ (8000f5c <uartSendString+0x50>)
 8000f40:	f001 ffec 	bl	8002f1c <HAL_UART_Transmit>
 8000f44:	4603      	mov	r3, r0
 8000f46:	737b      	strb	r3, [r7, #13]
	if (uartStatus != HAL_OK)
 8000f48:	7b7b      	ldrb	r3, [r7, #13]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <uartSendString+0x46>
	{
		Error_Handler();
 8000f4e:	f7ff fb57 	bl	8000600 <Error_Handler>
	}
}
 8000f52:	bf00      	nop
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	200000d8 	.word	0x200000d8

08000f60 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08c      	sub	sp, #48	@ 0x30
 8000f64:	af00      	add	r7, sp, #0
 GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f66:	f107 031c 	add.w	r3, r7, #28
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	605a      	str	r2, [r3, #4]
 8000f70:	609a      	str	r2, [r3, #8]
 8000f72:	60da      	str	r2, [r3, #12]
 8000f74:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

 /* GPIO Ports Clock Enable */
 __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	61bb      	str	r3, [r7, #24]
 8000f7a:	4b7c      	ldr	r3, [pc, #496]	@ (800116c <MX_GPIO_Init+0x20c>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7e:	4a7b      	ldr	r2, [pc, #492]	@ (800116c <MX_GPIO_Init+0x20c>)
 8000f80:	f043 0304 	orr.w	r3, r3, #4
 8000f84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f86:	4b79      	ldr	r3, [pc, #484]	@ (800116c <MX_GPIO_Init+0x20c>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8a:	f003 0304 	and.w	r3, r3, #4
 8000f8e:	61bb      	str	r3, [r7, #24]
 8000f90:	69bb      	ldr	r3, [r7, #24]
 __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	617b      	str	r3, [r7, #20]
 8000f96:	4b75      	ldr	r3, [pc, #468]	@ (800116c <MX_GPIO_Init+0x20c>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9a:	4a74      	ldr	r2, [pc, #464]	@ (800116c <MX_GPIO_Init+0x20c>)
 8000f9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fa2:	4b72      	ldr	r3, [pc, #456]	@ (800116c <MX_GPIO_Init+0x20c>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000faa:	617b      	str	r3, [r7, #20]
 8000fac:	697b      	ldr	r3, [r7, #20]
 __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	613b      	str	r3, [r7, #16]
 8000fb2:	4b6e      	ldr	r3, [pc, #440]	@ (800116c <MX_GPIO_Init+0x20c>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb6:	4a6d      	ldr	r2, [pc, #436]	@ (800116c <MX_GPIO_Init+0x20c>)
 8000fb8:	f043 0301 	orr.w	r3, r3, #1
 8000fbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fbe:	4b6b      	ldr	r3, [pc, #428]	@ (800116c <MX_GPIO_Init+0x20c>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	613b      	str	r3, [r7, #16]
 8000fc8:	693b      	ldr	r3, [r7, #16]
 __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60fb      	str	r3, [r7, #12]
 8000fce:	4b67      	ldr	r3, [pc, #412]	@ (800116c <MX_GPIO_Init+0x20c>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd2:	4a66      	ldr	r2, [pc, #408]	@ (800116c <MX_GPIO_Init+0x20c>)
 8000fd4:	f043 0302 	orr.w	r3, r3, #2
 8000fd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fda:	4b64      	ldr	r3, [pc, #400]	@ (800116c <MX_GPIO_Init+0x20c>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fde:	f003 0302 	and.w	r3, r3, #2
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60bb      	str	r3, [r7, #8]
 8000fea:	4b60      	ldr	r3, [pc, #384]	@ (800116c <MX_GPIO_Init+0x20c>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fee:	4a5f      	ldr	r2, [pc, #380]	@ (800116c <MX_GPIO_Init+0x20c>)
 8000ff0:	f043 0308 	orr.w	r3, r3, #8
 8000ff4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ff6:	4b5d      	ldr	r3, [pc, #372]	@ (800116c <MX_GPIO_Init+0x20c>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffa:	f003 0308 	and.w	r3, r3, #8
 8000ffe:	60bb      	str	r3, [r7, #8]
 8001000:	68bb      	ldr	r3, [r7, #8]
 __HAL_RCC_GPIOG_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	607b      	str	r3, [r7, #4]
 8001006:	4b59      	ldr	r3, [pc, #356]	@ (800116c <MX_GPIO_Init+0x20c>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100a:	4a58      	ldr	r2, [pc, #352]	@ (800116c <MX_GPIO_Init+0x20c>)
 800100c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001010:	6313      	str	r3, [r2, #48]	@ 0x30
 8001012:	4b56      	ldr	r3, [pc, #344]	@ (800116c <MX_GPIO_Init+0x20c>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001016:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800101a:	607b      	str	r3, [r7, #4]
 800101c:	687b      	ldr	r3, [r7, #4]

 /*Configure GPIO pin Output Level */
 HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 800101e:	2200      	movs	r2, #0
 8001020:	f244 0181 	movw	r1, #16513	@ 0x4081
 8001024:	4852      	ldr	r0, [pc, #328]	@ (8001170 <MX_GPIO_Init+0x210>)
 8001026:	f000 fd5f 	bl	8001ae8 <HAL_GPIO_WritePin>

 /*Configure GPIO pin Output Level */
 HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 800102a:	2200      	movs	r2, #0
 800102c:	2140      	movs	r1, #64	@ 0x40
 800102e:	4851      	ldr	r0, [pc, #324]	@ (8001174 <MX_GPIO_Init+0x214>)
 8001030:	f000 fd5a 	bl	8001ae8 <HAL_GPIO_WritePin>

 /*Configure GPIO pin : USER_BUTTON_Pin */
 GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8001034:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001038:	61fb      	str	r3, [r7, #28]
 GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800103a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800103e:	623b      	str	r3, [r7, #32]
 GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	627b      	str	r3, [r7, #36]	@ 0x24
 HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001044:	f107 031c 	add.w	r3, r7, #28
 8001048:	4619      	mov	r1, r3
 800104a:	484b      	ldr	r0, [pc, #300]	@ (8001178 <MX_GPIO_Init+0x218>)
 800104c:	f000 fb88 	bl	8001760 <HAL_GPIO_Init>

 /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
 GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001050:	2332      	movs	r3, #50	@ 0x32
 8001052:	61fb      	str	r3, [r7, #28]
 GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001054:	2302      	movs	r3, #2
 8001056:	623b      	str	r3, [r7, #32]
 GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	627b      	str	r3, [r7, #36]	@ 0x24
 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800105c:	2303      	movs	r3, #3
 800105e:	62bb      	str	r3, [r7, #40]	@ 0x28
 GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001060:	230b      	movs	r3, #11
 8001062:	62fb      	str	r3, [r7, #44]	@ 0x2c
 HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001064:	f107 031c 	add.w	r3, r7, #28
 8001068:	4619      	mov	r1, r3
 800106a:	4843      	ldr	r0, [pc, #268]	@ (8001178 <MX_GPIO_Init+0x218>)
 800106c:	f000 fb78 	bl	8001760 <HAL_GPIO_Init>

 /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
 GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001070:	2386      	movs	r3, #134	@ 0x86
 8001072:	61fb      	str	r3, [r7, #28]
 GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001074:	2302      	movs	r3, #2
 8001076:	623b      	str	r3, [r7, #32]
 GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	627b      	str	r3, [r7, #36]	@ 0x24
 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107c:	2303      	movs	r3, #3
 800107e:	62bb      	str	r3, [r7, #40]	@ 0x28
 GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001080:	230b      	movs	r3, #11
 8001082:	62fb      	str	r3, [r7, #44]	@ 0x2c
 HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001084:	f107 031c 	add.w	r3, r7, #28
 8001088:	4619      	mov	r1, r3
 800108a:	483c      	ldr	r0, [pc, #240]	@ (800117c <MX_GPIO_Init+0x21c>)
 800108c:	f000 fb68 	bl	8001760 <HAL_GPIO_Init>

 /*Configure GPIO pins : LED1_Pin LED3_Pin LED2_Pin */
 GPIO_InitStruct.Pin = LED1_Pin|LED3_Pin|LED2_Pin;
 8001090:	f244 0381 	movw	r3, #16513	@ 0x4081
 8001094:	61fb      	str	r3, [r7, #28]
 GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001096:	2301      	movs	r3, #1
 8001098:	623b      	str	r3, [r7, #32]
 GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	627b      	str	r3, [r7, #36]	@ 0x24
 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109e:	2300      	movs	r3, #0
 80010a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a2:	f107 031c 	add.w	r3, r7, #28
 80010a6:	4619      	mov	r1, r3
 80010a8:	4831      	ldr	r0, [pc, #196]	@ (8001170 <MX_GPIO_Init+0x210>)
 80010aa:	f000 fb59 	bl	8001760 <HAL_GPIO_Init>

 /*Configure GPIO pin : RMII_TXD1_Pin */
 GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80010ae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010b2:	61fb      	str	r3, [r7, #28]
 GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b4:	2302      	movs	r3, #2
 80010b6:	623b      	str	r3, [r7, #32]
 GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	627b      	str	r3, [r7, #36]	@ 0x24
 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010bc:	2303      	movs	r3, #3
 80010be:	62bb      	str	r3, [r7, #40]	@ 0x28
 GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010c0:	230b      	movs	r3, #11
 80010c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80010c4:	f107 031c 	add.w	r3, r7, #28
 80010c8:	4619      	mov	r1, r3
 80010ca:	4829      	ldr	r0, [pc, #164]	@ (8001170 <MX_GPIO_Init+0x210>)
 80010cc:	f000 fb48 	bl	8001760 <HAL_GPIO_Init>

 /*Configure GPIO pin : PG6 */
 GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010d0:	2340      	movs	r3, #64	@ 0x40
 80010d2:	61fb      	str	r3, [r7, #28]
 GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d4:	2301      	movs	r3, #1
 80010d6:	623b      	str	r3, [r7, #32]
 GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	627b      	str	r3, [r7, #36]	@ 0x24
 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010dc:	2300      	movs	r3, #0
 80010de:	62bb      	str	r3, [r7, #40]	@ 0x28
 HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010e0:	f107 031c 	add.w	r3, r7, #28
 80010e4:	4619      	mov	r1, r3
 80010e6:	4823      	ldr	r0, [pc, #140]	@ (8001174 <MX_GPIO_Init+0x214>)
 80010e8:	f000 fb3a 	bl	8001760 <HAL_GPIO_Init>

 /*Configure GPIO pin : USB_OverCurrent_Pin */
 GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80010ec:	2380      	movs	r3, #128	@ 0x80
 80010ee:	61fb      	str	r3, [r7, #28]
 GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010f0:	2300      	movs	r3, #0
 80010f2:	623b      	str	r3, [r7, #32]
 GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	627b      	str	r3, [r7, #36]	@ 0x24
 HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80010f8:	f107 031c 	add.w	r3, r7, #28
 80010fc:	4619      	mov	r1, r3
 80010fe:	481d      	ldr	r0, [pc, #116]	@ (8001174 <MX_GPIO_Init+0x214>)
 8001100:	f000 fb2e 	bl	8001760 <HAL_GPIO_Init>

 /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
 GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001104:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001108:	61fb      	str	r3, [r7, #28]
 GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110a:	2302      	movs	r3, #2
 800110c:	623b      	str	r3, [r7, #32]
 GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	627b      	str	r3, [r7, #36]	@ 0x24
 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001112:	2303      	movs	r3, #3
 8001114:	62bb      	str	r3, [r7, #40]	@ 0x28
 GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001116:	230a      	movs	r3, #10
 8001118:	62fb      	str	r3, [r7, #44]	@ 0x2c
 HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111a:	f107 031c 	add.w	r3, r7, #28
 800111e:	4619      	mov	r1, r3
 8001120:	4816      	ldr	r0, [pc, #88]	@ (800117c <MX_GPIO_Init+0x21c>)
 8001122:	f000 fb1d 	bl	8001760 <HAL_GPIO_Init>

 /*Configure GPIO pin : USB_VBUS_Pin */
 GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001126:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800112a:	61fb      	str	r3, [r7, #28]
 GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800112c:	2300      	movs	r3, #0
 800112e:	623b      	str	r3, [r7, #32]
 GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	627b      	str	r3, [r7, #36]	@ 0x24
 HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001134:	f107 031c 	add.w	r3, r7, #28
 8001138:	4619      	mov	r1, r3
 800113a:	4810      	ldr	r0, [pc, #64]	@ (800117c <MX_GPIO_Init+0x21c>)
 800113c:	f000 fb10 	bl	8001760 <HAL_GPIO_Init>

 /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
 GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001140:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001144:	61fb      	str	r3, [r7, #28]
 GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001146:	2302      	movs	r3, #2
 8001148:	623b      	str	r3, [r7, #32]
 GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	627b      	str	r3, [r7, #36]	@ 0x24
 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800114e:	2303      	movs	r3, #3
 8001150:	62bb      	str	r3, [r7, #40]	@ 0x28
 GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001152:	230b      	movs	r3, #11
 8001154:	62fb      	str	r3, [r7, #44]	@ 0x2c
 HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001156:	f107 031c 	add.w	r3, r7, #28
 800115a:	4619      	mov	r1, r3
 800115c:	4805      	ldr	r0, [pc, #20]	@ (8001174 <MX_GPIO_Init+0x214>)
 800115e:	f000 faff 	bl	8001760 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001162:	bf00      	nop
 8001164:	3730      	adds	r7, #48	@ 0x30
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40023800 	.word	0x40023800
 8001170:	40020400 	.word	0x40020400
 8001174:	40021800 	.word	0x40021800
 8001178:	40020800 	.word	0x40020800
 800117c:	40020000 	.word	0x40020000

08001180 <delayRead>:

static void delayRead (delay_t* delay)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
	delay->elapsedTime = HAL_GetTick() - delay->startTime;
 8001188:	f000 f9d4 	bl	8001534 <HAL_GetTick>
 800118c:	4602      	mov	r2, r0
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	1ad2      	subs	r2, r2, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	605a      	str	r2, [r3, #4]
	delay->running = (delay->elapsedTime <= delay->duration);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	685a      	ldr	r2, [r3, #4]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	bf94      	ite	ls
 80011a4:	2301      	movls	r3, #1
 80011a6:	2300      	movhi	r3, #0
 80011a8:	b2da      	uxtb	r2, r3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	731a      	strb	r2, [r3, #12]
}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
	...

080011b8 <buttonInit>:
/************************************
 * BUTTON GLOBAL FUNCTIONS
 ************************************/
void buttonInit ()
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
	MX_GPIO_Init();
 80011bc:	f7ff fed0 	bl	8000f60 <MX_GPIO_Init>
	userButton.State = BUTTON_UP;
 80011c0:	4b07      	ldr	r3, [pc, #28]	@ (80011e0 <buttonInit+0x28>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	701a      	strb	r2, [r3, #0]
	userButton.isPressed = NOT_PRESSED;
 80011c6:	4b06      	ldr	r3, [pc, #24]	@ (80011e0 <buttonInit+0x28>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	751a      	strb	r2, [r3, #20]
	delayInit(&userButton.debounceDelay);
 80011cc:	4805      	ldr	r0, [pc, #20]	@ (80011e4 <buttonInit+0x2c>)
 80011ce:	f000 f88f 	bl	80012f0 <delayInit>
	delayWrite(&userButton.debounceDelay, DEBOUNCE);
 80011d2:	2164      	movs	r1, #100	@ 0x64
 80011d4:	4803      	ldr	r0, [pc, #12]	@ (80011e4 <buttonInit+0x2c>)
 80011d6:	f000 f8b8 	bl	800134a <delayWrite>
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20000120 	.word	0x20000120
 80011e4:	20000124 	.word	0x20000124

080011e8 <buttonFSM>:

void buttonFSM()
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
	switch (userButton.State)
 80011ec:	4b3b      	ldr	r3, [pc, #236]	@ (80012dc <buttonFSM+0xf4>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	2b03      	cmp	r3, #3
 80011f2:	d867      	bhi.n	80012c4 <buttonFSM+0xdc>
 80011f4:	a201      	add	r2, pc, #4	@ (adr r2, 80011fc <buttonFSM+0x14>)
 80011f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011fa:	bf00      	nop
 80011fc:	0800120d 	.word	0x0800120d
 8001200:	0800125b 	.word	0x0800125b
 8001204:	08001231 	.word	0x08001231
 8001208:	0800128d 	.word	0x0800128d
	{

	case BUTTON_UP:

		userButton.isPressed = NOT_PRESSED;
 800120c:	4b33      	ldr	r3, [pc, #204]	@ (80012dc <buttonFSM+0xf4>)
 800120e:	2200      	movs	r2, #0
 8001210:	751a      	strb	r2, [r3, #20]
		if (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin))
 8001212:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001216:	4832      	ldr	r0, [pc, #200]	@ (80012e0 <buttonFSM+0xf8>)
 8001218:	f000 fc4e 	bl	8001ab8 <HAL_GPIO_ReadPin>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d053      	beq.n	80012ca <buttonFSM+0xe2>
		{
			userButton.State = BUTTON_FALLING;
 8001222:	4b2e      	ldr	r3, [pc, #184]	@ (80012dc <buttonFSM+0xf4>)
 8001224:	2201      	movs	r2, #1
 8001226:	701a      	strb	r2, [r3, #0]
			delayStart(&userButton.debounceDelay);
 8001228:	482e      	ldr	r0, [pc, #184]	@ (80012e4 <buttonFSM+0xfc>)
 800122a:	f000 f877 	bl	800131c <delayStart>
		}
		break;
 800122e:	e04c      	b.n	80012ca <buttonFSM+0xe2>

	case BUTTON_DOWN:

		userButton.isPressed = PRESSED;
 8001230:	4b2a      	ldr	r3, [pc, #168]	@ (80012dc <buttonFSM+0xf4>)
 8001232:	2201      	movs	r2, #1
 8001234:	751a      	strb	r2, [r3, #20]
		if (!HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin))
 8001236:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800123a:	4829      	ldr	r0, [pc, #164]	@ (80012e0 <buttonFSM+0xf8>)
 800123c:	f000 fc3c 	bl	8001ab8 <HAL_GPIO_ReadPin>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d143      	bne.n	80012ce <buttonFSM+0xe6>
		{
			userButton.State = BUTTON_RISING;
 8001246:	4b25      	ldr	r3, [pc, #148]	@ (80012dc <buttonFSM+0xf4>)
 8001248:	2203      	movs	r2, #3
 800124a:	701a      	strb	r2, [r3, #0]
			delayStart(&userButton.debounceDelay);
 800124c:	4825      	ldr	r0, [pc, #148]	@ (80012e4 <buttonFSM+0xfc>)
 800124e:	f000 f865 	bl	800131c <delayStart>
			lcdPrintString("holi");
 8001252:	4825      	ldr	r0, [pc, #148]	@ (80012e8 <buttonFSM+0x100>)
 8001254:	f7ff fd01 	bl	8000c5a <lcdPrintString>
		}
		break;
 8001258:	e039      	b.n	80012ce <buttonFSM+0xe6>

	case BUTTON_FALLING:

		if (!delayIsRunning(&userButton.debounceDelay))
 800125a:	4822      	ldr	r0, [pc, #136]	@ (80012e4 <buttonFSM+0xfc>)
 800125c:	f000 f883 	bl	8001366 <delayIsRunning>
 8001260:	4603      	mov	r3, r0
 8001262:	f083 0301 	eor.w	r3, r3, #1
 8001266:	b2db      	uxtb	r3, r3
 8001268:	2b00      	cmp	r3, #0
 800126a:	d032      	beq.n	80012d2 <buttonFSM+0xea>
		{
			if (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin))
 800126c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001270:	481b      	ldr	r0, [pc, #108]	@ (80012e0 <buttonFSM+0xf8>)
 8001272:	f000 fc21 	bl	8001ab8 <HAL_GPIO_ReadPin>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d003      	beq.n	8001284 <buttonFSM+0x9c>
			{
				userButton.State = BUTTON_DOWN;
 800127c:	4b17      	ldr	r3, [pc, #92]	@ (80012dc <buttonFSM+0xf4>)
 800127e:	2202      	movs	r2, #2
 8001280:	701a      	strb	r2, [r3, #0]
				break;
 8001282:	e029      	b.n	80012d8 <buttonFSM+0xf0>
			} else
			{
				userButton.State = BUTTON_UP;
 8001284:	4b15      	ldr	r3, [pc, #84]	@ (80012dc <buttonFSM+0xf4>)
 8001286:	2200      	movs	r2, #0
 8001288:	701a      	strb	r2, [r3, #0]
				break;
 800128a:	e025      	b.n	80012d8 <buttonFSM+0xf0>
		}
		break;

	case BUTTON_RISING:

		if (!delayIsRunning(&userButton.debounceDelay))
 800128c:	4815      	ldr	r0, [pc, #84]	@ (80012e4 <buttonFSM+0xfc>)
 800128e:	f000 f86a 	bl	8001366 <delayIsRunning>
 8001292:	4603      	mov	r3, r0
 8001294:	f083 0301 	eor.w	r3, r3, #1
 8001298:	b2db      	uxtb	r3, r3
 800129a:	2b00      	cmp	r3, #0
 800129c:	d01b      	beq.n	80012d6 <buttonFSM+0xee>
		{
			if (!HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin))
 800129e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80012a2:	480f      	ldr	r0, [pc, #60]	@ (80012e0 <buttonFSM+0xf8>)
 80012a4:	f000 fc08 	bl	8001ab8 <HAL_GPIO_ReadPin>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d106      	bne.n	80012bc <buttonFSM+0xd4>
			{
				uartSendString((uint8_t*)"hola");
 80012ae:	480f      	ldr	r0, [pc, #60]	@ (80012ec <buttonFSM+0x104>)
 80012b0:	f7ff fe2c 	bl	8000f0c <uartSendString>
				userButton.State = BUTTON_UP;
 80012b4:	4b09      	ldr	r3, [pc, #36]	@ (80012dc <buttonFSM+0xf4>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	701a      	strb	r2, [r3, #0]
				break;
 80012ba:	e00d      	b.n	80012d8 <buttonFSM+0xf0>
			} else
			{
				userButton.State = BUTTON_DOWN;
 80012bc:	4b07      	ldr	r3, [pc, #28]	@ (80012dc <buttonFSM+0xf4>)
 80012be:	2202      	movs	r2, #2
 80012c0:	701a      	strb	r2, [r3, #0]
				break;
 80012c2:	e009      	b.n	80012d8 <buttonFSM+0xf0>
			}
		}
		break;
	default:
		Error_Handler();
 80012c4:	f7ff f99c 	bl	8000600 <Error_Handler>
	}
}
 80012c8:	e006      	b.n	80012d8 <buttonFSM+0xf0>
		break;
 80012ca:	bf00      	nop
 80012cc:	e004      	b.n	80012d8 <buttonFSM+0xf0>
		break;
 80012ce:	bf00      	nop
 80012d0:	e002      	b.n	80012d8 <buttonFSM+0xf0>
		break;
 80012d2:	bf00      	nop
 80012d4:	e000      	b.n	80012d8 <buttonFSM+0xf0>
		break;
 80012d6:	bf00      	nop
}
 80012d8:	bf00      	nop
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	20000120 	.word	0x20000120
 80012e0:	40020800 	.word	0x40020800
 80012e4:	20000124 	.word	0x20000124
 80012e8:	080037b0 	.word	0x080037b0
 80012ec:	080037b8 	.word	0x080037b8

080012f0 <delayInit>:
}
/************************************
 * DELAY GLOBAL FUNCTIONS
 ************************************/
void delayInit (delay_t* delay)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
	delay->duration = NO_DURATION;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2200      	movs	r2, #0
 80012fc:	609a      	str	r2, [r3, #8]
	delay->startTime = HAL_GetTick();
 80012fe:	f000 f919 	bl	8001534 <HAL_GetTick>
 8001302:	4602      	mov	r2, r0
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	601a      	str	r2, [r3, #0]
	delay->elapsedTime = NO_DURATION;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2200      	movs	r2, #0
 800130c:	605a      	str	r2, [r3, #4]
	delay->running = NOT_RUNNING;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2200      	movs	r2, #0
 8001312:	731a      	strb	r2, [r3, #12]
}
 8001314:	bf00      	nop
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <delayStart>:

void delayStart (delay_t* delay)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
	if (!(delay->running))
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	7b1b      	ldrb	r3, [r3, #12]
 8001328:	f083 0301 	eor.w	r3, r3, #1
 800132c:	b2db      	uxtb	r3, r3
 800132e:	2b00      	cmp	r3, #0
 8001330:	d007      	beq.n	8001342 <delayStart+0x26>
	{
		delay->startTime = HAL_GetTick();
 8001332:	f000 f8ff 	bl	8001534 <HAL_GetTick>
 8001336:	4602      	mov	r2, r0
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	601a      	str	r2, [r3, #0]
		delay->running = RUNNING;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2201      	movs	r2, #1
 8001340:	731a      	strb	r2, [r3, #12]
	}
}
 8001342:	bf00      	nop
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <delayWrite>:

void delayWrite (delay_t* delay, tick_t duration)
{
 800134a:	b480      	push	{r7}
 800134c:	b083      	sub	sp, #12
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
 8001352:	6039      	str	r1, [r7, #0]
	delay->duration = duration;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	683a      	ldr	r2, [r7, #0]
 8001358:	609a      	str	r2, [r3, #8]
}
 800135a:	bf00      	nop
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr

08001366 <delayIsRunning>:

bool_t delayIsRunning (delay_t* delay)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	b082      	sub	sp, #8
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
	delayRead(delay);
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f7ff ff06 	bl	8001180 <delayRead>
	return delay->running;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	7b1b      	ldrb	r3, [r3, #12]
}
 8001378:	4618      	mov	r0, r3
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <updateData>:

/************************************
 * STATIC FUNCTIONS
 ************************************/
static void updateData()
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0

}
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
	...

08001390 <displayFSMInit>:
/************************************
 * GLOBAL FUNCTIONS
 ************************************/

void displayFSMInit()
{
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
	currentData.currentState = DISPLAY_DATA;
 8001396:	4b20      	ldr	r3, [pc, #128]	@ (8001418 <displayFSMInit+0x88>)
 8001398:	2200      	movs	r2, #0
 800139a:	701a      	strb	r2, [r3, #0]
	currentData.currentDateTime.dayOfMonth = 16;
 800139c:	4b1e      	ldr	r3, [pc, #120]	@ (8001418 <displayFSMInit+0x88>)
 800139e:	2210      	movs	r2, #16
 80013a0:	719a      	strb	r2, [r3, #6]
	currentData.currentDateTime.month = 11;
 80013a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001418 <displayFSMInit+0x88>)
 80013a4:	220b      	movs	r2, #11
 80013a6:	71da      	strb	r2, [r3, #7]
	currentData.currentDateTime.year = 1995;
 80013a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001418 <displayFSMInit+0x88>)
 80013aa:	f240 72cb 	movw	r2, #1995	@ 0x7cb
 80013ae:	811a      	strh	r2, [r3, #8]
	currentData.highFlanksCount = 0;
 80013b0:	4b19      	ldr	r3, [pc, #100]	@ (8001418 <displayFSMInit+0x88>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	739a      	strb	r2, [r3, #14]
	currentData.lowFlanksCount = 0;
 80013b6:	4b18      	ldr	r3, [pc, #96]	@ (8001418 <displayFSMInit+0x88>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	73da      	strb	r2, [r3, #15]
	DELAY_MS(1000);
 80013bc:	2300      	movs	r3, #0
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	e01f      	b.n	8001402 <displayFSMInit+0x72>
 80013c2:	4b16      	ldr	r3, [pc, #88]	@ (800141c <displayFSMInit+0x8c>)
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	60bb      	str	r3, [r7, #8]
 80013c8:	4b15      	ldr	r3, [pc, #84]	@ (8001420 <displayFSMInit+0x90>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a15      	ldr	r2, [pc, #84]	@ (8001424 <displayFSMInit+0x94>)
 80013ce:	fba2 2303 	umull	r2, r3, r2, r3
 80013d2:	0c9b      	lsrs	r3, r3, #18
 80013d4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80013d8:	fb03 f202 	mul.w	r2, r3, r2
 80013dc:	4b10      	ldr	r3, [pc, #64]	@ (8001420 <displayFSMInit+0x90>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4910      	ldr	r1, [pc, #64]	@ (8001424 <displayFSMInit+0x94>)
 80013e2:	fba1 1303 	umull	r1, r3, r1, r3
 80013e6:	0c9b      	lsrs	r3, r3, #18
 80013e8:	085b      	lsrs	r3, r3, #1
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	607b      	str	r3, [r7, #4]
 80013ee:	4b0b      	ldr	r3, [pc, #44]	@ (800141c <displayFSMInit+0x8c>)
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	68ba      	ldr	r2, [r7, #8]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d8f8      	bhi.n	80013ee <displayFSMInit+0x5e>
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	3301      	adds	r3, #1
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001408:	d3db      	bcc.n	80013c2 <displayFSMInit+0x32>
}
 800140a:	bf00      	nop
 800140c:	bf00      	nop
 800140e:	3714      	adds	r7, #20
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr
 8001418:	20000138 	.word	0x20000138
 800141c:	e000e010 	.word	0xe000e010
 8001420:	20000000 	.word	0x20000000
 8001424:	431bde83 	.word	0x431bde83

08001428 <displayFSM>:
void displayFSM()
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
	static uint8_t n = 9;
	static uint8_t* s = "Nov";
	updateData();
 800142c:	f7ff ffa8 	bl	8001380 <updateData>
	switch (currentData.currentState)
 8001430:	4b0a      	ldr	r3, [pc, #40]	@ (800145c <displayFSM+0x34>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d002      	beq.n	800143e <displayFSM+0x16>
 8001438:	2b01      	cmp	r3, #1
 800143a:	d00b      	beq.n	8001454 <displayFSM+0x2c>
 800143c:	e006      	b.n	800144c <displayFSM+0x24>
	{
	case DISPLAY_DATA:
		static uint8_t i=0;
		//lcdSetCursor(i%ROWS, 0);
		//lcdPrintfCenteredString(displayBuffer[i], ' ', n, s);
		i++;
 800143e:	4b08      	ldr	r3, [pc, #32]	@ (8001460 <displayFSM+0x38>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	3301      	adds	r3, #1
 8001444:	b2da      	uxtb	r2, r3
 8001446:	4b06      	ldr	r3, [pc, #24]	@ (8001460 <displayFSM+0x38>)
 8001448:	701a      	strb	r2, [r3, #0]
		break;
 800144a:	e004      	b.n	8001456 <displayFSM+0x2e>
	case DISPLAY_CONFIG:
		break;
	default:
		uartSendString((uint8_t*)"error displayFSM");
 800144c:	4805      	ldr	r0, [pc, #20]	@ (8001464 <displayFSM+0x3c>)
 800144e:	f7ff fd5d 	bl	8000f0c <uartSendString>
		break;
 8001452:	e000      	b.n	8001456 <displayFSM+0x2e>
		break;
 8001454:	bf00      	nop
	}
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	20000138 	.word	0x20000138
 8001460:	20000152 	.word	0x20000152
 8001464:	080037c0 	.word	0x080037c0

08001468 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800146c:	4b0e      	ldr	r3, [pc, #56]	@ (80014a8 <HAL_Init+0x40>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a0d      	ldr	r2, [pc, #52]	@ (80014a8 <HAL_Init+0x40>)
 8001472:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001476:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001478:	4b0b      	ldr	r3, [pc, #44]	@ (80014a8 <HAL_Init+0x40>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a0a      	ldr	r2, [pc, #40]	@ (80014a8 <HAL_Init+0x40>)
 800147e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001482:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001484:	4b08      	ldr	r3, [pc, #32]	@ (80014a8 <HAL_Init+0x40>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a07      	ldr	r2, [pc, #28]	@ (80014a8 <HAL_Init+0x40>)
 800148a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800148e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001490:	2003      	movs	r0, #3
 8001492:	f000 f931 	bl	80016f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001496:	2000      	movs	r0, #0
 8001498:	f000 f808 	bl	80014ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800149c:	f7ff f8bc 	bl	8000618 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40023c00 	.word	0x40023c00

080014ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014b4:	4b12      	ldr	r3, [pc, #72]	@ (8001500 <HAL_InitTick+0x54>)
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	4b12      	ldr	r3, [pc, #72]	@ (8001504 <HAL_InitTick+0x58>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	4619      	mov	r1, r3
 80014be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ca:	4618      	mov	r0, r3
 80014cc:	f000 f93b 	bl	8001746 <HAL_SYSTICK_Config>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e00e      	b.n	80014f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2b0f      	cmp	r3, #15
 80014de:	d80a      	bhi.n	80014f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014e0:	2200      	movs	r2, #0
 80014e2:	6879      	ldr	r1, [r7, #4]
 80014e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80014e8:	f000 f911 	bl	800170e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014ec:	4a06      	ldr	r2, [pc, #24]	@ (8001508 <HAL_InitTick+0x5c>)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014f2:	2300      	movs	r3, #0
 80014f4:	e000      	b.n	80014f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	20000000 	.word	0x20000000
 8001504:	20000010 	.word	0x20000010
 8001508:	2000000c 	.word	0x2000000c

0800150c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001510:	4b06      	ldr	r3, [pc, #24]	@ (800152c <HAL_IncTick+0x20>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	461a      	mov	r2, r3
 8001516:	4b06      	ldr	r3, [pc, #24]	@ (8001530 <HAL_IncTick+0x24>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4413      	add	r3, r2
 800151c:	4a04      	ldr	r2, [pc, #16]	@ (8001530 <HAL_IncTick+0x24>)
 800151e:	6013      	str	r3, [r2, #0]
}
 8001520:	bf00      	nop
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	20000010 	.word	0x20000010
 8001530:	20000154 	.word	0x20000154

08001534 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  return uwTick;
 8001538:	4b03      	ldr	r3, [pc, #12]	@ (8001548 <HAL_GetTick+0x14>)
 800153a:	681b      	ldr	r3, [r3, #0]
}
 800153c:	4618      	mov	r0, r3
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	20000154 	.word	0x20000154

0800154c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001554:	f7ff ffee 	bl	8001534 <HAL_GetTick>
 8001558:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001564:	d005      	beq.n	8001572 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001566:	4b0a      	ldr	r3, [pc, #40]	@ (8001590 <HAL_Delay+0x44>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	461a      	mov	r2, r3
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	4413      	add	r3, r2
 8001570:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001572:	bf00      	nop
 8001574:	f7ff ffde 	bl	8001534 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	68fa      	ldr	r2, [r7, #12]
 8001580:	429a      	cmp	r2, r3
 8001582:	d8f7      	bhi.n	8001574 <HAL_Delay+0x28>
  {
  }
}
 8001584:	bf00      	nop
 8001586:	bf00      	nop
 8001588:	3710      	adds	r7, #16
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	20000010 	.word	0x20000010

08001594 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f003 0307 	and.w	r3, r3, #7
 80015a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015a4:	4b0c      	ldr	r3, [pc, #48]	@ (80015d8 <__NVIC_SetPriorityGrouping+0x44>)
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015aa:	68ba      	ldr	r2, [r7, #8]
 80015ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015b0:	4013      	ands	r3, r2
 80015b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015c6:	4a04      	ldr	r2, [pc, #16]	@ (80015d8 <__NVIC_SetPriorityGrouping+0x44>)
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	60d3      	str	r3, [r2, #12]
}
 80015cc:	bf00      	nop
 80015ce:	3714      	adds	r7, #20
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	e000ed00 	.word	0xe000ed00

080015dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015e0:	4b04      	ldr	r3, [pc, #16]	@ (80015f4 <__NVIC_GetPriorityGrouping+0x18>)
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	0a1b      	lsrs	r3, r3, #8
 80015e6:	f003 0307 	and.w	r3, r3, #7
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr
 80015f4:	e000ed00 	.word	0xe000ed00

080015f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	6039      	str	r1, [r7, #0]
 8001602:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001608:	2b00      	cmp	r3, #0
 800160a:	db0a      	blt.n	8001622 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	b2da      	uxtb	r2, r3
 8001610:	490c      	ldr	r1, [pc, #48]	@ (8001644 <__NVIC_SetPriority+0x4c>)
 8001612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001616:	0112      	lsls	r2, r2, #4
 8001618:	b2d2      	uxtb	r2, r2
 800161a:	440b      	add	r3, r1
 800161c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001620:	e00a      	b.n	8001638 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	b2da      	uxtb	r2, r3
 8001626:	4908      	ldr	r1, [pc, #32]	@ (8001648 <__NVIC_SetPriority+0x50>)
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	f003 030f 	and.w	r3, r3, #15
 800162e:	3b04      	subs	r3, #4
 8001630:	0112      	lsls	r2, r2, #4
 8001632:	b2d2      	uxtb	r2, r2
 8001634:	440b      	add	r3, r1
 8001636:	761a      	strb	r2, [r3, #24]
}
 8001638:	bf00      	nop
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	e000e100 	.word	0xe000e100
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800164c:	b480      	push	{r7}
 800164e:	b089      	sub	sp, #36	@ 0x24
 8001650:	af00      	add	r7, sp, #0
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	60b9      	str	r1, [r7, #8]
 8001656:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f003 0307 	and.w	r3, r3, #7
 800165e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	f1c3 0307 	rsb	r3, r3, #7
 8001666:	2b04      	cmp	r3, #4
 8001668:	bf28      	it	cs
 800166a:	2304      	movcs	r3, #4
 800166c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	3304      	adds	r3, #4
 8001672:	2b06      	cmp	r3, #6
 8001674:	d902      	bls.n	800167c <NVIC_EncodePriority+0x30>
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	3b03      	subs	r3, #3
 800167a:	e000      	b.n	800167e <NVIC_EncodePriority+0x32>
 800167c:	2300      	movs	r3, #0
 800167e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001680:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	43da      	mvns	r2, r3
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	401a      	ands	r2, r3
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001694:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	fa01 f303 	lsl.w	r3, r1, r3
 800169e:	43d9      	mvns	r1, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a4:	4313      	orrs	r3, r2
         );
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3724      	adds	r7, #36	@ 0x24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
	...

080016b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	3b01      	subs	r3, #1
 80016c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016c4:	d301      	bcc.n	80016ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016c6:	2301      	movs	r3, #1
 80016c8:	e00f      	b.n	80016ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ca:	4a0a      	ldr	r2, [pc, #40]	@ (80016f4 <SysTick_Config+0x40>)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	3b01      	subs	r3, #1
 80016d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016d2:	210f      	movs	r1, #15
 80016d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80016d8:	f7ff ff8e 	bl	80015f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016dc:	4b05      	ldr	r3, [pc, #20]	@ (80016f4 <SysTick_Config+0x40>)
 80016de:	2200      	movs	r2, #0
 80016e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016e2:	4b04      	ldr	r3, [pc, #16]	@ (80016f4 <SysTick_Config+0x40>)
 80016e4:	2207      	movs	r2, #7
 80016e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	e000e010 	.word	0xe000e010

080016f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f7ff ff47 	bl	8001594 <__NVIC_SetPriorityGrouping>
}
 8001706:	bf00      	nop
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800170e:	b580      	push	{r7, lr}
 8001710:	b086      	sub	sp, #24
 8001712:	af00      	add	r7, sp, #0
 8001714:	4603      	mov	r3, r0
 8001716:	60b9      	str	r1, [r7, #8]
 8001718:	607a      	str	r2, [r7, #4]
 800171a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800171c:	2300      	movs	r3, #0
 800171e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001720:	f7ff ff5c 	bl	80015dc <__NVIC_GetPriorityGrouping>
 8001724:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	68b9      	ldr	r1, [r7, #8]
 800172a:	6978      	ldr	r0, [r7, #20]
 800172c:	f7ff ff8e 	bl	800164c <NVIC_EncodePriority>
 8001730:	4602      	mov	r2, r0
 8001732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001736:	4611      	mov	r1, r2
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff ff5d 	bl	80015f8 <__NVIC_SetPriority>
}
 800173e:	bf00      	nop
 8001740:	3718      	adds	r7, #24
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b082      	sub	sp, #8
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f7ff ffb0 	bl	80016b4 <SysTick_Config>
 8001754:	4603      	mov	r3, r0
}
 8001756:	4618      	mov	r0, r3
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
	...

08001760 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001760:	b480      	push	{r7}
 8001762:	b089      	sub	sp, #36	@ 0x24
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800176a:	2300      	movs	r3, #0
 800176c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800176e:	2300      	movs	r3, #0
 8001770:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001772:	2300      	movs	r3, #0
 8001774:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001776:	2300      	movs	r3, #0
 8001778:	61fb      	str	r3, [r7, #28]
 800177a:	e177      	b.n	8001a6c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800177c:	2201      	movs	r2, #1
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	697a      	ldr	r2, [r7, #20]
 800178c:	4013      	ands	r3, r2
 800178e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001790:	693a      	ldr	r2, [r7, #16]
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	429a      	cmp	r2, r3
 8001796:	f040 8166 	bne.w	8001a66 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f003 0303 	and.w	r3, r3, #3
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d005      	beq.n	80017b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d130      	bne.n	8001814 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	2203      	movs	r2, #3
 80017be:	fa02 f303 	lsl.w	r3, r2, r3
 80017c2:	43db      	mvns	r3, r3
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	4013      	ands	r3, r2
 80017c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	68da      	ldr	r2, [r3, #12]
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	69ba      	ldr	r2, [r7, #24]
 80017d8:	4313      	orrs	r3, r2
 80017da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	69ba      	ldr	r2, [r7, #24]
 80017e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017e8:	2201      	movs	r2, #1
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	43db      	mvns	r3, r3
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	4013      	ands	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	091b      	lsrs	r3, r3, #4
 80017fe:	f003 0201 	and.w	r2, r3, #1
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	4313      	orrs	r3, r2
 800180c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f003 0303 	and.w	r3, r3, #3
 800181c:	2b03      	cmp	r3, #3
 800181e:	d017      	beq.n	8001850 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	2203      	movs	r2, #3
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	43db      	mvns	r3, r3
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	4013      	ands	r3, r2
 8001836:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	689a      	ldr	r2, [r3, #8]
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	4313      	orrs	r3, r2
 8001848:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f003 0303 	and.w	r3, r3, #3
 8001858:	2b02      	cmp	r3, #2
 800185a:	d123      	bne.n	80018a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	08da      	lsrs	r2, r3, #3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	3208      	adds	r2, #8
 8001864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001868:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	f003 0307 	and.w	r3, r3, #7
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	220f      	movs	r2, #15
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	43db      	mvns	r3, r3
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	4013      	ands	r3, r2
 800187e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	691a      	ldr	r2, [r3, #16]
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	f003 0307 	and.w	r3, r3, #7
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	4313      	orrs	r3, r2
 8001894:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	08da      	lsrs	r2, r3, #3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	3208      	adds	r2, #8
 800189e:	69b9      	ldr	r1, [r7, #24]
 80018a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	2203      	movs	r2, #3
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	43db      	mvns	r3, r3
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	4013      	ands	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f003 0203 	and.w	r2, r3, #3
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	f000 80c0 	beq.w	8001a66 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	4b66      	ldr	r3, [pc, #408]	@ (8001a84 <HAL_GPIO_Init+0x324>)
 80018ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ee:	4a65      	ldr	r2, [pc, #404]	@ (8001a84 <HAL_GPIO_Init+0x324>)
 80018f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80018f6:	4b63      	ldr	r3, [pc, #396]	@ (8001a84 <HAL_GPIO_Init+0x324>)
 80018f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001902:	4a61      	ldr	r2, [pc, #388]	@ (8001a88 <HAL_GPIO_Init+0x328>)
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	089b      	lsrs	r3, r3, #2
 8001908:	3302      	adds	r3, #2
 800190a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800190e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	f003 0303 	and.w	r3, r3, #3
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	220f      	movs	r2, #15
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	43db      	mvns	r3, r3
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	4013      	ands	r3, r2
 8001924:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a58      	ldr	r2, [pc, #352]	@ (8001a8c <HAL_GPIO_Init+0x32c>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d037      	beq.n	800199e <HAL_GPIO_Init+0x23e>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a57      	ldr	r2, [pc, #348]	@ (8001a90 <HAL_GPIO_Init+0x330>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d031      	beq.n	800199a <HAL_GPIO_Init+0x23a>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a56      	ldr	r2, [pc, #344]	@ (8001a94 <HAL_GPIO_Init+0x334>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d02b      	beq.n	8001996 <HAL_GPIO_Init+0x236>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a55      	ldr	r2, [pc, #340]	@ (8001a98 <HAL_GPIO_Init+0x338>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d025      	beq.n	8001992 <HAL_GPIO_Init+0x232>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a54      	ldr	r2, [pc, #336]	@ (8001a9c <HAL_GPIO_Init+0x33c>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d01f      	beq.n	800198e <HAL_GPIO_Init+0x22e>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a53      	ldr	r2, [pc, #332]	@ (8001aa0 <HAL_GPIO_Init+0x340>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d019      	beq.n	800198a <HAL_GPIO_Init+0x22a>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a52      	ldr	r2, [pc, #328]	@ (8001aa4 <HAL_GPIO_Init+0x344>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d013      	beq.n	8001986 <HAL_GPIO_Init+0x226>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a51      	ldr	r2, [pc, #324]	@ (8001aa8 <HAL_GPIO_Init+0x348>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d00d      	beq.n	8001982 <HAL_GPIO_Init+0x222>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a50      	ldr	r2, [pc, #320]	@ (8001aac <HAL_GPIO_Init+0x34c>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d007      	beq.n	800197e <HAL_GPIO_Init+0x21e>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a4f      	ldr	r2, [pc, #316]	@ (8001ab0 <HAL_GPIO_Init+0x350>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d101      	bne.n	800197a <HAL_GPIO_Init+0x21a>
 8001976:	2309      	movs	r3, #9
 8001978:	e012      	b.n	80019a0 <HAL_GPIO_Init+0x240>
 800197a:	230a      	movs	r3, #10
 800197c:	e010      	b.n	80019a0 <HAL_GPIO_Init+0x240>
 800197e:	2308      	movs	r3, #8
 8001980:	e00e      	b.n	80019a0 <HAL_GPIO_Init+0x240>
 8001982:	2307      	movs	r3, #7
 8001984:	e00c      	b.n	80019a0 <HAL_GPIO_Init+0x240>
 8001986:	2306      	movs	r3, #6
 8001988:	e00a      	b.n	80019a0 <HAL_GPIO_Init+0x240>
 800198a:	2305      	movs	r3, #5
 800198c:	e008      	b.n	80019a0 <HAL_GPIO_Init+0x240>
 800198e:	2304      	movs	r3, #4
 8001990:	e006      	b.n	80019a0 <HAL_GPIO_Init+0x240>
 8001992:	2303      	movs	r3, #3
 8001994:	e004      	b.n	80019a0 <HAL_GPIO_Init+0x240>
 8001996:	2302      	movs	r3, #2
 8001998:	e002      	b.n	80019a0 <HAL_GPIO_Init+0x240>
 800199a:	2301      	movs	r3, #1
 800199c:	e000      	b.n	80019a0 <HAL_GPIO_Init+0x240>
 800199e:	2300      	movs	r3, #0
 80019a0:	69fa      	ldr	r2, [r7, #28]
 80019a2:	f002 0203 	and.w	r2, r2, #3
 80019a6:	0092      	lsls	r2, r2, #2
 80019a8:	4093      	lsls	r3, r2
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019b0:	4935      	ldr	r1, [pc, #212]	@ (8001a88 <HAL_GPIO_Init+0x328>)
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	089b      	lsrs	r3, r3, #2
 80019b6:	3302      	adds	r3, #2
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019be:	4b3d      	ldr	r3, [pc, #244]	@ (8001ab4 <HAL_GPIO_Init+0x354>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	43db      	mvns	r3, r3
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	4013      	ands	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d003      	beq.n	80019e2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	4313      	orrs	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019e2:	4a34      	ldr	r2, [pc, #208]	@ (8001ab4 <HAL_GPIO_Init+0x354>)
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019e8:	4b32      	ldr	r3, [pc, #200]	@ (8001ab4 <HAL_GPIO_Init+0x354>)
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	43db      	mvns	r3, r3
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	4013      	ands	r3, r2
 80019f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d003      	beq.n	8001a0c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a0c:	4a29      	ldr	r2, [pc, #164]	@ (8001ab4 <HAL_GPIO_Init+0x354>)
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a12:	4b28      	ldr	r3, [pc, #160]	@ (8001ab4 <HAL_GPIO_Init+0x354>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d003      	beq.n	8001a36 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a36:	4a1f      	ldr	r2, [pc, #124]	@ (8001ab4 <HAL_GPIO_Init+0x354>)
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a3c:	4b1d      	ldr	r3, [pc, #116]	@ (8001ab4 <HAL_GPIO_Init+0x354>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	43db      	mvns	r3, r3
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d003      	beq.n	8001a60 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a60:	4a14      	ldr	r2, [pc, #80]	@ (8001ab4 <HAL_GPIO_Init+0x354>)
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	61fb      	str	r3, [r7, #28]
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	2b0f      	cmp	r3, #15
 8001a70:	f67f ae84 	bls.w	800177c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a74:	bf00      	nop
 8001a76:	bf00      	nop
 8001a78:	3724      	adds	r7, #36	@ 0x24
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	40023800 	.word	0x40023800
 8001a88:	40013800 	.word	0x40013800
 8001a8c:	40020000 	.word	0x40020000
 8001a90:	40020400 	.word	0x40020400
 8001a94:	40020800 	.word	0x40020800
 8001a98:	40020c00 	.word	0x40020c00
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	40021400 	.word	0x40021400
 8001aa4:	40021800 	.word	0x40021800
 8001aa8:	40021c00 	.word	0x40021c00
 8001aac:	40022000 	.word	0x40022000
 8001ab0:	40022400 	.word	0x40022400
 8001ab4:	40013c00 	.word	0x40013c00

08001ab8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	691a      	ldr	r2, [r3, #16]
 8001ac8:	887b      	ldrh	r3, [r7, #2]
 8001aca:	4013      	ands	r3, r2
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d002      	beq.n	8001ad6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	73fb      	strb	r3, [r7, #15]
 8001ad4:	e001      	b.n	8001ada <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3714      	adds	r7, #20
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	460b      	mov	r3, r1
 8001af2:	807b      	strh	r3, [r7, #2]
 8001af4:	4613      	mov	r3, r2
 8001af6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001af8:	787b      	ldrb	r3, [r7, #1]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d003      	beq.n	8001b06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001afe:	887a      	ldrh	r2, [r7, #2]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b04:	e003      	b.n	8001b0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b06:	887b      	ldrh	r3, [r7, #2]
 8001b08:	041a      	lsls	r2, r3, #16
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	619a      	str	r2, [r3, #24]
}
 8001b0e:	bf00      	nop
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
	...

08001b1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d101      	bne.n	8001b2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e12b      	b.n	8001d86 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d106      	bne.n	8001b48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f7fe fd90 	bl	8000668 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2224      	movs	r2, #36	@ 0x24
 8001b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f022 0201 	bic.w	r2, r2, #1
 8001b5e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001b6e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001b7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b80:	f001 f954 	bl	8002e2c <HAL_RCC_GetPCLK1Freq>
 8001b84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	4a81      	ldr	r2, [pc, #516]	@ (8001d90 <HAL_I2C_Init+0x274>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d807      	bhi.n	8001ba0 <HAL_I2C_Init+0x84>
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	4a80      	ldr	r2, [pc, #512]	@ (8001d94 <HAL_I2C_Init+0x278>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	bf94      	ite	ls
 8001b98:	2301      	movls	r3, #1
 8001b9a:	2300      	movhi	r3, #0
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	e006      	b.n	8001bae <HAL_I2C_Init+0x92>
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	4a7d      	ldr	r2, [pc, #500]	@ (8001d98 <HAL_I2C_Init+0x27c>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	bf94      	ite	ls
 8001ba8:	2301      	movls	r3, #1
 8001baa:	2300      	movhi	r3, #0
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e0e7      	b.n	8001d86 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	4a78      	ldr	r2, [pc, #480]	@ (8001d9c <HAL_I2C_Init+0x280>)
 8001bba:	fba2 2303 	umull	r2, r3, r2, r3
 8001bbe:	0c9b      	lsrs	r3, r3, #18
 8001bc0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	68ba      	ldr	r2, [r7, #8]
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	6a1b      	ldr	r3, [r3, #32]
 8001bdc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	4a6a      	ldr	r2, [pc, #424]	@ (8001d90 <HAL_I2C_Init+0x274>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d802      	bhi.n	8001bf0 <HAL_I2C_Init+0xd4>
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	3301      	adds	r3, #1
 8001bee:	e009      	b.n	8001c04 <HAL_I2C_Init+0xe8>
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001bf6:	fb02 f303 	mul.w	r3, r2, r3
 8001bfa:	4a69      	ldr	r2, [pc, #420]	@ (8001da0 <HAL_I2C_Init+0x284>)
 8001bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8001c00:	099b      	lsrs	r3, r3, #6
 8001c02:	3301      	adds	r3, #1
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	6812      	ldr	r2, [r2, #0]
 8001c08:	430b      	orrs	r3, r1
 8001c0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	69db      	ldr	r3, [r3, #28]
 8001c12:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001c16:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	495c      	ldr	r1, [pc, #368]	@ (8001d90 <HAL_I2C_Init+0x274>)
 8001c20:	428b      	cmp	r3, r1
 8001c22:	d819      	bhi.n	8001c58 <HAL_I2C_Init+0x13c>
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	1e59      	subs	r1, r3, #1
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c32:	1c59      	adds	r1, r3, #1
 8001c34:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001c38:	400b      	ands	r3, r1
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d00a      	beq.n	8001c54 <HAL_I2C_Init+0x138>
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	1e59      	subs	r1, r3, #1
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c52:	e051      	b.n	8001cf8 <HAL_I2C_Init+0x1dc>
 8001c54:	2304      	movs	r3, #4
 8001c56:	e04f      	b.n	8001cf8 <HAL_I2C_Init+0x1dc>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d111      	bne.n	8001c84 <HAL_I2C_Init+0x168>
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	1e58      	subs	r0, r3, #1
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6859      	ldr	r1, [r3, #4]
 8001c68:	460b      	mov	r3, r1
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	440b      	add	r3, r1
 8001c6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c72:	3301      	adds	r3, #1
 8001c74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	bf0c      	ite	eq
 8001c7c:	2301      	moveq	r3, #1
 8001c7e:	2300      	movne	r3, #0
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	e012      	b.n	8001caa <HAL_I2C_Init+0x18e>
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	1e58      	subs	r0, r3, #1
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6859      	ldr	r1, [r3, #4]
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	440b      	add	r3, r1
 8001c92:	0099      	lsls	r1, r3, #2
 8001c94:	440b      	add	r3, r1
 8001c96:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	bf0c      	ite	eq
 8001ca4:	2301      	moveq	r3, #1
 8001ca6:	2300      	movne	r3, #0
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <HAL_I2C_Init+0x196>
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e022      	b.n	8001cf8 <HAL_I2C_Init+0x1dc>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d10e      	bne.n	8001cd8 <HAL_I2C_Init+0x1bc>
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	1e58      	subs	r0, r3, #1
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6859      	ldr	r1, [r3, #4]
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	440b      	add	r3, r1
 8001cc8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ccc:	3301      	adds	r3, #1
 8001cce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001cd6:	e00f      	b.n	8001cf8 <HAL_I2C_Init+0x1dc>
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	1e58      	subs	r0, r3, #1
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6859      	ldr	r1, [r3, #4]
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	440b      	add	r3, r1
 8001ce6:	0099      	lsls	r1, r3, #2
 8001ce8:	440b      	add	r3, r1
 8001cea:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cee:	3301      	adds	r3, #1
 8001cf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cf4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001cf8:	6879      	ldr	r1, [r7, #4]
 8001cfa:	6809      	ldr	r1, [r1, #0]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	69da      	ldr	r2, [r3, #28]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a1b      	ldr	r3, [r3, #32]
 8001d12:	431a      	orrs	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001d26:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	6911      	ldr	r1, [r2, #16]
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	68d2      	ldr	r2, [r2, #12]
 8001d32:	4311      	orrs	r1, r2
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	6812      	ldr	r2, [r2, #0]
 8001d38:	430b      	orrs	r3, r1
 8001d3a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	695a      	ldr	r2, [r3, #20]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	699b      	ldr	r3, [r3, #24]
 8001d4e:	431a      	orrs	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	430a      	orrs	r2, r1
 8001d56:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f042 0201 	orr.w	r2, r2, #1
 8001d66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2220      	movs	r2, #32
 8001d72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3710      	adds	r7, #16
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	000186a0 	.word	0x000186a0
 8001d94:	001e847f 	.word	0x001e847f
 8001d98:	003d08ff 	.word	0x003d08ff
 8001d9c:	431bde83 	.word	0x431bde83
 8001da0:	10624dd3 	.word	0x10624dd3

08001da4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b088      	sub	sp, #32
 8001da8:	af02      	add	r7, sp, #8
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	607a      	str	r2, [r7, #4]
 8001dae:	461a      	mov	r2, r3
 8001db0:	460b      	mov	r3, r1
 8001db2:	817b      	strh	r3, [r7, #10]
 8001db4:	4613      	mov	r3, r2
 8001db6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001db8:	f7ff fbbc 	bl	8001534 <HAL_GetTick>
 8001dbc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	2b20      	cmp	r3, #32
 8001dc8:	f040 80e0 	bne.w	8001f8c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	9300      	str	r3, [sp, #0]
 8001dd0:	2319      	movs	r3, #25
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	4970      	ldr	r1, [pc, #448]	@ (8001f98 <HAL_I2C_Master_Transmit+0x1f4>)
 8001dd6:	68f8      	ldr	r0, [r7, #12]
 8001dd8:	f000 f964 	bl	80020a4 <I2C_WaitOnFlagUntilTimeout>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001de2:	2302      	movs	r3, #2
 8001de4:	e0d3      	b.n	8001f8e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d101      	bne.n	8001df4 <HAL_I2C_Master_Transmit+0x50>
 8001df0:	2302      	movs	r3, #2
 8001df2:	e0cc      	b.n	8001f8e <HAL_I2C_Master_Transmit+0x1ea>
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0301 	and.w	r3, r3, #1
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d007      	beq.n	8001e1a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f042 0201 	orr.w	r2, r2, #1
 8001e18:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e28:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2221      	movs	r2, #33	@ 0x21
 8001e2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2210      	movs	r2, #16
 8001e36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	893a      	ldrh	r2, [r7, #8]
 8001e4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e50:	b29a      	uxth	r2, r3
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	4a50      	ldr	r2, [pc, #320]	@ (8001f9c <HAL_I2C_Master_Transmit+0x1f8>)
 8001e5a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001e5c:	8979      	ldrh	r1, [r7, #10]
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	6a3a      	ldr	r2, [r7, #32]
 8001e62:	68f8      	ldr	r0, [r7, #12]
 8001e64:	f000 f89c 	bl	8001fa0 <I2C_MasterRequestWrite>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e08d      	b.n	8001f8e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e72:	2300      	movs	r3, #0
 8001e74:	613b      	str	r3, [r7, #16]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	695b      	ldr	r3, [r3, #20]
 8001e7c:	613b      	str	r3, [r7, #16]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	699b      	ldr	r3, [r3, #24]
 8001e84:	613b      	str	r3, [r7, #16]
 8001e86:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001e88:	e066      	b.n	8001f58 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e8a:	697a      	ldr	r2, [r7, #20]
 8001e8c:	6a39      	ldr	r1, [r7, #32]
 8001e8e:	68f8      	ldr	r0, [r7, #12]
 8001e90:	f000 fa22 	bl	80022d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d00d      	beq.n	8001eb6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e9e:	2b04      	cmp	r3, #4
 8001ea0:	d107      	bne.n	8001eb2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001eb0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e06b      	b.n	8001f8e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eba:	781a      	ldrb	r2, [r3, #0]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ec6:	1c5a      	adds	r2, r3, #1
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	b29a      	uxth	r2, r3
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	b29a      	uxth	r2, r3
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	695b      	ldr	r3, [r3, #20]
 8001eec:	f003 0304 	and.w	r3, r3, #4
 8001ef0:	2b04      	cmp	r3, #4
 8001ef2:	d11b      	bne.n	8001f2c <HAL_I2C_Master_Transmit+0x188>
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d017      	beq.n	8001f2c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f00:	781a      	ldrb	r2, [r3, #0]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f0c:	1c5a      	adds	r2, r3, #1
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	3b01      	subs	r3, #1
 8001f1a:	b29a      	uxth	r2, r3
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f24:	3b01      	subs	r3, #1
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f2c:	697a      	ldr	r2, [r7, #20]
 8001f2e:	6a39      	ldr	r1, [r7, #32]
 8001f30:	68f8      	ldr	r0, [r7, #12]
 8001f32:	f000 fa19 	bl	8002368 <I2C_WaitOnBTFFlagUntilTimeout>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d00d      	beq.n	8001f58 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f40:	2b04      	cmp	r3, #4
 8001f42:	d107      	bne.n	8001f54 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f52:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e01a      	b.n	8001f8e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d194      	bne.n	8001e8a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2220      	movs	r2, #32
 8001f74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	e000      	b.n	8001f8e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001f8c:	2302      	movs	r3, #2
  }
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3718      	adds	r7, #24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	00100002 	.word	0x00100002
 8001f9c:	ffff0000 	.word	0xffff0000

08001fa0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b088      	sub	sp, #32
 8001fa4:	af02      	add	r7, sp, #8
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	607a      	str	r2, [r7, #4]
 8001faa:	603b      	str	r3, [r7, #0]
 8001fac:	460b      	mov	r3, r1
 8001fae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fb4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	2b08      	cmp	r3, #8
 8001fba:	d006      	beq.n	8001fca <I2C_MasterRequestWrite+0x2a>
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d003      	beq.n	8001fca <I2C_MasterRequestWrite+0x2a>
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001fc8:	d108      	bne.n	8001fdc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001fd8:	601a      	str	r2, [r3, #0]
 8001fda:	e00b      	b.n	8001ff4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe0:	2b12      	cmp	r3, #18
 8001fe2:	d107      	bne.n	8001ff4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ff2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	9300      	str	r3, [sp, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002000:	68f8      	ldr	r0, [r7, #12]
 8002002:	f000 f84f 	bl	80020a4 <I2C_WaitOnFlagUntilTimeout>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d00d      	beq.n	8002028 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002016:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800201a:	d103      	bne.n	8002024 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002022:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e035      	b.n	8002094 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	691b      	ldr	r3, [r3, #16]
 800202c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002030:	d108      	bne.n	8002044 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002032:	897b      	ldrh	r3, [r7, #10]
 8002034:	b2db      	uxtb	r3, r3
 8002036:	461a      	mov	r2, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002040:	611a      	str	r2, [r3, #16]
 8002042:	e01b      	b.n	800207c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002044:	897b      	ldrh	r3, [r7, #10]
 8002046:	11db      	asrs	r3, r3, #7
 8002048:	b2db      	uxtb	r3, r3
 800204a:	f003 0306 	and.w	r3, r3, #6
 800204e:	b2db      	uxtb	r3, r3
 8002050:	f063 030f 	orn	r3, r3, #15
 8002054:	b2da      	uxtb	r2, r3
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	490e      	ldr	r1, [pc, #56]	@ (800209c <I2C_MasterRequestWrite+0xfc>)
 8002062:	68f8      	ldr	r0, [r7, #12]
 8002064:	f000 f898 	bl	8002198 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e010      	b.n	8002094 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002072:	897b      	ldrh	r3, [r7, #10]
 8002074:	b2da      	uxtb	r2, r3
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	4907      	ldr	r1, [pc, #28]	@ (80020a0 <I2C_MasterRequestWrite+0x100>)
 8002082:	68f8      	ldr	r0, [r7, #12]
 8002084:	f000 f888 	bl	8002198 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e000      	b.n	8002094 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002092:	2300      	movs	r3, #0
}
 8002094:	4618      	mov	r0, r3
 8002096:	3718      	adds	r7, #24
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	00010008 	.word	0x00010008
 80020a0:	00010002 	.word	0x00010002

080020a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	603b      	str	r3, [r7, #0]
 80020b0:	4613      	mov	r3, r2
 80020b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020b4:	e048      	b.n	8002148 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80020bc:	d044      	beq.n	8002148 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020be:	f7ff fa39 	bl	8001534 <HAL_GetTick>
 80020c2:	4602      	mov	r2, r0
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	683a      	ldr	r2, [r7, #0]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d302      	bcc.n	80020d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d139      	bne.n	8002148 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	0c1b      	lsrs	r3, r3, #16
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d10d      	bne.n	80020fa <I2C_WaitOnFlagUntilTimeout+0x56>
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	695b      	ldr	r3, [r3, #20]
 80020e4:	43da      	mvns	r2, r3
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	4013      	ands	r3, r2
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	bf0c      	ite	eq
 80020f0:	2301      	moveq	r3, #1
 80020f2:	2300      	movne	r3, #0
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	461a      	mov	r2, r3
 80020f8:	e00c      	b.n	8002114 <I2C_WaitOnFlagUntilTimeout+0x70>
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	43da      	mvns	r2, r3
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	4013      	ands	r3, r2
 8002106:	b29b      	uxth	r3, r3
 8002108:	2b00      	cmp	r3, #0
 800210a:	bf0c      	ite	eq
 800210c:	2301      	moveq	r3, #1
 800210e:	2300      	movne	r3, #0
 8002110:	b2db      	uxtb	r3, r3
 8002112:	461a      	mov	r2, r3
 8002114:	79fb      	ldrb	r3, [r7, #7]
 8002116:	429a      	cmp	r2, r3
 8002118:	d116      	bne.n	8002148 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2200      	movs	r2, #0
 800211e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2220      	movs	r2, #32
 8002124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2200      	movs	r2, #0
 800212c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002134:	f043 0220 	orr.w	r2, r3, #32
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2200      	movs	r2, #0
 8002140:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e023      	b.n	8002190 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	0c1b      	lsrs	r3, r3, #16
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b01      	cmp	r3, #1
 8002150:	d10d      	bne.n	800216e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	695b      	ldr	r3, [r3, #20]
 8002158:	43da      	mvns	r2, r3
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	4013      	ands	r3, r2
 800215e:	b29b      	uxth	r3, r3
 8002160:	2b00      	cmp	r3, #0
 8002162:	bf0c      	ite	eq
 8002164:	2301      	moveq	r3, #1
 8002166:	2300      	movne	r3, #0
 8002168:	b2db      	uxtb	r3, r3
 800216a:	461a      	mov	r2, r3
 800216c:	e00c      	b.n	8002188 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	43da      	mvns	r2, r3
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	4013      	ands	r3, r2
 800217a:	b29b      	uxth	r3, r3
 800217c:	2b00      	cmp	r3, #0
 800217e:	bf0c      	ite	eq
 8002180:	2301      	moveq	r3, #1
 8002182:	2300      	movne	r3, #0
 8002184:	b2db      	uxtb	r3, r3
 8002186:	461a      	mov	r2, r3
 8002188:	79fb      	ldrb	r3, [r7, #7]
 800218a:	429a      	cmp	r2, r3
 800218c:	d093      	beq.n	80020b6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800218e:	2300      	movs	r3, #0
}
 8002190:	4618      	mov	r0, r3
 8002192:	3710      	adds	r7, #16
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]
 80021a4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80021a6:	e071      	b.n	800228c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	695b      	ldr	r3, [r3, #20]
 80021ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021b6:	d123      	bne.n	8002200 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021c6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80021d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2200      	movs	r2, #0
 80021d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2220      	movs	r2, #32
 80021dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ec:	f043 0204 	orr.w	r2, r3, #4
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2200      	movs	r2, #0
 80021f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e067      	b.n	80022d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002206:	d041      	beq.n	800228c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002208:	f7ff f994 	bl	8001534 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	429a      	cmp	r2, r3
 8002216:	d302      	bcc.n	800221e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d136      	bne.n	800228c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	0c1b      	lsrs	r3, r3, #16
 8002222:	b2db      	uxtb	r3, r3
 8002224:	2b01      	cmp	r3, #1
 8002226:	d10c      	bne.n	8002242 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	43da      	mvns	r2, r3
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	4013      	ands	r3, r2
 8002234:	b29b      	uxth	r3, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	bf14      	ite	ne
 800223a:	2301      	movne	r3, #1
 800223c:	2300      	moveq	r3, #0
 800223e:	b2db      	uxtb	r3, r3
 8002240:	e00b      	b.n	800225a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	43da      	mvns	r2, r3
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	4013      	ands	r3, r2
 800224e:	b29b      	uxth	r3, r3
 8002250:	2b00      	cmp	r3, #0
 8002252:	bf14      	ite	ne
 8002254:	2301      	movne	r3, #1
 8002256:	2300      	moveq	r3, #0
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2b00      	cmp	r3, #0
 800225c:	d016      	beq.n	800228c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2200      	movs	r2, #0
 8002262:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2220      	movs	r2, #32
 8002268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002278:	f043 0220 	orr.w	r2, r3, #32
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e021      	b.n	80022d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	0c1b      	lsrs	r3, r3, #16
 8002290:	b2db      	uxtb	r3, r3
 8002292:	2b01      	cmp	r3, #1
 8002294:	d10c      	bne.n	80022b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	695b      	ldr	r3, [r3, #20]
 800229c:	43da      	mvns	r2, r3
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	4013      	ands	r3, r2
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	bf14      	ite	ne
 80022a8:	2301      	movne	r3, #1
 80022aa:	2300      	moveq	r3, #0
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	e00b      	b.n	80022c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	43da      	mvns	r2, r3
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	4013      	ands	r3, r2
 80022bc:	b29b      	uxth	r3, r3
 80022be:	2b00      	cmp	r3, #0
 80022c0:	bf14      	ite	ne
 80022c2:	2301      	movne	r3, #1
 80022c4:	2300      	moveq	r3, #0
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	f47f af6d 	bne.w	80021a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80022ce:	2300      	movs	r3, #0
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3710      	adds	r7, #16
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022e4:	e034      	b.n	8002350 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80022e6:	68f8      	ldr	r0, [r7, #12]
 80022e8:	f000 f886 	bl	80023f8 <I2C_IsAcknowledgeFailed>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e034      	b.n	8002360 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80022fc:	d028      	beq.n	8002350 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022fe:	f7ff f919 	bl	8001534 <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	68ba      	ldr	r2, [r7, #8]
 800230a:	429a      	cmp	r2, r3
 800230c:	d302      	bcc.n	8002314 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d11d      	bne.n	8002350 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	695b      	ldr	r3, [r3, #20]
 800231a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800231e:	2b80      	cmp	r3, #128	@ 0x80
 8002320:	d016      	beq.n	8002350 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2200      	movs	r2, #0
 8002326:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2220      	movs	r2, #32
 800232c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2200      	movs	r2, #0
 8002334:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233c:	f043 0220 	orr.w	r2, r3, #32
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2200      	movs	r2, #0
 8002348:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e007      	b.n	8002360 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	695b      	ldr	r3, [r3, #20]
 8002356:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800235a:	2b80      	cmp	r3, #128	@ 0x80
 800235c:	d1c3      	bne.n	80022e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800235e:	2300      	movs	r3, #0
}
 8002360:	4618      	mov	r0, r3
 8002362:	3710      	adds	r7, #16
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002374:	e034      	b.n	80023e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002376:	68f8      	ldr	r0, [r7, #12]
 8002378:	f000 f83e 	bl	80023f8 <I2C_IsAcknowledgeFailed>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e034      	b.n	80023f0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800238c:	d028      	beq.n	80023e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800238e:	f7ff f8d1 	bl	8001534 <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	68ba      	ldr	r2, [r7, #8]
 800239a:	429a      	cmp	r2, r3
 800239c:	d302      	bcc.n	80023a4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d11d      	bne.n	80023e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	695b      	ldr	r3, [r3, #20]
 80023aa:	f003 0304 	and.w	r3, r3, #4
 80023ae:	2b04      	cmp	r3, #4
 80023b0:	d016      	beq.n	80023e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2200      	movs	r2, #0
 80023b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2220      	movs	r2, #32
 80023bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023cc:	f043 0220 	orr.w	r2, r3, #32
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e007      	b.n	80023f0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	695b      	ldr	r3, [r3, #20]
 80023e6:	f003 0304 	and.w	r3, r3, #4
 80023ea:	2b04      	cmp	r3, #4
 80023ec:	d1c3      	bne.n	8002376 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3710      	adds	r7, #16
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800240a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800240e:	d11b      	bne.n	8002448 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002418:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2220      	movs	r2, #32
 8002424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002434:	f043 0204 	orr.w	r2, r3, #4
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e000      	b.n	800244a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr

08002456 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002456:	b480      	push	{r7}
 8002458:	b083      	sub	sp, #12
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
 800245e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002466:	b2db      	uxtb	r3, r3
 8002468:	2b20      	cmp	r3, #32
 800246a:	d129      	bne.n	80024c0 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2224      	movs	r2, #36	@ 0x24
 8002470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f022 0201 	bic.w	r2, r2, #1
 8002482:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f022 0210 	bic.w	r2, r2, #16
 8002492:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	683a      	ldr	r2, [r7, #0]
 80024a0:	430a      	orrs	r2, r1
 80024a2:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f042 0201 	orr.w	r2, r2, #1
 80024b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2220      	movs	r2, #32
 80024b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80024bc:	2300      	movs	r3, #0
 80024be:	e000      	b.n	80024c2 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80024c0:	2302      	movs	r3, #2
  }
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr

080024ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80024ce:	b480      	push	{r7}
 80024d0:	b085      	sub	sp, #20
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
 80024d6:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80024d8:	2300      	movs	r3, #0
 80024da:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	2b20      	cmp	r3, #32
 80024e6:	d12a      	bne.n	800253e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2224      	movs	r2, #36	@ 0x24
 80024ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f022 0201 	bic.w	r2, r2, #1
 80024fe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002506:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002508:	89fb      	ldrh	r3, [r7, #14]
 800250a:	f023 030f 	bic.w	r3, r3, #15
 800250e:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	b29a      	uxth	r2, r3
 8002514:	89fb      	ldrh	r3, [r7, #14]
 8002516:	4313      	orrs	r3, r2
 8002518:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	89fa      	ldrh	r2, [r7, #14]
 8002520:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f042 0201 	orr.w	r2, r2, #1
 8002530:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2220      	movs	r2, #32
 8002536:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800253a:	2300      	movs	r3, #0
 800253c:	e000      	b.n	8002540 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800253e:	2302      	movs	r3, #2
  }
}
 8002540:	4618      	mov	r0, r3
 8002542:	3714      	adds	r7, #20
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b086      	sub	sp, #24
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d101      	bne.n	800255e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e267      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	2b00      	cmp	r3, #0
 8002568:	d075      	beq.n	8002656 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800256a:	4b88      	ldr	r3, [pc, #544]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f003 030c 	and.w	r3, r3, #12
 8002572:	2b04      	cmp	r3, #4
 8002574:	d00c      	beq.n	8002590 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002576:	4b85      	ldr	r3, [pc, #532]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800257e:	2b08      	cmp	r3, #8
 8002580:	d112      	bne.n	80025a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002582:	4b82      	ldr	r3, [pc, #520]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800258a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800258e:	d10b      	bne.n	80025a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002590:	4b7e      	ldr	r3, [pc, #504]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d05b      	beq.n	8002654 <HAL_RCC_OscConfig+0x108>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d157      	bne.n	8002654 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e242      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025b0:	d106      	bne.n	80025c0 <HAL_RCC_OscConfig+0x74>
 80025b2:	4b76      	ldr	r3, [pc, #472]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a75      	ldr	r2, [pc, #468]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80025b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025bc:	6013      	str	r3, [r2, #0]
 80025be:	e01d      	b.n	80025fc <HAL_RCC_OscConfig+0xb0>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025c8:	d10c      	bne.n	80025e4 <HAL_RCC_OscConfig+0x98>
 80025ca:	4b70      	ldr	r3, [pc, #448]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a6f      	ldr	r2, [pc, #444]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80025d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025d4:	6013      	str	r3, [r2, #0]
 80025d6:	4b6d      	ldr	r3, [pc, #436]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a6c      	ldr	r2, [pc, #432]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80025dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025e0:	6013      	str	r3, [r2, #0]
 80025e2:	e00b      	b.n	80025fc <HAL_RCC_OscConfig+0xb0>
 80025e4:	4b69      	ldr	r3, [pc, #420]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a68      	ldr	r2, [pc, #416]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80025ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025ee:	6013      	str	r3, [r2, #0]
 80025f0:	4b66      	ldr	r3, [pc, #408]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a65      	ldr	r2, [pc, #404]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80025f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d013      	beq.n	800262c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002604:	f7fe ff96 	bl	8001534 <HAL_GetTick>
 8002608:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800260a:	e008      	b.n	800261e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800260c:	f7fe ff92 	bl	8001534 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	2b64      	cmp	r3, #100	@ 0x64
 8002618:	d901      	bls.n	800261e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e207      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800261e:	4b5b      	ldr	r3, [pc, #364]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d0f0      	beq.n	800260c <HAL_RCC_OscConfig+0xc0>
 800262a:	e014      	b.n	8002656 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800262c:	f7fe ff82 	bl	8001534 <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002634:	f7fe ff7e 	bl	8001534 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b64      	cmp	r3, #100	@ 0x64
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e1f3      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002646:	4b51      	ldr	r3, [pc, #324]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1f0      	bne.n	8002634 <HAL_RCC_OscConfig+0xe8>
 8002652:	e000      	b.n	8002656 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002654:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d063      	beq.n	800272a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002662:	4b4a      	ldr	r3, [pc, #296]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f003 030c 	and.w	r3, r3, #12
 800266a:	2b00      	cmp	r3, #0
 800266c:	d00b      	beq.n	8002686 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800266e:	4b47      	ldr	r3, [pc, #284]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002676:	2b08      	cmp	r3, #8
 8002678:	d11c      	bne.n	80026b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800267a:	4b44      	ldr	r3, [pc, #272]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d116      	bne.n	80026b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002686:	4b41      	ldr	r3, [pc, #260]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d005      	beq.n	800269e <HAL_RCC_OscConfig+0x152>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d001      	beq.n	800269e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e1c7      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800269e:	4b3b      	ldr	r3, [pc, #236]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	4937      	ldr	r1, [pc, #220]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026b2:	e03a      	b.n	800272a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d020      	beq.n	80026fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026bc:	4b34      	ldr	r3, [pc, #208]	@ (8002790 <HAL_RCC_OscConfig+0x244>)
 80026be:	2201      	movs	r2, #1
 80026c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c2:	f7fe ff37 	bl	8001534 <HAL_GetTick>
 80026c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026c8:	e008      	b.n	80026dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026ca:	f7fe ff33 	bl	8001534 <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d901      	bls.n	80026dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e1a8      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026dc:	4b2b      	ldr	r3, [pc, #172]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d0f0      	beq.n	80026ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026e8:	4b28      	ldr	r3, [pc, #160]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	691b      	ldr	r3, [r3, #16]
 80026f4:	00db      	lsls	r3, r3, #3
 80026f6:	4925      	ldr	r1, [pc, #148]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	600b      	str	r3, [r1, #0]
 80026fc:	e015      	b.n	800272a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026fe:	4b24      	ldr	r3, [pc, #144]	@ (8002790 <HAL_RCC_OscConfig+0x244>)
 8002700:	2200      	movs	r2, #0
 8002702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002704:	f7fe ff16 	bl	8001534 <HAL_GetTick>
 8002708:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800270a:	e008      	b.n	800271e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800270c:	f7fe ff12 	bl	8001534 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b02      	cmp	r3, #2
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e187      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800271e:	4b1b      	ldr	r3, [pc, #108]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d1f0      	bne.n	800270c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0308 	and.w	r3, r3, #8
 8002732:	2b00      	cmp	r3, #0
 8002734:	d036      	beq.n	80027a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d016      	beq.n	800276c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800273e:	4b15      	ldr	r3, [pc, #84]	@ (8002794 <HAL_RCC_OscConfig+0x248>)
 8002740:	2201      	movs	r2, #1
 8002742:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002744:	f7fe fef6 	bl	8001534 <HAL_GetTick>
 8002748:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800274a:	e008      	b.n	800275e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800274c:	f7fe fef2 	bl	8001534 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b02      	cmp	r3, #2
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e167      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800275e:	4b0b      	ldr	r3, [pc, #44]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 8002760:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d0f0      	beq.n	800274c <HAL_RCC_OscConfig+0x200>
 800276a:	e01b      	b.n	80027a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800276c:	4b09      	ldr	r3, [pc, #36]	@ (8002794 <HAL_RCC_OscConfig+0x248>)
 800276e:	2200      	movs	r2, #0
 8002770:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002772:	f7fe fedf 	bl	8001534 <HAL_GetTick>
 8002776:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002778:	e00e      	b.n	8002798 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800277a:	f7fe fedb 	bl	8001534 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	2b02      	cmp	r3, #2
 8002786:	d907      	bls.n	8002798 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e150      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
 800278c:	40023800 	.word	0x40023800
 8002790:	42470000 	.word	0x42470000
 8002794:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002798:	4b88      	ldr	r3, [pc, #544]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 800279a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800279c:	f003 0302 	and.w	r3, r3, #2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d1ea      	bne.n	800277a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0304 	and.w	r3, r3, #4
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f000 8097 	beq.w	80028e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027b2:	2300      	movs	r3, #0
 80027b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027b6:	4b81      	ldr	r3, [pc, #516]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 80027b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d10f      	bne.n	80027e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027c2:	2300      	movs	r3, #0
 80027c4:	60bb      	str	r3, [r7, #8]
 80027c6:	4b7d      	ldr	r3, [pc, #500]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 80027c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ca:	4a7c      	ldr	r2, [pc, #496]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 80027cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80027d2:	4b7a      	ldr	r3, [pc, #488]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 80027d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027da:	60bb      	str	r3, [r7, #8]
 80027dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027de:	2301      	movs	r3, #1
 80027e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027e2:	4b77      	ldr	r3, [pc, #476]	@ (80029c0 <HAL_RCC_OscConfig+0x474>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d118      	bne.n	8002820 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027ee:	4b74      	ldr	r3, [pc, #464]	@ (80029c0 <HAL_RCC_OscConfig+0x474>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a73      	ldr	r2, [pc, #460]	@ (80029c0 <HAL_RCC_OscConfig+0x474>)
 80027f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027fa:	f7fe fe9b 	bl	8001534 <HAL_GetTick>
 80027fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002800:	e008      	b.n	8002814 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002802:	f7fe fe97 	bl	8001534 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d901      	bls.n	8002814 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e10c      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002814:	4b6a      	ldr	r3, [pc, #424]	@ (80029c0 <HAL_RCC_OscConfig+0x474>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800281c:	2b00      	cmp	r3, #0
 800281e:	d0f0      	beq.n	8002802 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d106      	bne.n	8002836 <HAL_RCC_OscConfig+0x2ea>
 8002828:	4b64      	ldr	r3, [pc, #400]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 800282a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800282c:	4a63      	ldr	r2, [pc, #396]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 800282e:	f043 0301 	orr.w	r3, r3, #1
 8002832:	6713      	str	r3, [r2, #112]	@ 0x70
 8002834:	e01c      	b.n	8002870 <HAL_RCC_OscConfig+0x324>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	2b05      	cmp	r3, #5
 800283c:	d10c      	bne.n	8002858 <HAL_RCC_OscConfig+0x30c>
 800283e:	4b5f      	ldr	r3, [pc, #380]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 8002840:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002842:	4a5e      	ldr	r2, [pc, #376]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 8002844:	f043 0304 	orr.w	r3, r3, #4
 8002848:	6713      	str	r3, [r2, #112]	@ 0x70
 800284a:	4b5c      	ldr	r3, [pc, #368]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 800284c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800284e:	4a5b      	ldr	r2, [pc, #364]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 8002850:	f043 0301 	orr.w	r3, r3, #1
 8002854:	6713      	str	r3, [r2, #112]	@ 0x70
 8002856:	e00b      	b.n	8002870 <HAL_RCC_OscConfig+0x324>
 8002858:	4b58      	ldr	r3, [pc, #352]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 800285a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800285c:	4a57      	ldr	r2, [pc, #348]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 800285e:	f023 0301 	bic.w	r3, r3, #1
 8002862:	6713      	str	r3, [r2, #112]	@ 0x70
 8002864:	4b55      	ldr	r3, [pc, #340]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 8002866:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002868:	4a54      	ldr	r2, [pc, #336]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 800286a:	f023 0304 	bic.w	r3, r3, #4
 800286e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d015      	beq.n	80028a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002878:	f7fe fe5c 	bl	8001534 <HAL_GetTick>
 800287c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800287e:	e00a      	b.n	8002896 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002880:	f7fe fe58 	bl	8001534 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800288e:	4293      	cmp	r3, r2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e0cb      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002896:	4b49      	ldr	r3, [pc, #292]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 8002898:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d0ee      	beq.n	8002880 <HAL_RCC_OscConfig+0x334>
 80028a2:	e014      	b.n	80028ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028a4:	f7fe fe46 	bl	8001534 <HAL_GetTick>
 80028a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028aa:	e00a      	b.n	80028c2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028ac:	f7fe fe42 	bl	8001534 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e0b5      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028c2:	4b3e      	ldr	r3, [pc, #248]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 80028c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1ee      	bne.n	80028ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028ce:	7dfb      	ldrb	r3, [r7, #23]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d105      	bne.n	80028e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028d4:	4b39      	ldr	r3, [pc, #228]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 80028d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d8:	4a38      	ldr	r2, [pc, #224]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 80028da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028de:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f000 80a1 	beq.w	8002a2c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028ea:	4b34      	ldr	r3, [pc, #208]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f003 030c 	and.w	r3, r3, #12
 80028f2:	2b08      	cmp	r3, #8
 80028f4:	d05c      	beq.n	80029b0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	699b      	ldr	r3, [r3, #24]
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d141      	bne.n	8002982 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028fe:	4b31      	ldr	r3, [pc, #196]	@ (80029c4 <HAL_RCC_OscConfig+0x478>)
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002904:	f7fe fe16 	bl	8001534 <HAL_GetTick>
 8002908:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800290a:	e008      	b.n	800291e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800290c:	f7fe fe12 	bl	8001534 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b02      	cmp	r3, #2
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e087      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800291e:	4b27      	ldr	r3, [pc, #156]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1f0      	bne.n	800290c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	69da      	ldr	r2, [r3, #28]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a1b      	ldr	r3, [r3, #32]
 8002932:	431a      	orrs	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002938:	019b      	lsls	r3, r3, #6
 800293a:	431a      	orrs	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002940:	085b      	lsrs	r3, r3, #1
 8002942:	3b01      	subs	r3, #1
 8002944:	041b      	lsls	r3, r3, #16
 8002946:	431a      	orrs	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800294c:	061b      	lsls	r3, r3, #24
 800294e:	491b      	ldr	r1, [pc, #108]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 8002950:	4313      	orrs	r3, r2
 8002952:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002954:	4b1b      	ldr	r3, [pc, #108]	@ (80029c4 <HAL_RCC_OscConfig+0x478>)
 8002956:	2201      	movs	r2, #1
 8002958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800295a:	f7fe fdeb 	bl	8001534 <HAL_GetTick>
 800295e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002960:	e008      	b.n	8002974 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002962:	f7fe fde7 	bl	8001534 <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b02      	cmp	r3, #2
 800296e:	d901      	bls.n	8002974 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e05c      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002974:	4b11      	ldr	r3, [pc, #68]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d0f0      	beq.n	8002962 <HAL_RCC_OscConfig+0x416>
 8002980:	e054      	b.n	8002a2c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002982:	4b10      	ldr	r3, [pc, #64]	@ (80029c4 <HAL_RCC_OscConfig+0x478>)
 8002984:	2200      	movs	r2, #0
 8002986:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002988:	f7fe fdd4 	bl	8001534 <HAL_GetTick>
 800298c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800298e:	e008      	b.n	80029a2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002990:	f7fe fdd0 	bl	8001534 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b02      	cmp	r3, #2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e045      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029a2:	4b06      	ldr	r3, [pc, #24]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1f0      	bne.n	8002990 <HAL_RCC_OscConfig+0x444>
 80029ae:	e03d      	b.n	8002a2c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d107      	bne.n	80029c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e038      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
 80029bc:	40023800 	.word	0x40023800
 80029c0:	40007000 	.word	0x40007000
 80029c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002a38 <HAL_RCC_OscConfig+0x4ec>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d028      	beq.n	8002a28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d121      	bne.n	8002a28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d11a      	bne.n	8002a28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029f2:	68fa      	ldr	r2, [r7, #12]
 80029f4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80029f8:	4013      	ands	r3, r2
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80029fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d111      	bne.n	8002a28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a0e:	085b      	lsrs	r3, r3, #1
 8002a10:	3b01      	subs	r3, #1
 8002a12:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d107      	bne.n	8002a28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a22:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d001      	beq.n	8002a2c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e000      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3718      	adds	r7, #24
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	40023800 	.word	0x40023800

08002a3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d101      	bne.n	8002a50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e0cc      	b.n	8002bea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a50:	4b68      	ldr	r3, [pc, #416]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 030f 	and.w	r3, r3, #15
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d90c      	bls.n	8002a78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a5e:	4b65      	ldr	r3, [pc, #404]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	b2d2      	uxtb	r2, r2
 8002a64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a66:	4b63      	ldr	r3, [pc, #396]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 030f 	and.w	r3, r3, #15
 8002a6e:	683a      	ldr	r2, [r7, #0]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d001      	beq.n	8002a78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e0b8      	b.n	8002bea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0302 	and.w	r3, r3, #2
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d020      	beq.n	8002ac6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0304 	and.w	r3, r3, #4
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d005      	beq.n	8002a9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a90:	4b59      	ldr	r3, [pc, #356]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	4a58      	ldr	r2, [pc, #352]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a96:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002a9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0308 	and.w	r3, r3, #8
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d005      	beq.n	8002ab4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002aa8:	4b53      	ldr	r3, [pc, #332]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	4a52      	ldr	r2, [pc, #328]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002aae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002ab2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ab4:	4b50      	ldr	r3, [pc, #320]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	494d      	ldr	r1, [pc, #308]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d044      	beq.n	8002b5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d107      	bne.n	8002aea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ada:	4b47      	ldr	r3, [pc, #284]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d119      	bne.n	8002b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e07f      	b.n	8002bea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d003      	beq.n	8002afa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002af6:	2b03      	cmp	r3, #3
 8002af8:	d107      	bne.n	8002b0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002afa:	4b3f      	ldr	r3, [pc, #252]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d109      	bne.n	8002b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e06f      	b.n	8002bea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b0a:	4b3b      	ldr	r3, [pc, #236]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d101      	bne.n	8002b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e067      	b.n	8002bea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b1a:	4b37      	ldr	r3, [pc, #220]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f023 0203 	bic.w	r2, r3, #3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	4934      	ldr	r1, [pc, #208]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b2c:	f7fe fd02 	bl	8001534 <HAL_GetTick>
 8002b30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b32:	e00a      	b.n	8002b4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b34:	f7fe fcfe 	bl	8001534 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e04f      	b.n	8002bea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b4a:	4b2b      	ldr	r3, [pc, #172]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f003 020c 	and.w	r2, r3, #12
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d1eb      	bne.n	8002b34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b5c:	4b25      	ldr	r3, [pc, #148]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 030f 	and.w	r3, r3, #15
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d20c      	bcs.n	8002b84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b6a:	4b22      	ldr	r3, [pc, #136]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b6c:	683a      	ldr	r2, [r7, #0]
 8002b6e:	b2d2      	uxtb	r2, r2
 8002b70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b72:	4b20      	ldr	r3, [pc, #128]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 030f 	and.w	r3, r3, #15
 8002b7a:	683a      	ldr	r2, [r7, #0]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d001      	beq.n	8002b84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e032      	b.n	8002bea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0304 	and.w	r3, r3, #4
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d008      	beq.n	8002ba2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b90:	4b19      	ldr	r3, [pc, #100]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	4916      	ldr	r1, [pc, #88]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0308 	and.w	r3, r3, #8
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d009      	beq.n	8002bc2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bae:	4b12      	ldr	r3, [pc, #72]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	490e      	ldr	r1, [pc, #56]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bc2:	f000 f821 	bl	8002c08 <HAL_RCC_GetSysClockFreq>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	091b      	lsrs	r3, r3, #4
 8002bce:	f003 030f 	and.w	r3, r3, #15
 8002bd2:	490a      	ldr	r1, [pc, #40]	@ (8002bfc <HAL_RCC_ClockConfig+0x1c0>)
 8002bd4:	5ccb      	ldrb	r3, [r1, r3]
 8002bd6:	fa22 f303 	lsr.w	r3, r2, r3
 8002bda:	4a09      	ldr	r2, [pc, #36]	@ (8002c00 <HAL_RCC_ClockConfig+0x1c4>)
 8002bdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002bde:	4b09      	ldr	r3, [pc, #36]	@ (8002c04 <HAL_RCC_ClockConfig+0x1c8>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7fe fc62 	bl	80014ac <HAL_InitTick>

  return HAL_OK;
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3710      	adds	r7, #16
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	40023c00 	.word	0x40023c00
 8002bf8:	40023800 	.word	0x40023800
 8002bfc:	080037d8 	.word	0x080037d8
 8002c00:	20000000 	.word	0x20000000
 8002c04:	2000000c 	.word	0x2000000c

08002c08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c0c:	b094      	sub	sp, #80	@ 0x50
 8002c0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c10:	2300      	movs	r3, #0
 8002c12:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c14:	2300      	movs	r3, #0
 8002c16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c18:	2300      	movs	r3, #0
 8002c1a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c20:	4b79      	ldr	r3, [pc, #484]	@ (8002e08 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f003 030c 	and.w	r3, r3, #12
 8002c28:	2b08      	cmp	r3, #8
 8002c2a:	d00d      	beq.n	8002c48 <HAL_RCC_GetSysClockFreq+0x40>
 8002c2c:	2b08      	cmp	r3, #8
 8002c2e:	f200 80e1 	bhi.w	8002df4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d002      	beq.n	8002c3c <HAL_RCC_GetSysClockFreq+0x34>
 8002c36:	2b04      	cmp	r3, #4
 8002c38:	d003      	beq.n	8002c42 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c3a:	e0db      	b.n	8002df4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c3c:	4b73      	ldr	r3, [pc, #460]	@ (8002e0c <HAL_RCC_GetSysClockFreq+0x204>)
 8002c3e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002c40:	e0db      	b.n	8002dfa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c42:	4b73      	ldr	r3, [pc, #460]	@ (8002e10 <HAL_RCC_GetSysClockFreq+0x208>)
 8002c44:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c46:	e0d8      	b.n	8002dfa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c48:	4b6f      	ldr	r3, [pc, #444]	@ (8002e08 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c50:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c52:	4b6d      	ldr	r3, [pc, #436]	@ (8002e08 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d063      	beq.n	8002d26 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c5e:	4b6a      	ldr	r3, [pc, #424]	@ (8002e08 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	099b      	lsrs	r3, r3, #6
 8002c64:	2200      	movs	r2, #0
 8002c66:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c68:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002c6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c70:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c72:	2300      	movs	r3, #0
 8002c74:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c76:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002c7a:	4622      	mov	r2, r4
 8002c7c:	462b      	mov	r3, r5
 8002c7e:	f04f 0000 	mov.w	r0, #0
 8002c82:	f04f 0100 	mov.w	r1, #0
 8002c86:	0159      	lsls	r1, r3, #5
 8002c88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c8c:	0150      	lsls	r0, r2, #5
 8002c8e:	4602      	mov	r2, r0
 8002c90:	460b      	mov	r3, r1
 8002c92:	4621      	mov	r1, r4
 8002c94:	1a51      	subs	r1, r2, r1
 8002c96:	6139      	str	r1, [r7, #16]
 8002c98:	4629      	mov	r1, r5
 8002c9a:	eb63 0301 	sbc.w	r3, r3, r1
 8002c9e:	617b      	str	r3, [r7, #20]
 8002ca0:	f04f 0200 	mov.w	r2, #0
 8002ca4:	f04f 0300 	mov.w	r3, #0
 8002ca8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002cac:	4659      	mov	r1, fp
 8002cae:	018b      	lsls	r3, r1, #6
 8002cb0:	4651      	mov	r1, sl
 8002cb2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cb6:	4651      	mov	r1, sl
 8002cb8:	018a      	lsls	r2, r1, #6
 8002cba:	4651      	mov	r1, sl
 8002cbc:	ebb2 0801 	subs.w	r8, r2, r1
 8002cc0:	4659      	mov	r1, fp
 8002cc2:	eb63 0901 	sbc.w	r9, r3, r1
 8002cc6:	f04f 0200 	mov.w	r2, #0
 8002cca:	f04f 0300 	mov.w	r3, #0
 8002cce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cd2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cd6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cda:	4690      	mov	r8, r2
 8002cdc:	4699      	mov	r9, r3
 8002cde:	4623      	mov	r3, r4
 8002ce0:	eb18 0303 	adds.w	r3, r8, r3
 8002ce4:	60bb      	str	r3, [r7, #8]
 8002ce6:	462b      	mov	r3, r5
 8002ce8:	eb49 0303 	adc.w	r3, r9, r3
 8002cec:	60fb      	str	r3, [r7, #12]
 8002cee:	f04f 0200 	mov.w	r2, #0
 8002cf2:	f04f 0300 	mov.w	r3, #0
 8002cf6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002cfa:	4629      	mov	r1, r5
 8002cfc:	024b      	lsls	r3, r1, #9
 8002cfe:	4621      	mov	r1, r4
 8002d00:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d04:	4621      	mov	r1, r4
 8002d06:	024a      	lsls	r2, r1, #9
 8002d08:	4610      	mov	r0, r2
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d0e:	2200      	movs	r2, #0
 8002d10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d14:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002d18:	f7fd fa68 	bl	80001ec <__aeabi_uldivmod>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	460b      	mov	r3, r1
 8002d20:	4613      	mov	r3, r2
 8002d22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d24:	e058      	b.n	8002dd8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d26:	4b38      	ldr	r3, [pc, #224]	@ (8002e08 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	099b      	lsrs	r3, r3, #6
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	4618      	mov	r0, r3
 8002d30:	4611      	mov	r1, r2
 8002d32:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d36:	623b      	str	r3, [r7, #32]
 8002d38:	2300      	movs	r3, #0
 8002d3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d3c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d40:	4642      	mov	r2, r8
 8002d42:	464b      	mov	r3, r9
 8002d44:	f04f 0000 	mov.w	r0, #0
 8002d48:	f04f 0100 	mov.w	r1, #0
 8002d4c:	0159      	lsls	r1, r3, #5
 8002d4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d52:	0150      	lsls	r0, r2, #5
 8002d54:	4602      	mov	r2, r0
 8002d56:	460b      	mov	r3, r1
 8002d58:	4641      	mov	r1, r8
 8002d5a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d5e:	4649      	mov	r1, r9
 8002d60:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d64:	f04f 0200 	mov.w	r2, #0
 8002d68:	f04f 0300 	mov.w	r3, #0
 8002d6c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d70:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d74:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d78:	ebb2 040a 	subs.w	r4, r2, sl
 8002d7c:	eb63 050b 	sbc.w	r5, r3, fp
 8002d80:	f04f 0200 	mov.w	r2, #0
 8002d84:	f04f 0300 	mov.w	r3, #0
 8002d88:	00eb      	lsls	r3, r5, #3
 8002d8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d8e:	00e2      	lsls	r2, r4, #3
 8002d90:	4614      	mov	r4, r2
 8002d92:	461d      	mov	r5, r3
 8002d94:	4643      	mov	r3, r8
 8002d96:	18e3      	adds	r3, r4, r3
 8002d98:	603b      	str	r3, [r7, #0]
 8002d9a:	464b      	mov	r3, r9
 8002d9c:	eb45 0303 	adc.w	r3, r5, r3
 8002da0:	607b      	str	r3, [r7, #4]
 8002da2:	f04f 0200 	mov.w	r2, #0
 8002da6:	f04f 0300 	mov.w	r3, #0
 8002daa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002dae:	4629      	mov	r1, r5
 8002db0:	028b      	lsls	r3, r1, #10
 8002db2:	4621      	mov	r1, r4
 8002db4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002db8:	4621      	mov	r1, r4
 8002dba:	028a      	lsls	r2, r1, #10
 8002dbc:	4610      	mov	r0, r2
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	61bb      	str	r3, [r7, #24]
 8002dc6:	61fa      	str	r2, [r7, #28]
 8002dc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002dcc:	f7fd fa0e 	bl	80001ec <__aeabi_uldivmod>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002dd8:	4b0b      	ldr	r3, [pc, #44]	@ (8002e08 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	0c1b      	lsrs	r3, r3, #16
 8002dde:	f003 0303 	and.w	r3, r3, #3
 8002de2:	3301      	adds	r3, #1
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002de8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002dea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002df0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002df2:	e002      	b.n	8002dfa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002df4:	4b05      	ldr	r3, [pc, #20]	@ (8002e0c <HAL_RCC_GetSysClockFreq+0x204>)
 8002df6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002df8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dfa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3750      	adds	r7, #80	@ 0x50
 8002e00:	46bd      	mov	sp, r7
 8002e02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e06:	bf00      	nop
 8002e08:	40023800 	.word	0x40023800
 8002e0c:	00f42400 	.word	0x00f42400
 8002e10:	007a1200 	.word	0x007a1200

08002e14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e18:	4b03      	ldr	r3, [pc, #12]	@ (8002e28 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	20000000 	.word	0x20000000

08002e2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e30:	f7ff fff0 	bl	8002e14 <HAL_RCC_GetHCLKFreq>
 8002e34:	4602      	mov	r2, r0
 8002e36:	4b05      	ldr	r3, [pc, #20]	@ (8002e4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	0a9b      	lsrs	r3, r3, #10
 8002e3c:	f003 0307 	and.w	r3, r3, #7
 8002e40:	4903      	ldr	r1, [pc, #12]	@ (8002e50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e42:	5ccb      	ldrb	r3, [r1, r3]
 8002e44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	40023800 	.word	0x40023800
 8002e50:	080037e8 	.word	0x080037e8

08002e54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e58:	f7ff ffdc 	bl	8002e14 <HAL_RCC_GetHCLKFreq>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	4b05      	ldr	r3, [pc, #20]	@ (8002e74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	0b5b      	lsrs	r3, r3, #13
 8002e64:	f003 0307 	and.w	r3, r3, #7
 8002e68:	4903      	ldr	r1, [pc, #12]	@ (8002e78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e6a:	5ccb      	ldrb	r3, [r1, r3]
 8002e6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	40023800 	.word	0x40023800
 8002e78:	080037e8 	.word	0x080037e8

08002e7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e042      	b.n	8002f14 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d106      	bne.n	8002ea8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f7fd fc6e 	bl	8000784 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2224      	movs	r2, #36	@ 0x24
 8002eac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68da      	ldr	r2, [r3, #12]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002ebe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f000 f973 	bl	80031ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	691a      	ldr	r2, [r3, #16]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002ed4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	695a      	ldr	r2, [r3, #20]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002ee4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	68da      	ldr	r2, [r3, #12]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002ef4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2220      	movs	r2, #32
 8002f00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2220      	movs	r2, #32
 8002f08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3708      	adds	r7, #8
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b08a      	sub	sp, #40	@ 0x28
 8002f20:	af02      	add	r7, sp, #8
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	603b      	str	r3, [r7, #0]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	2b20      	cmp	r3, #32
 8002f3a:	d175      	bne.n	8003028 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d002      	beq.n	8002f48 <HAL_UART_Transmit+0x2c>
 8002f42:	88fb      	ldrh	r3, [r7, #6]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d101      	bne.n	8002f4c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e06e      	b.n	800302a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2221      	movs	r2, #33	@ 0x21
 8002f56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f5a:	f7fe faeb 	bl	8001534 <HAL_GetTick>
 8002f5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	88fa      	ldrh	r2, [r7, #6]
 8002f64:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	88fa      	ldrh	r2, [r7, #6]
 8002f6a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f74:	d108      	bne.n	8002f88 <HAL_UART_Transmit+0x6c>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d104      	bne.n	8002f88 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	61bb      	str	r3, [r7, #24]
 8002f86:	e003      	b.n	8002f90 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f90:	e02e      	b.n	8002ff0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	9300      	str	r3, [sp, #0]
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	2180      	movs	r1, #128	@ 0x80
 8002f9c:	68f8      	ldr	r0, [r7, #12]
 8002f9e:	f000 f848 	bl	8003032 <UART_WaitOnFlagUntilTimeout>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d005      	beq.n	8002fb4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2220      	movs	r2, #32
 8002fac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e03a      	b.n	800302a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d10b      	bne.n	8002fd2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	881b      	ldrh	r3, [r3, #0]
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fc8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	3302      	adds	r3, #2
 8002fce:	61bb      	str	r3, [r7, #24]
 8002fd0:	e007      	b.n	8002fe2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	781a      	ldrb	r2, [r3, #0]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	3301      	adds	r3, #1
 8002fe0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	3b01      	subs	r3, #1
 8002fea:	b29a      	uxth	r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d1cb      	bne.n	8002f92 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	9300      	str	r3, [sp, #0]
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	2200      	movs	r2, #0
 8003002:	2140      	movs	r1, #64	@ 0x40
 8003004:	68f8      	ldr	r0, [r7, #12]
 8003006:	f000 f814 	bl	8003032 <UART_WaitOnFlagUntilTimeout>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d005      	beq.n	800301c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2220      	movs	r2, #32
 8003014:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e006      	b.n	800302a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2220      	movs	r2, #32
 8003020:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003024:	2300      	movs	r3, #0
 8003026:	e000      	b.n	800302a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003028:	2302      	movs	r3, #2
  }
}
 800302a:	4618      	mov	r0, r3
 800302c:	3720      	adds	r7, #32
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003032:	b580      	push	{r7, lr}
 8003034:	b086      	sub	sp, #24
 8003036:	af00      	add	r7, sp, #0
 8003038:	60f8      	str	r0, [r7, #12]
 800303a:	60b9      	str	r1, [r7, #8]
 800303c:	603b      	str	r3, [r7, #0]
 800303e:	4613      	mov	r3, r2
 8003040:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003042:	e03b      	b.n	80030bc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003044:	6a3b      	ldr	r3, [r7, #32]
 8003046:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800304a:	d037      	beq.n	80030bc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800304c:	f7fe fa72 	bl	8001534 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	6a3a      	ldr	r2, [r7, #32]
 8003058:	429a      	cmp	r2, r3
 800305a:	d302      	bcc.n	8003062 <UART_WaitOnFlagUntilTimeout+0x30>
 800305c:	6a3b      	ldr	r3, [r7, #32]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d101      	bne.n	8003066 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e03a      	b.n	80030dc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	f003 0304 	and.w	r3, r3, #4
 8003070:	2b00      	cmp	r3, #0
 8003072:	d023      	beq.n	80030bc <UART_WaitOnFlagUntilTimeout+0x8a>
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	2b80      	cmp	r3, #128	@ 0x80
 8003078:	d020      	beq.n	80030bc <UART_WaitOnFlagUntilTimeout+0x8a>
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	2b40      	cmp	r3, #64	@ 0x40
 800307e:	d01d      	beq.n	80030bc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0308 	and.w	r3, r3, #8
 800308a:	2b08      	cmp	r3, #8
 800308c:	d116      	bne.n	80030bc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800308e:	2300      	movs	r3, #0
 8003090:	617b      	str	r3, [r7, #20]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	617b      	str	r3, [r7, #20]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	617b      	str	r3, [r7, #20]
 80030a2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80030a4:	68f8      	ldr	r0, [r7, #12]
 80030a6:	f000 f81d 	bl	80030e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2208      	movs	r2, #8
 80030ae:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e00f      	b.n	80030dc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	4013      	ands	r3, r2
 80030c6:	68ba      	ldr	r2, [r7, #8]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	bf0c      	ite	eq
 80030cc:	2301      	moveq	r3, #1
 80030ce:	2300      	movne	r3, #0
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	461a      	mov	r2, r3
 80030d4:	79fb      	ldrb	r3, [r7, #7]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d0b4      	beq.n	8003044 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80030da:	2300      	movs	r3, #0
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3718      	adds	r7, #24
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b095      	sub	sp, #84	@ 0x54
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	330c      	adds	r3, #12
 80030f2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030f6:	e853 3f00 	ldrex	r3, [r3]
 80030fa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80030fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003102:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	330c      	adds	r3, #12
 800310a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800310c:	643a      	str	r2, [r7, #64]	@ 0x40
 800310e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003110:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003112:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003114:	e841 2300 	strex	r3, r2, [r1]
 8003118:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800311a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1e5      	bne.n	80030ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	3314      	adds	r3, #20
 8003126:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003128:	6a3b      	ldr	r3, [r7, #32]
 800312a:	e853 3f00 	ldrex	r3, [r3]
 800312e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	f023 0301 	bic.w	r3, r3, #1
 8003136:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	3314      	adds	r3, #20
 800313e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003140:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003142:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003144:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003146:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003148:	e841 2300 	strex	r3, r2, [r1]
 800314c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800314e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003150:	2b00      	cmp	r3, #0
 8003152:	d1e5      	bne.n	8003120 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003158:	2b01      	cmp	r3, #1
 800315a:	d119      	bne.n	8003190 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	330c      	adds	r3, #12
 8003162:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	e853 3f00 	ldrex	r3, [r3]
 800316a:	60bb      	str	r3, [r7, #8]
   return(result);
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	f023 0310 	bic.w	r3, r3, #16
 8003172:	647b      	str	r3, [r7, #68]	@ 0x44
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	330c      	adds	r3, #12
 800317a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800317c:	61ba      	str	r2, [r7, #24]
 800317e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003180:	6979      	ldr	r1, [r7, #20]
 8003182:	69ba      	ldr	r2, [r7, #24]
 8003184:	e841 2300 	strex	r3, r2, [r1]
 8003188:	613b      	str	r3, [r7, #16]
   return(result);
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d1e5      	bne.n	800315c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2220      	movs	r2, #32
 8003194:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800319e:	bf00      	nop
 80031a0:	3754      	adds	r7, #84	@ 0x54
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
	...

080031ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031b0:	b0c0      	sub	sp, #256	@ 0x100
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80031c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031c8:	68d9      	ldr	r1, [r3, #12]
 80031ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	ea40 0301 	orr.w	r3, r0, r1
 80031d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80031d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031da:	689a      	ldr	r2, [r3, #8]
 80031dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	431a      	orrs	r2, r3
 80031e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031e8:	695b      	ldr	r3, [r3, #20]
 80031ea:	431a      	orrs	r2, r3
 80031ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031f0:	69db      	ldr	r3, [r3, #28]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80031f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003204:	f021 010c 	bic.w	r1, r1, #12
 8003208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003212:	430b      	orrs	r3, r1
 8003214:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003226:	6999      	ldr	r1, [r3, #24]
 8003228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	ea40 0301 	orr.w	r3, r0, r1
 8003232:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	4b8f      	ldr	r3, [pc, #572]	@ (8003478 <UART_SetConfig+0x2cc>)
 800323c:	429a      	cmp	r2, r3
 800323e:	d005      	beq.n	800324c <UART_SetConfig+0xa0>
 8003240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	4b8d      	ldr	r3, [pc, #564]	@ (800347c <UART_SetConfig+0x2d0>)
 8003248:	429a      	cmp	r2, r3
 800324a:	d104      	bne.n	8003256 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800324c:	f7ff fe02 	bl	8002e54 <HAL_RCC_GetPCLK2Freq>
 8003250:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003254:	e003      	b.n	800325e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003256:	f7ff fde9 	bl	8002e2c <HAL_RCC_GetPCLK1Freq>
 800325a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800325e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003262:	69db      	ldr	r3, [r3, #28]
 8003264:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003268:	f040 810c 	bne.w	8003484 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800326c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003270:	2200      	movs	r2, #0
 8003272:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003276:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800327a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800327e:	4622      	mov	r2, r4
 8003280:	462b      	mov	r3, r5
 8003282:	1891      	adds	r1, r2, r2
 8003284:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003286:	415b      	adcs	r3, r3
 8003288:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800328a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800328e:	4621      	mov	r1, r4
 8003290:	eb12 0801 	adds.w	r8, r2, r1
 8003294:	4629      	mov	r1, r5
 8003296:	eb43 0901 	adc.w	r9, r3, r1
 800329a:	f04f 0200 	mov.w	r2, #0
 800329e:	f04f 0300 	mov.w	r3, #0
 80032a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032ae:	4690      	mov	r8, r2
 80032b0:	4699      	mov	r9, r3
 80032b2:	4623      	mov	r3, r4
 80032b4:	eb18 0303 	adds.w	r3, r8, r3
 80032b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80032bc:	462b      	mov	r3, r5
 80032be:	eb49 0303 	adc.w	r3, r9, r3
 80032c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80032c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80032d2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80032d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80032da:	460b      	mov	r3, r1
 80032dc:	18db      	adds	r3, r3, r3
 80032de:	653b      	str	r3, [r7, #80]	@ 0x50
 80032e0:	4613      	mov	r3, r2
 80032e2:	eb42 0303 	adc.w	r3, r2, r3
 80032e6:	657b      	str	r3, [r7, #84]	@ 0x54
 80032e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80032ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80032f0:	f7fc ff7c 	bl	80001ec <__aeabi_uldivmod>
 80032f4:	4602      	mov	r2, r0
 80032f6:	460b      	mov	r3, r1
 80032f8:	4b61      	ldr	r3, [pc, #388]	@ (8003480 <UART_SetConfig+0x2d4>)
 80032fa:	fba3 2302 	umull	r2, r3, r3, r2
 80032fe:	095b      	lsrs	r3, r3, #5
 8003300:	011c      	lsls	r4, r3, #4
 8003302:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003306:	2200      	movs	r2, #0
 8003308:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800330c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003310:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003314:	4642      	mov	r2, r8
 8003316:	464b      	mov	r3, r9
 8003318:	1891      	adds	r1, r2, r2
 800331a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800331c:	415b      	adcs	r3, r3
 800331e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003320:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003324:	4641      	mov	r1, r8
 8003326:	eb12 0a01 	adds.w	sl, r2, r1
 800332a:	4649      	mov	r1, r9
 800332c:	eb43 0b01 	adc.w	fp, r3, r1
 8003330:	f04f 0200 	mov.w	r2, #0
 8003334:	f04f 0300 	mov.w	r3, #0
 8003338:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800333c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003340:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003344:	4692      	mov	sl, r2
 8003346:	469b      	mov	fp, r3
 8003348:	4643      	mov	r3, r8
 800334a:	eb1a 0303 	adds.w	r3, sl, r3
 800334e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003352:	464b      	mov	r3, r9
 8003354:	eb4b 0303 	adc.w	r3, fp, r3
 8003358:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800335c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003368:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800336c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003370:	460b      	mov	r3, r1
 8003372:	18db      	adds	r3, r3, r3
 8003374:	643b      	str	r3, [r7, #64]	@ 0x40
 8003376:	4613      	mov	r3, r2
 8003378:	eb42 0303 	adc.w	r3, r2, r3
 800337c:	647b      	str	r3, [r7, #68]	@ 0x44
 800337e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003382:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003386:	f7fc ff31 	bl	80001ec <__aeabi_uldivmod>
 800338a:	4602      	mov	r2, r0
 800338c:	460b      	mov	r3, r1
 800338e:	4611      	mov	r1, r2
 8003390:	4b3b      	ldr	r3, [pc, #236]	@ (8003480 <UART_SetConfig+0x2d4>)
 8003392:	fba3 2301 	umull	r2, r3, r3, r1
 8003396:	095b      	lsrs	r3, r3, #5
 8003398:	2264      	movs	r2, #100	@ 0x64
 800339a:	fb02 f303 	mul.w	r3, r2, r3
 800339e:	1acb      	subs	r3, r1, r3
 80033a0:	00db      	lsls	r3, r3, #3
 80033a2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80033a6:	4b36      	ldr	r3, [pc, #216]	@ (8003480 <UART_SetConfig+0x2d4>)
 80033a8:	fba3 2302 	umull	r2, r3, r3, r2
 80033ac:	095b      	lsrs	r3, r3, #5
 80033ae:	005b      	lsls	r3, r3, #1
 80033b0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80033b4:	441c      	add	r4, r3
 80033b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033ba:	2200      	movs	r2, #0
 80033bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80033c0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80033c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80033c8:	4642      	mov	r2, r8
 80033ca:	464b      	mov	r3, r9
 80033cc:	1891      	adds	r1, r2, r2
 80033ce:	63b9      	str	r1, [r7, #56]	@ 0x38
 80033d0:	415b      	adcs	r3, r3
 80033d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80033d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80033d8:	4641      	mov	r1, r8
 80033da:	1851      	adds	r1, r2, r1
 80033dc:	6339      	str	r1, [r7, #48]	@ 0x30
 80033de:	4649      	mov	r1, r9
 80033e0:	414b      	adcs	r3, r1
 80033e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80033e4:	f04f 0200 	mov.w	r2, #0
 80033e8:	f04f 0300 	mov.w	r3, #0
 80033ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80033f0:	4659      	mov	r1, fp
 80033f2:	00cb      	lsls	r3, r1, #3
 80033f4:	4651      	mov	r1, sl
 80033f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033fa:	4651      	mov	r1, sl
 80033fc:	00ca      	lsls	r2, r1, #3
 80033fe:	4610      	mov	r0, r2
 8003400:	4619      	mov	r1, r3
 8003402:	4603      	mov	r3, r0
 8003404:	4642      	mov	r2, r8
 8003406:	189b      	adds	r3, r3, r2
 8003408:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800340c:	464b      	mov	r3, r9
 800340e:	460a      	mov	r2, r1
 8003410:	eb42 0303 	adc.w	r3, r2, r3
 8003414:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003424:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003428:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800342c:	460b      	mov	r3, r1
 800342e:	18db      	adds	r3, r3, r3
 8003430:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003432:	4613      	mov	r3, r2
 8003434:	eb42 0303 	adc.w	r3, r2, r3
 8003438:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800343a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800343e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003442:	f7fc fed3 	bl	80001ec <__aeabi_uldivmod>
 8003446:	4602      	mov	r2, r0
 8003448:	460b      	mov	r3, r1
 800344a:	4b0d      	ldr	r3, [pc, #52]	@ (8003480 <UART_SetConfig+0x2d4>)
 800344c:	fba3 1302 	umull	r1, r3, r3, r2
 8003450:	095b      	lsrs	r3, r3, #5
 8003452:	2164      	movs	r1, #100	@ 0x64
 8003454:	fb01 f303 	mul.w	r3, r1, r3
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	00db      	lsls	r3, r3, #3
 800345c:	3332      	adds	r3, #50	@ 0x32
 800345e:	4a08      	ldr	r2, [pc, #32]	@ (8003480 <UART_SetConfig+0x2d4>)
 8003460:	fba2 2303 	umull	r2, r3, r2, r3
 8003464:	095b      	lsrs	r3, r3, #5
 8003466:	f003 0207 	and.w	r2, r3, #7
 800346a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4422      	add	r2, r4
 8003472:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003474:	e106      	b.n	8003684 <UART_SetConfig+0x4d8>
 8003476:	bf00      	nop
 8003478:	40011000 	.word	0x40011000
 800347c:	40011400 	.word	0x40011400
 8003480:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003484:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003488:	2200      	movs	r2, #0
 800348a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800348e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003492:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003496:	4642      	mov	r2, r8
 8003498:	464b      	mov	r3, r9
 800349a:	1891      	adds	r1, r2, r2
 800349c:	6239      	str	r1, [r7, #32]
 800349e:	415b      	adcs	r3, r3
 80034a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80034a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80034a6:	4641      	mov	r1, r8
 80034a8:	1854      	adds	r4, r2, r1
 80034aa:	4649      	mov	r1, r9
 80034ac:	eb43 0501 	adc.w	r5, r3, r1
 80034b0:	f04f 0200 	mov.w	r2, #0
 80034b4:	f04f 0300 	mov.w	r3, #0
 80034b8:	00eb      	lsls	r3, r5, #3
 80034ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034be:	00e2      	lsls	r2, r4, #3
 80034c0:	4614      	mov	r4, r2
 80034c2:	461d      	mov	r5, r3
 80034c4:	4643      	mov	r3, r8
 80034c6:	18e3      	adds	r3, r4, r3
 80034c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80034cc:	464b      	mov	r3, r9
 80034ce:	eb45 0303 	adc.w	r3, r5, r3
 80034d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80034d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80034e2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80034e6:	f04f 0200 	mov.w	r2, #0
 80034ea:	f04f 0300 	mov.w	r3, #0
 80034ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80034f2:	4629      	mov	r1, r5
 80034f4:	008b      	lsls	r3, r1, #2
 80034f6:	4621      	mov	r1, r4
 80034f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034fc:	4621      	mov	r1, r4
 80034fe:	008a      	lsls	r2, r1, #2
 8003500:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003504:	f7fc fe72 	bl	80001ec <__aeabi_uldivmod>
 8003508:	4602      	mov	r2, r0
 800350a:	460b      	mov	r3, r1
 800350c:	4b60      	ldr	r3, [pc, #384]	@ (8003690 <UART_SetConfig+0x4e4>)
 800350e:	fba3 2302 	umull	r2, r3, r3, r2
 8003512:	095b      	lsrs	r3, r3, #5
 8003514:	011c      	lsls	r4, r3, #4
 8003516:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800351a:	2200      	movs	r2, #0
 800351c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003520:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003524:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003528:	4642      	mov	r2, r8
 800352a:	464b      	mov	r3, r9
 800352c:	1891      	adds	r1, r2, r2
 800352e:	61b9      	str	r1, [r7, #24]
 8003530:	415b      	adcs	r3, r3
 8003532:	61fb      	str	r3, [r7, #28]
 8003534:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003538:	4641      	mov	r1, r8
 800353a:	1851      	adds	r1, r2, r1
 800353c:	6139      	str	r1, [r7, #16]
 800353e:	4649      	mov	r1, r9
 8003540:	414b      	adcs	r3, r1
 8003542:	617b      	str	r3, [r7, #20]
 8003544:	f04f 0200 	mov.w	r2, #0
 8003548:	f04f 0300 	mov.w	r3, #0
 800354c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003550:	4659      	mov	r1, fp
 8003552:	00cb      	lsls	r3, r1, #3
 8003554:	4651      	mov	r1, sl
 8003556:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800355a:	4651      	mov	r1, sl
 800355c:	00ca      	lsls	r2, r1, #3
 800355e:	4610      	mov	r0, r2
 8003560:	4619      	mov	r1, r3
 8003562:	4603      	mov	r3, r0
 8003564:	4642      	mov	r2, r8
 8003566:	189b      	adds	r3, r3, r2
 8003568:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800356c:	464b      	mov	r3, r9
 800356e:	460a      	mov	r2, r1
 8003570:	eb42 0303 	adc.w	r3, r2, r3
 8003574:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003582:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003584:	f04f 0200 	mov.w	r2, #0
 8003588:	f04f 0300 	mov.w	r3, #0
 800358c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003590:	4649      	mov	r1, r9
 8003592:	008b      	lsls	r3, r1, #2
 8003594:	4641      	mov	r1, r8
 8003596:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800359a:	4641      	mov	r1, r8
 800359c:	008a      	lsls	r2, r1, #2
 800359e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80035a2:	f7fc fe23 	bl	80001ec <__aeabi_uldivmod>
 80035a6:	4602      	mov	r2, r0
 80035a8:	460b      	mov	r3, r1
 80035aa:	4611      	mov	r1, r2
 80035ac:	4b38      	ldr	r3, [pc, #224]	@ (8003690 <UART_SetConfig+0x4e4>)
 80035ae:	fba3 2301 	umull	r2, r3, r3, r1
 80035b2:	095b      	lsrs	r3, r3, #5
 80035b4:	2264      	movs	r2, #100	@ 0x64
 80035b6:	fb02 f303 	mul.w	r3, r2, r3
 80035ba:	1acb      	subs	r3, r1, r3
 80035bc:	011b      	lsls	r3, r3, #4
 80035be:	3332      	adds	r3, #50	@ 0x32
 80035c0:	4a33      	ldr	r2, [pc, #204]	@ (8003690 <UART_SetConfig+0x4e4>)
 80035c2:	fba2 2303 	umull	r2, r3, r2, r3
 80035c6:	095b      	lsrs	r3, r3, #5
 80035c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035cc:	441c      	add	r4, r3
 80035ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035d2:	2200      	movs	r2, #0
 80035d4:	673b      	str	r3, [r7, #112]	@ 0x70
 80035d6:	677a      	str	r2, [r7, #116]	@ 0x74
 80035d8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80035dc:	4642      	mov	r2, r8
 80035de:	464b      	mov	r3, r9
 80035e0:	1891      	adds	r1, r2, r2
 80035e2:	60b9      	str	r1, [r7, #8]
 80035e4:	415b      	adcs	r3, r3
 80035e6:	60fb      	str	r3, [r7, #12]
 80035e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035ec:	4641      	mov	r1, r8
 80035ee:	1851      	adds	r1, r2, r1
 80035f0:	6039      	str	r1, [r7, #0]
 80035f2:	4649      	mov	r1, r9
 80035f4:	414b      	adcs	r3, r1
 80035f6:	607b      	str	r3, [r7, #4]
 80035f8:	f04f 0200 	mov.w	r2, #0
 80035fc:	f04f 0300 	mov.w	r3, #0
 8003600:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003604:	4659      	mov	r1, fp
 8003606:	00cb      	lsls	r3, r1, #3
 8003608:	4651      	mov	r1, sl
 800360a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800360e:	4651      	mov	r1, sl
 8003610:	00ca      	lsls	r2, r1, #3
 8003612:	4610      	mov	r0, r2
 8003614:	4619      	mov	r1, r3
 8003616:	4603      	mov	r3, r0
 8003618:	4642      	mov	r2, r8
 800361a:	189b      	adds	r3, r3, r2
 800361c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800361e:	464b      	mov	r3, r9
 8003620:	460a      	mov	r2, r1
 8003622:	eb42 0303 	adc.w	r3, r2, r3
 8003626:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	663b      	str	r3, [r7, #96]	@ 0x60
 8003632:	667a      	str	r2, [r7, #100]	@ 0x64
 8003634:	f04f 0200 	mov.w	r2, #0
 8003638:	f04f 0300 	mov.w	r3, #0
 800363c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003640:	4649      	mov	r1, r9
 8003642:	008b      	lsls	r3, r1, #2
 8003644:	4641      	mov	r1, r8
 8003646:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800364a:	4641      	mov	r1, r8
 800364c:	008a      	lsls	r2, r1, #2
 800364e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003652:	f7fc fdcb 	bl	80001ec <__aeabi_uldivmod>
 8003656:	4602      	mov	r2, r0
 8003658:	460b      	mov	r3, r1
 800365a:	4b0d      	ldr	r3, [pc, #52]	@ (8003690 <UART_SetConfig+0x4e4>)
 800365c:	fba3 1302 	umull	r1, r3, r3, r2
 8003660:	095b      	lsrs	r3, r3, #5
 8003662:	2164      	movs	r1, #100	@ 0x64
 8003664:	fb01 f303 	mul.w	r3, r1, r3
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	011b      	lsls	r3, r3, #4
 800366c:	3332      	adds	r3, #50	@ 0x32
 800366e:	4a08      	ldr	r2, [pc, #32]	@ (8003690 <UART_SetConfig+0x4e4>)
 8003670:	fba2 2303 	umull	r2, r3, r2, r3
 8003674:	095b      	lsrs	r3, r3, #5
 8003676:	f003 020f 	and.w	r2, r3, #15
 800367a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4422      	add	r2, r4
 8003682:	609a      	str	r2, [r3, #8]
}
 8003684:	bf00      	nop
 8003686:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800368a:	46bd      	mov	sp, r7
 800368c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003690:	51eb851f 	.word	0x51eb851f

08003694 <memset>:
 8003694:	4402      	add	r2, r0
 8003696:	4603      	mov	r3, r0
 8003698:	4293      	cmp	r3, r2
 800369a:	d100      	bne.n	800369e <memset+0xa>
 800369c:	4770      	bx	lr
 800369e:	f803 1b01 	strb.w	r1, [r3], #1
 80036a2:	e7f9      	b.n	8003698 <memset+0x4>

080036a4 <__libc_init_array>:
 80036a4:	b570      	push	{r4, r5, r6, lr}
 80036a6:	4d0d      	ldr	r5, [pc, #52]	@ (80036dc <__libc_init_array+0x38>)
 80036a8:	4c0d      	ldr	r4, [pc, #52]	@ (80036e0 <__libc_init_array+0x3c>)
 80036aa:	1b64      	subs	r4, r4, r5
 80036ac:	10a4      	asrs	r4, r4, #2
 80036ae:	2600      	movs	r6, #0
 80036b0:	42a6      	cmp	r6, r4
 80036b2:	d109      	bne.n	80036c8 <__libc_init_array+0x24>
 80036b4:	4d0b      	ldr	r5, [pc, #44]	@ (80036e4 <__libc_init_array+0x40>)
 80036b6:	4c0c      	ldr	r4, [pc, #48]	@ (80036e8 <__libc_init_array+0x44>)
 80036b8:	f000 f818 	bl	80036ec <_init>
 80036bc:	1b64      	subs	r4, r4, r5
 80036be:	10a4      	asrs	r4, r4, #2
 80036c0:	2600      	movs	r6, #0
 80036c2:	42a6      	cmp	r6, r4
 80036c4:	d105      	bne.n	80036d2 <__libc_init_array+0x2e>
 80036c6:	bd70      	pop	{r4, r5, r6, pc}
 80036c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80036cc:	4798      	blx	r3
 80036ce:	3601      	adds	r6, #1
 80036d0:	e7ee      	b.n	80036b0 <__libc_init_array+0xc>
 80036d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80036d6:	4798      	blx	r3
 80036d8:	3601      	adds	r6, #1
 80036da:	e7f2      	b.n	80036c2 <__libc_init_array+0x1e>
 80036dc:	080037f8 	.word	0x080037f8
 80036e0:	080037f8 	.word	0x080037f8
 80036e4:	080037f8 	.word	0x080037f8
 80036e8:	080037fc 	.word	0x080037fc

080036ec <_init>:
 80036ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ee:	bf00      	nop
 80036f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036f2:	bc08      	pop	{r3}
 80036f4:	469e      	mov	lr, r3
 80036f6:	4770      	bx	lr

080036f8 <_fini>:
 80036f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036fa:	bf00      	nop
 80036fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036fe:	bc08      	pop	{r3}
 8003700:	469e      	mov	lr, r3
 8003702:	4770      	bx	lr
