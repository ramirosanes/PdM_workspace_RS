
Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003368  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08003514  08003514  00004514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003608  08003608  00005014  2**0
                  CONTENTS
  4 .ARM          00000008  08003608  08003608  00004608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003610  08003610  00005014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003610  08003610  00004610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003614  08003614  00004614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08003618  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005014  2**0
                  CONTENTS
 10 .bss          00000144  20000014  20000014  00005014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000158  20000158  00005014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bf32  00000000  00000000  00005044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021aa  00000000  00000000  00010f76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b60  00000000  00000000  00013120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008c7  00000000  00000000  00013c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022f5f  00000000  00000000  00014547  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e3bd  00000000  00000000  000374a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d151e  00000000  00000000  00045863  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00116d81  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002d5c  00000000  00000000  00116dc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  00119b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000014 	.word	0x20000014
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080034fc 	.word	0x080034fc

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000018 	.word	0x20000018
 80001e8:	080034fc 	.word	0x080034fc

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f000 feca 	bl	8001278 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f816 	bl	8000514 <SystemClock_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

  /* USER CODE BEGIN 2 */
  uartInit();
 80004e8:	f000 fc0c 	bl	8000d04 <uartInit>
  buttonInit();
 80004ec:	f000 fd6c 	bl	8000fc8 <buttonInit>
  lcdInit();
 80004f0:	f000 fabe 	bl	8000a70 <lcdInit>
  lcdPrintString("Bienvenidohola como estas? eee ee ajaja");
 80004f4:	4806      	ldr	r0, [pc, #24]	@ (8000510 <main+0x34>)
 80004f6:	f000 fb47 	bl	8000b88 <lcdPrintString>
  rtcInit();
 80004fa:	f000 fbc3 	bl	8000c84 <rtcInit>
  displayFSMInit();
 80004fe:	f000 fe4f 	bl	80011a0 <displayFSMInit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  buttonFSM();
 8000502:	f000 fd79 	bl	8000ff8 <buttonFSM>
	  displayFSM();
 8000506:	f000 fe97 	bl	8001238 <displayFSM>
	  buttonFSM();
 800050a:	bf00      	nop
 800050c:	e7f9      	b.n	8000502 <main+0x26>
 800050e:	bf00      	nop
 8000510:	08003518 	.word	0x08003518

08000514 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b094      	sub	sp, #80	@ 0x50
 8000518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051a:	f107 0320 	add.w	r3, r7, #32
 800051e:	2230      	movs	r2, #48	@ 0x30
 8000520:	2100      	movs	r1, #0
 8000522:	4618      	mov	r0, r3
 8000524:	f002 ffbe 	bl	80034a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000528:	f107 030c 	add.w	r3, r7, #12
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]
 8000530:	605a      	str	r2, [r3, #4]
 8000532:	609a      	str	r2, [r3, #8]
 8000534:	60da      	str	r2, [r3, #12]
 8000536:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000538:	2300      	movs	r3, #0
 800053a:	60bb      	str	r3, [r7, #8]
 800053c:	4b23      	ldr	r3, [pc, #140]	@ (80005cc <SystemClock_Config+0xb8>)
 800053e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000540:	4a22      	ldr	r2, [pc, #136]	@ (80005cc <SystemClock_Config+0xb8>)
 8000542:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000546:	6413      	str	r3, [r2, #64]	@ 0x40
 8000548:	4b20      	ldr	r3, [pc, #128]	@ (80005cc <SystemClock_Config+0xb8>)
 800054a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800054c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000550:	60bb      	str	r3, [r7, #8]
 8000552:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000554:	2300      	movs	r3, #0
 8000556:	607b      	str	r3, [r7, #4]
 8000558:	4b1d      	ldr	r3, [pc, #116]	@ (80005d0 <SystemClock_Config+0xbc>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000560:	4a1b      	ldr	r2, [pc, #108]	@ (80005d0 <SystemClock_Config+0xbc>)
 8000562:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000566:	6013      	str	r3, [r2, #0]
 8000568:	4b19      	ldr	r3, [pc, #100]	@ (80005d0 <SystemClock_Config+0xbc>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000570:	607b      	str	r3, [r7, #4]
 8000572:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000574:	2302      	movs	r3, #2
 8000576:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000578:	2301      	movs	r3, #1
 800057a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800057c:	2310      	movs	r3, #16
 800057e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000580:	2300      	movs	r3, #0
 8000582:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000584:	f107 0320 	add.w	r3, r7, #32
 8000588:	4618      	mov	r0, r3
 800058a:	f001 fee7 	bl	800235c <HAL_RCC_OscConfig>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000594:	f000 f81e 	bl	80005d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000598:	230f      	movs	r3, #15
 800059a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800059c:	2300      	movs	r3, #0
 800059e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a0:	2300      	movs	r3, #0
 80005a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005aa:	2300      	movs	r3, #0
 80005ac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005ae:	f107 030c 	add.w	r3, r7, #12
 80005b2:	2100      	movs	r1, #0
 80005b4:	4618      	mov	r0, r3
 80005b6:	f002 f949 	bl	800284c <HAL_RCC_ClockConfig>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80005c0:	f000 f808 	bl	80005d4 <Error_Handler>
  }
}
 80005c4:	bf00      	nop
 80005c6:	3750      	adds	r7, #80	@ 0x50
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	40023800 	.word	0x40023800
 80005d0:	40007000 	.word	0x40007000

080005d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	uartSendString("error nashe");
 80005d8:	4803      	ldr	r0, [pc, #12]	@ (80005e8 <Error_Handler+0x14>)
 80005da:	f000 fb9f 	bl	8000d1c <uartSendString>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005de:	b672      	cpsid	i
}
 80005e0:	bf00      	nop
  __disable_irq();
  while (1)
 80005e2:	bf00      	nop
 80005e4:	e7fd      	b.n	80005e2 <Error_Handler+0xe>
 80005e6:	bf00      	nop
 80005e8:	08003540 	.word	0x08003540

080005ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005f2:	2300      	movs	r3, #0
 80005f4:	607b      	str	r3, [r7, #4]
 80005f6:	4b10      	ldr	r3, [pc, #64]	@ (8000638 <HAL_MspInit+0x4c>)
 80005f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005fa:	4a0f      	ldr	r2, [pc, #60]	@ (8000638 <HAL_MspInit+0x4c>)
 80005fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000600:	6453      	str	r3, [r2, #68]	@ 0x44
 8000602:	4b0d      	ldr	r3, [pc, #52]	@ (8000638 <HAL_MspInit+0x4c>)
 8000604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000606:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800060e:	2300      	movs	r3, #0
 8000610:	603b      	str	r3, [r7, #0]
 8000612:	4b09      	ldr	r3, [pc, #36]	@ (8000638 <HAL_MspInit+0x4c>)
 8000614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000616:	4a08      	ldr	r2, [pc, #32]	@ (8000638 <HAL_MspInit+0x4c>)
 8000618:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800061c:	6413      	str	r3, [r2, #64]	@ 0x40
 800061e:	4b06      	ldr	r3, [pc, #24]	@ (8000638 <HAL_MspInit+0x4c>)
 8000620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000622:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000626:	603b      	str	r3, [r7, #0]
 8000628:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800062a:	bf00      	nop
 800062c:	370c      	adds	r7, #12
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	40023800 	.word	0x40023800

0800063c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b08c      	sub	sp, #48	@ 0x30
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000644:	f107 031c 	add.w	r3, r7, #28
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a3b      	ldr	r2, [pc, #236]	@ (8000748 <HAL_I2C_MspInit+0x10c>)
 800065a:	4293      	cmp	r3, r2
 800065c:	d12d      	bne.n	80006ba <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800065e:	2300      	movs	r3, #0
 8000660:	61bb      	str	r3, [r7, #24]
 8000662:	4b3a      	ldr	r3, [pc, #232]	@ (800074c <HAL_I2C_MspInit+0x110>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000666:	4a39      	ldr	r2, [pc, #228]	@ (800074c <HAL_I2C_MspInit+0x110>)
 8000668:	f043 0302 	orr.w	r3, r3, #2
 800066c:	6313      	str	r3, [r2, #48]	@ 0x30
 800066e:	4b37      	ldr	r3, [pc, #220]	@ (800074c <HAL_I2C_MspInit+0x110>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000672:	f003 0302 	and.w	r3, r3, #2
 8000676:	61bb      	str	r3, [r7, #24]
 8000678:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800067a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800067e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000680:	2312      	movs	r3, #18
 8000682:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000684:	2300      	movs	r3, #0
 8000686:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000688:	2303      	movs	r3, #3
 800068a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800068c:	2304      	movs	r3, #4
 800068e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000690:	f107 031c 	add.w	r3, r7, #28
 8000694:	4619      	mov	r1, r3
 8000696:	482e      	ldr	r0, [pc, #184]	@ (8000750 <HAL_I2C_MspInit+0x114>)
 8000698:	f000 ff6a 	bl	8001570 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800069c:	2300      	movs	r3, #0
 800069e:	617b      	str	r3, [r7, #20]
 80006a0:	4b2a      	ldr	r3, [pc, #168]	@ (800074c <HAL_I2C_MspInit+0x110>)
 80006a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006a4:	4a29      	ldr	r2, [pc, #164]	@ (800074c <HAL_I2C_MspInit+0x110>)
 80006a6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80006aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80006ac:	4b27      	ldr	r3, [pc, #156]	@ (800074c <HAL_I2C_MspInit+0x110>)
 80006ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80006b4:	617b      	str	r3, [r7, #20]
 80006b6:	697b      	ldr	r3, [r7, #20]
      __HAL_RCC_I2C2_CLK_ENABLE();
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
    }
}
 80006b8:	e042      	b.n	8000740 <HAL_I2C_MspInit+0x104>
  else if(hi2c->Instance==I2C2)
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	4a25      	ldr	r2, [pc, #148]	@ (8000754 <HAL_I2C_MspInit+0x118>)
 80006c0:	4293      	cmp	r3, r2
 80006c2:	d13d      	bne.n	8000740 <HAL_I2C_MspInit+0x104>
      __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c4:	2300      	movs	r3, #0
 80006c6:	613b      	str	r3, [r7, #16]
 80006c8:	4b20      	ldr	r3, [pc, #128]	@ (800074c <HAL_I2C_MspInit+0x110>)
 80006ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006cc:	4a1f      	ldr	r2, [pc, #124]	@ (800074c <HAL_I2C_MspInit+0x110>)
 80006ce:	f043 0302 	orr.w	r3, r3, #2
 80006d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80006d4:	4b1d      	ldr	r3, [pc, #116]	@ (800074c <HAL_I2C_MspInit+0x110>)
 80006d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d8:	f003 0302 	and.w	r3, r3, #2
 80006dc:	613b      	str	r3, [r7, #16]
 80006de:	693b      	ldr	r3, [r7, #16]
      GPIO_InitStruct.Pin = RTC_SCL_Pin;
 80006e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006e4:	61fb      	str	r3, [r7, #28]
      GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006e6:	2312      	movs	r3, #18
 80006e8:	623b      	str	r3, [r7, #32]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ea:	2300      	movs	r3, #0
 80006ec:	627b      	str	r3, [r7, #36]	@ 0x24
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ee:	2303      	movs	r3, #3
 80006f0:	62bb      	str	r3, [r7, #40]	@ 0x28
      GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80006f2:	2304      	movs	r3, #4
 80006f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      HAL_GPIO_Init(RTC_SCL_GPIO_Port, &GPIO_InitStruct);
 80006f6:	f107 031c 	add.w	r3, r7, #28
 80006fa:	4619      	mov	r1, r3
 80006fc:	4814      	ldr	r0, [pc, #80]	@ (8000750 <HAL_I2C_MspInit+0x114>)
 80006fe:	f000 ff37 	bl	8001570 <HAL_GPIO_Init>
      GPIO_InitStruct.Pin = RTC_SDA_Pin;
 8000702:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000706:	61fb      	str	r3, [r7, #28]
      GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000708:	2312      	movs	r3, #18
 800070a:	623b      	str	r3, [r7, #32]
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 800070c:	2301      	movs	r3, #1
 800070e:	627b      	str	r3, [r7, #36]	@ 0x24
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000710:	2303      	movs	r3, #3
 8000712:	62bb      	str	r3, [r7, #40]	@ 0x28
      GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000714:	2304      	movs	r3, #4
 8000716:	62fb      	str	r3, [r7, #44]	@ 0x2c
      HAL_GPIO_Init(RTC_SDA_GPIO_Port, &GPIO_InitStruct);
 8000718:	f107 031c 	add.w	r3, r7, #28
 800071c:	4619      	mov	r1, r3
 800071e:	480c      	ldr	r0, [pc, #48]	@ (8000750 <HAL_I2C_MspInit+0x114>)
 8000720:	f000 ff26 	bl	8001570 <HAL_GPIO_Init>
      __HAL_RCC_I2C2_CLK_ENABLE();
 8000724:	2300      	movs	r3, #0
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	4b08      	ldr	r3, [pc, #32]	@ (800074c <HAL_I2C_MspInit+0x110>)
 800072a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800072c:	4a07      	ldr	r2, [pc, #28]	@ (800074c <HAL_I2C_MspInit+0x110>)
 800072e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000732:	6413      	str	r3, [r2, #64]	@ 0x40
 8000734:	4b05      	ldr	r3, [pc, #20]	@ (800074c <HAL_I2C_MspInit+0x110>)
 8000736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000738:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800073c:	60fb      	str	r3, [r7, #12]
 800073e:	68fb      	ldr	r3, [r7, #12]
}
 8000740:	bf00      	nop
 8000742:	3730      	adds	r7, #48	@ 0x30
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	40005400 	.word	0x40005400
 800074c:	40023800 	.word	0x40023800
 8000750:	40020400 	.word	0x40020400
 8000754:	40005800 	.word	0x40005800

08000758 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b08a      	sub	sp, #40	@ 0x28
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000760:	f107 0314 	add.w	r3, r7, #20
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]
 800076e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a19      	ldr	r2, [pc, #100]	@ (80007dc <HAL_UART_MspInit+0x84>)
 8000776:	4293      	cmp	r3, r2
 8000778:	d12c      	bne.n	80007d4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	613b      	str	r3, [r7, #16]
 800077e:	4b18      	ldr	r3, [pc, #96]	@ (80007e0 <HAL_UART_MspInit+0x88>)
 8000780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000782:	4a17      	ldr	r2, [pc, #92]	@ (80007e0 <HAL_UART_MspInit+0x88>)
 8000784:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000788:	6413      	str	r3, [r2, #64]	@ 0x40
 800078a:	4b15      	ldr	r3, [pc, #84]	@ (80007e0 <HAL_UART_MspInit+0x88>)
 800078c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800078e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000792:	613b      	str	r3, [r7, #16]
 8000794:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	60fb      	str	r3, [r7, #12]
 800079a:	4b11      	ldr	r3, [pc, #68]	@ (80007e0 <HAL_UART_MspInit+0x88>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	4a10      	ldr	r2, [pc, #64]	@ (80007e0 <HAL_UART_MspInit+0x88>)
 80007a0:	f043 0308 	orr.w	r3, r3, #8
 80007a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a6:	4b0e      	ldr	r3, [pc, #56]	@ (80007e0 <HAL_UART_MspInit+0x88>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	f003 0308 	and.w	r3, r3, #8
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80007b2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80007b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b8:	2302      	movs	r3, #2
 80007ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007bc:	2301      	movs	r3, #1
 80007be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007c0:	2303      	movs	r3, #3
 80007c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80007c4:	2307      	movs	r3, #7
 80007c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007c8:	f107 0314 	add.w	r3, r7, #20
 80007cc:	4619      	mov	r1, r3
 80007ce:	4805      	ldr	r0, [pc, #20]	@ (80007e4 <HAL_UART_MspInit+0x8c>)
 80007d0:	f000 fece 	bl	8001570 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80007d4:	bf00      	nop
 80007d6:	3728      	adds	r7, #40	@ 0x28
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40004800 	.word	0x40004800
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40020c00 	.word	0x40020c00

080007e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007ec:	bf00      	nop
 80007ee:	e7fd      	b.n	80007ec <NMI_Handler+0x4>

080007f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007f4:	bf00      	nop
 80007f6:	e7fd      	b.n	80007f4 <HardFault_Handler+0x4>

080007f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007fc:	bf00      	nop
 80007fe:	e7fd      	b.n	80007fc <MemManage_Handler+0x4>

08000800 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000804:	bf00      	nop
 8000806:	e7fd      	b.n	8000804 <BusFault_Handler+0x4>

08000808 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800080c:	bf00      	nop
 800080e:	e7fd      	b.n	800080c <UsageFault_Handler+0x4>

08000810 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000814:	bf00      	nop
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr

0800081e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800081e:	b480      	push	{r7}
 8000820:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000822:	bf00      	nop
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr

0800082c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000830:	bf00      	nop
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr

0800083a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800083a:	b580      	push	{r7, lr}
 800083c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800083e:	f000 fd6d 	bl	800131c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
	...

08000848 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800084c:	4b06      	ldr	r3, [pc, #24]	@ (8000868 <SystemInit+0x20>)
 800084e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000852:	4a05      	ldr	r2, [pc, #20]	@ (8000868 <SystemInit+0x20>)
 8000854:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000858:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800085c:	bf00      	nop
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	e000ed00 	.word	0xe000ed00

0800086c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800086c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008a4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000870:	f7ff ffea 	bl	8000848 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000874:	480c      	ldr	r0, [pc, #48]	@ (80008a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000876:	490d      	ldr	r1, [pc, #52]	@ (80008ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000878:	4a0d      	ldr	r2, [pc, #52]	@ (80008b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800087a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800087c:	e002      	b.n	8000884 <LoopCopyDataInit>

0800087e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800087e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000880:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000882:	3304      	adds	r3, #4

08000884 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000884:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000886:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000888:	d3f9      	bcc.n	800087e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800088a:	4a0a      	ldr	r2, [pc, #40]	@ (80008b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800088c:	4c0a      	ldr	r4, [pc, #40]	@ (80008b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800088e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000890:	e001      	b.n	8000896 <LoopFillZerobss>

08000892 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000892:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000894:	3204      	adds	r2, #4

08000896 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000896:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000898:	d3fb      	bcc.n	8000892 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800089a:	f002 fe0b 	bl	80034b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800089e:	f7ff fe1d 	bl	80004dc <main>
  bx  lr    
 80008a2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80008a4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80008a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008ac:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80008b0:	08003618 	.word	0x08003618
  ldr r2, =_sbss
 80008b4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80008b8:	20000158 	.word	0x20000158

080008bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008bc:	e7fe      	b.n	80008bc <ADC_IRQHandler>
	...

080008c0 <lcdSendCommand>:

/************************************
 * STATIC FUNCTIONS
 ************************************/
static void lcdSendCommand (uint8_t cmd)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b086      	sub	sp, #24
 80008c4:	af02      	add	r7, sp, #8
 80008c6:	4603      	mov	r3, r0
 80008c8:	71fb      	strb	r3, [r7, #7]
	uint8_t highNibble, lowNibble;
	uint8_t txData[4];

	highNibble = (cmd & 0xF0) | BL_BIT;
 80008ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ce:	f023 030f 	bic.w	r3, r3, #15
 80008d2:	b25b      	sxtb	r3, r3
 80008d4:	f043 0308 	orr.w	r3, r3, #8
 80008d8:	b25b      	sxtb	r3, r3
 80008da:	73bb      	strb	r3, [r7, #14]
	lowNibble = ((cmd<<4) & 0xF0) | BL_BIT;
 80008dc:	79fb      	ldrb	r3, [r7, #7]
 80008de:	011b      	lsls	r3, r3, #4
 80008e0:	b25b      	sxtb	r3, r3
 80008e2:	f043 0308 	orr.w	r3, r3, #8
 80008e6:	b25b      	sxtb	r3, r3
 80008e8:	737b      	strb	r3, [r7, #13]

	txData[0] = highNibble | EN_BIT;
 80008ea:	7bbb      	ldrb	r3, [r7, #14]
 80008ec:	f043 0304 	orr.w	r3, r3, #4
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	723b      	strb	r3, [r7, #8]
	txData[1] = highNibble;
 80008f4:	7bbb      	ldrb	r3, [r7, #14]
 80008f6:	727b      	strb	r3, [r7, #9]
	txData[2] = lowNibble | EN_BIT;
 80008f8:	7b7b      	ldrb	r3, [r7, #13]
 80008fa:	f043 0304 	orr.w	r3, r3, #4
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	72bb      	strb	r3, [r7, #10]
	txData[3] = lowNibble;
 8000902:	7b7b      	ldrb	r3, [r7, #13]
 8000904:	72fb      	strb	r3, [r7, #11]

	for (uint8_t i = 0; i<sizeof(txData); i++)
 8000906:	2300      	movs	r3, #0
 8000908:	73fb      	strb	r3, [r7, #15]
 800090a:	e016      	b.n	800093a <lcdSendCommand+0x7a>
	{
		if ((HAL_I2C_Master_Transmit(&hi2c1, (LCD_ADDRESS<<1), (txData+i), 1, HAL_MAX_DELAY)) != HAL_OK)
 800090c:	7bfb      	ldrb	r3, [r7, #15]
 800090e:	f107 0208 	add.w	r2, r7, #8
 8000912:	441a      	add	r2, r3
 8000914:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000918:	9300      	str	r3, [sp, #0]
 800091a:	2301      	movs	r3, #1
 800091c:	214e      	movs	r1, #78	@ 0x4e
 800091e:	480c      	ldr	r0, [pc, #48]	@ (8000950 <lcdSendCommand+0x90>)
 8000920:	f001 f948 	bl	8001bb4 <HAL_I2C_Master_Transmit>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d004      	beq.n	8000934 <lcdSendCommand+0x74>
		{
			uartSendString((uint8_t)"tx de lcd broken");
 800092a:	4b0a      	ldr	r3, [pc, #40]	@ (8000954 <lcdSendCommand+0x94>)
 800092c:	b2db      	uxtb	r3, r3
 800092e:	4618      	mov	r0, r3
 8000930:	f000 f9f4 	bl	8000d1c <uartSendString>
	for (uint8_t i = 0; i<sizeof(txData); i++)
 8000934:	7bfb      	ldrb	r3, [r7, #15]
 8000936:	3301      	adds	r3, #1
 8000938:	73fb      	strb	r3, [r7, #15]
 800093a:	7bfb      	ldrb	r3, [r7, #15]
 800093c:	2b03      	cmp	r3, #3
 800093e:	d9e5      	bls.n	800090c <lcdSendCommand+0x4c>
		}
	}
	HAL_Delay(5);
 8000940:	2005      	movs	r0, #5
 8000942:	f000 fd0b 	bl	800135c <HAL_Delay>
}
 8000946:	bf00      	nop
 8000948:	3710      	adds	r7, #16
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	20000030 	.word	0x20000030
 8000954:	0800354c 	.word	0x0800354c

08000958 <lcdSendData>:

static void lcdSendData (uint8_t data)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b086      	sub	sp, #24
 800095c:	af02      	add	r7, sp, #8
 800095e:	4603      	mov	r3, r0
 8000960:	71fb      	strb	r3, [r7, #7]
	uint8_t highNibble, lowNibble;
	uint8_t txData[4];

	highNibble = (data & 0xF0) | BL_BIT | RS_BIT;
 8000962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000966:	f023 030f 	bic.w	r3, r3, #15
 800096a:	b25b      	sxtb	r3, r3
 800096c:	f043 0309 	orr.w	r3, r3, #9
 8000970:	b25b      	sxtb	r3, r3
 8000972:	73bb      	strb	r3, [r7, #14]
	lowNibble = ((data<<4) & 0xF0) | BL_BIT | RS_BIT;
 8000974:	79fb      	ldrb	r3, [r7, #7]
 8000976:	011b      	lsls	r3, r3, #4
 8000978:	b25b      	sxtb	r3, r3
 800097a:	f043 0309 	orr.w	r3, r3, #9
 800097e:	b25b      	sxtb	r3, r3
 8000980:	737b      	strb	r3, [r7, #13]

	txData[0] = highNibble | EN_BIT;
 8000982:	7bbb      	ldrb	r3, [r7, #14]
 8000984:	f043 0304 	orr.w	r3, r3, #4
 8000988:	b2db      	uxtb	r3, r3
 800098a:	723b      	strb	r3, [r7, #8]
	txData[1] = highNibble;
 800098c:	7bbb      	ldrb	r3, [r7, #14]
 800098e:	727b      	strb	r3, [r7, #9]
	txData[2] = lowNibble | EN_BIT;
 8000990:	7b7b      	ldrb	r3, [r7, #13]
 8000992:	f043 0304 	orr.w	r3, r3, #4
 8000996:	b2db      	uxtb	r3, r3
 8000998:	72bb      	strb	r3, [r7, #10]
	txData[3] = lowNibble;
 800099a:	7b7b      	ldrb	r3, [r7, #13]
 800099c:	72fb      	strb	r3, [r7, #11]

	for (uint8_t i = 0; i<sizeof(txData); i++)
 800099e:	2300      	movs	r3, #0
 80009a0:	73fb      	strb	r3, [r7, #15]
 80009a2:	e016      	b.n	80009d2 <lcdSendData+0x7a>
	{
		if ((HAL_I2C_Master_Transmit(&hi2c1, (LCD_ADDRESS<<1), (txData+i), 1, HAL_MAX_DELAY)) != HAL_OK)
 80009a4:	7bfb      	ldrb	r3, [r7, #15]
 80009a6:	f107 0208 	add.w	r2, r7, #8
 80009aa:	441a      	add	r2, r3
 80009ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80009b0:	9300      	str	r3, [sp, #0]
 80009b2:	2301      	movs	r3, #1
 80009b4:	214e      	movs	r1, #78	@ 0x4e
 80009b6:	480c      	ldr	r0, [pc, #48]	@ (80009e8 <lcdSendData+0x90>)
 80009b8:	f001 f8fc 	bl	8001bb4 <HAL_I2C_Master_Transmit>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d004      	beq.n	80009cc <lcdSendData+0x74>
		{
			uartSendString((uint8_t)"tx de lcd broken");
 80009c2:	4b0a      	ldr	r3, [pc, #40]	@ (80009ec <lcdSendData+0x94>)
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	4618      	mov	r0, r3
 80009c8:	f000 f9a8 	bl	8000d1c <uartSendString>
	for (uint8_t i = 0; i<sizeof(txData); i++)
 80009cc:	7bfb      	ldrb	r3, [r7, #15]
 80009ce:	3301      	adds	r3, #1
 80009d0:	73fb      	strb	r3, [r7, #15]
 80009d2:	7bfb      	ldrb	r3, [r7, #15]
 80009d4:	2b03      	cmp	r3, #3
 80009d6:	d9e5      	bls.n	80009a4 <lcdSendData+0x4c>
		}
	}
	HAL_Delay(5);
 80009d8:	2005      	movs	r0, #5
 80009da:	f000 fcbf 	bl	800135c <HAL_Delay>
}
 80009de:	bf00      	nop
 80009e0:	3710      	adds	r7, #16
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	20000030 	.word	0x20000030
 80009ec:	0800354c 	.word	0x0800354c

080009f0 <MX_I2C1_Init>:

static void MX_I2C1_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 80009f4:	4b1c      	ldr	r3, [pc, #112]	@ (8000a68 <MX_I2C1_Init+0x78>)
 80009f6:	4a1d      	ldr	r2, [pc, #116]	@ (8000a6c <MX_I2C1_Init+0x7c>)
 80009f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 10000;
 80009fa:	4b1b      	ldr	r3, [pc, #108]	@ (8000a68 <MX_I2C1_Init+0x78>)
 80009fc:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000a00:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a02:	4b19      	ldr	r3, [pc, #100]	@ (8000a68 <MX_I2C1_Init+0x78>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a08:	4b17      	ldr	r3, [pc, #92]	@ (8000a68 <MX_I2C1_Init+0x78>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a0e:	4b16      	ldr	r3, [pc, #88]	@ (8000a68 <MX_I2C1_Init+0x78>)
 8000a10:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a14:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a16:	4b14      	ldr	r3, [pc, #80]	@ (8000a68 <MX_I2C1_Init+0x78>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a1c:	4b12      	ldr	r3, [pc, #72]	@ (8000a68 <MX_I2C1_Init+0x78>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a22:	4b11      	ldr	r3, [pc, #68]	@ (8000a68 <MX_I2C1_Init+0x78>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a28:	4b0f      	ldr	r3, [pc, #60]	@ (8000a68 <MX_I2C1_Init+0x78>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a2e:	480e      	ldr	r0, [pc, #56]	@ (8000a68 <MX_I2C1_Init+0x78>)
 8000a30:	f000 ff7c 	bl	800192c <HAL_I2C_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8000a3a:	f7ff fdcb 	bl	80005d4 <Error_Handler>
  }

  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a3e:	2100      	movs	r1, #0
 8000a40:	4809      	ldr	r0, [pc, #36]	@ (8000a68 <MX_I2C1_Init+0x78>)
 8000a42:	f001 fc10 	bl	8002266 <HAL_I2CEx_ConfigAnalogFilter>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_I2C1_Init+0x60>
  {
    Error_Handler();
 8000a4c:	f7ff fdc2 	bl	80005d4 <Error_Handler>
  }

  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a50:	2100      	movs	r1, #0
 8000a52:	4805      	ldr	r0, [pc, #20]	@ (8000a68 <MX_I2C1_Init+0x78>)
 8000a54:	f001 fc43 	bl	80022de <HAL_I2CEx_ConfigDigitalFilter>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_I2C1_Init+0x72>
  {
    Error_Handler();
 8000a5e:	f7ff fdb9 	bl	80005d4 <Error_Handler>
  }
}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20000030 	.word	0x20000030
 8000a6c:	40005400 	.word	0x40005400

08000a70 <lcdInit>:

/************************************
 * GLOBAL FUNCTIONS
 ************************************/
void lcdInit ()
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af02      	add	r7, sp, #8
	MX_I2C1_Init();
 8000a76:	f7ff ffbb 	bl	80009f0 <MX_I2C1_Init>
	HAL_Delay(100);
 8000a7a:	2064      	movs	r0, #100	@ 0x64
 8000a7c:	f000 fc6e 	bl	800135c <HAL_Delay>

	uint8_t txData[2];

	txData[0] = 0x30 | EN_BIT;
 8000a80:	2334      	movs	r3, #52	@ 0x34
 8000a82:	713b      	strb	r3, [r7, #4]
	txData[1] = 0x30;
 8000a84:	2330      	movs	r3, #48	@ 0x30
 8000a86:	717b      	strb	r3, [r7, #5]


	HAL_I2C_Master_Transmit(&hi2c1, (LCD_ADDRESS<<1), &txData[0], 1, HAL_MAX_DELAY);
 8000a88:	1d3a      	adds	r2, r7, #4
 8000a8a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000a8e:	9300      	str	r3, [sp, #0]
 8000a90:	2301      	movs	r3, #1
 8000a92:	214e      	movs	r1, #78	@ 0x4e
 8000a94:	483b      	ldr	r0, [pc, #236]	@ (8000b84 <lcdInit+0x114>)
 8000a96:	f001 f88d 	bl	8001bb4 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8000a9a:	2001      	movs	r0, #1
 8000a9c:	f000 fc5e 	bl	800135c <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c1, (LCD_ADDRESS<<1), &txData[1], 1, HAL_MAX_DELAY);
 8000aa0:	1d3b      	adds	r3, r7, #4
 8000aa2:	1c5a      	adds	r2, r3, #1
 8000aa4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000aa8:	9300      	str	r3, [sp, #0]
 8000aaa:	2301      	movs	r3, #1
 8000aac:	214e      	movs	r1, #78	@ 0x4e
 8000aae:	4835      	ldr	r0, [pc, #212]	@ (8000b84 <lcdInit+0x114>)
 8000ab0:	f001 f880 	bl	8001bb4 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 8000ab4:	2014      	movs	r0, #20
 8000ab6:	f000 fc51 	bl	800135c <HAL_Delay>

	HAL_I2C_Master_Transmit(&hi2c1, (LCD_ADDRESS<<1), &txData[0], 1, HAL_MAX_DELAY);
 8000aba:	1d3a      	adds	r2, r7, #4
 8000abc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ac0:	9300      	str	r3, [sp, #0]
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	214e      	movs	r1, #78	@ 0x4e
 8000ac6:	482f      	ldr	r0, [pc, #188]	@ (8000b84 <lcdInit+0x114>)
 8000ac8:	f001 f874 	bl	8001bb4 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8000acc:	2001      	movs	r0, #1
 8000ace:	f000 fc45 	bl	800135c <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c1, (LCD_ADDRESS<<1), &txData[1], 1, HAL_MAX_DELAY);
 8000ad2:	1d3b      	adds	r3, r7, #4
 8000ad4:	1c5a      	adds	r2, r3, #1
 8000ad6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ada:	9300      	str	r3, [sp, #0]
 8000adc:	2301      	movs	r3, #1
 8000ade:	214e      	movs	r1, #78	@ 0x4e
 8000ae0:	4828      	ldr	r0, [pc, #160]	@ (8000b84 <lcdInit+0x114>)
 8000ae2:	f001 f867 	bl	8001bb4 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8000ae6:	200a      	movs	r0, #10
 8000ae8:	f000 fc38 	bl	800135c <HAL_Delay>

	HAL_I2C_Master_Transmit(&hi2c1, (LCD_ADDRESS<<1), &txData[0], 1, HAL_MAX_DELAY);
 8000aec:	1d3a      	adds	r2, r7, #4
 8000aee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000af2:	9300      	str	r3, [sp, #0]
 8000af4:	2301      	movs	r3, #1
 8000af6:	214e      	movs	r1, #78	@ 0x4e
 8000af8:	4822      	ldr	r0, [pc, #136]	@ (8000b84 <lcdInit+0x114>)
 8000afa:	f001 f85b 	bl	8001bb4 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8000afe:	2001      	movs	r0, #1
 8000b00:	f000 fc2c 	bl	800135c <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c1, (LCD_ADDRESS<<1), &txData[1], 1, HAL_MAX_DELAY);
 8000b04:	1d3b      	adds	r3, r7, #4
 8000b06:	1c5a      	adds	r2, r3, #1
 8000b08:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b0c:	9300      	str	r3, [sp, #0]
 8000b0e:	2301      	movs	r3, #1
 8000b10:	214e      	movs	r1, #78	@ 0x4e
 8000b12:	481c      	ldr	r0, [pc, #112]	@ (8000b84 <lcdInit+0x114>)
 8000b14:	f001 f84e 	bl	8001bb4 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8000b18:	2001      	movs	r0, #1
 8000b1a:	f000 fc1f 	bl	800135c <HAL_Delay>

	txData[0] = 0x20 | EN_BIT;
 8000b1e:	2324      	movs	r3, #36	@ 0x24
 8000b20:	713b      	strb	r3, [r7, #4]
	txData[1] = 0x20;
 8000b22:	2320      	movs	r3, #32
 8000b24:	717b      	strb	r3, [r7, #5]

	HAL_I2C_Master_Transmit(&hi2c1, (LCD_ADDRESS<<1), &txData[0], 1, HAL_MAX_DELAY);
 8000b26:	1d3a      	adds	r2, r7, #4
 8000b28:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b2c:	9300      	str	r3, [sp, #0]
 8000b2e:	2301      	movs	r3, #1
 8000b30:	214e      	movs	r1, #78	@ 0x4e
 8000b32:	4814      	ldr	r0, [pc, #80]	@ (8000b84 <lcdInit+0x114>)
 8000b34:	f001 f83e 	bl	8001bb4 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8000b38:	2001      	movs	r0, #1
 8000b3a:	f000 fc0f 	bl	800135c <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c1, (LCD_ADDRESS<<1), &txData[1], 1, HAL_MAX_DELAY);
 8000b3e:	1d3b      	adds	r3, r7, #4
 8000b40:	1c5a      	adds	r2, r3, #1
 8000b42:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b46:	9300      	str	r3, [sp, #0]
 8000b48:	2301      	movs	r3, #1
 8000b4a:	214e      	movs	r1, #78	@ 0x4e
 8000b4c:	480d      	ldr	r0, [pc, #52]	@ (8000b84 <lcdInit+0x114>)
 8000b4e:	f001 f831 	bl	8001bb4 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8000b52:	2001      	movs	r0, #1
 8000b54:	f000 fc02 	bl	800135c <HAL_Delay>

	lcdSendCommand(FUNCTIONSET | MODE_4BITMODE| LINES_2LINE | FONT_5x8DOTS);
 8000b58:	2028      	movs	r0, #40	@ 0x28
 8000b5a:	f7ff feb1 	bl	80008c0 <lcdSendCommand>
	HAL_Delay(1);
 8000b5e:	2001      	movs	r0, #1
 8000b60:	f000 fbfc 	bl	800135c <HAL_Delay>

	lcdSendCommand(DISPLAYCONTROL | DISPLAYOFF | CURSOROFF | BLINKOFF);
 8000b64:	2008      	movs	r0, #8
 8000b66:	f7ff feab 	bl	80008c0 <lcdSendCommand>
	HAL_Delay(1);
 8000b6a:	2001      	movs	r0, #1
 8000b6c:	f000 fbf6 	bl	800135c <HAL_Delay>

	lcdSendCommand(ENTRYMODESET | ENTRYLEFT | SHIFTDECREMENT);
 8000b70:	2006      	movs	r0, #6
 8000b72:	f7ff fea5 	bl	80008c0 <lcdSendCommand>
	HAL_Delay(1);
 8000b76:	2001      	movs	r0, #1
 8000b78:	f000 fbf0 	bl	800135c <HAL_Delay>
}
 8000b7c:	bf00      	nop
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	20000030 	.word	0x20000030

08000b88 <lcdPrintString>:
void lcdPrintChar (uint8_t c)
{
	lcdSendData(c);
}
void lcdPrintString (uint8_t* str)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
	while (*str != '\0')
 8000b90:	e006      	b.n	8000ba0 <lcdPrintString+0x18>
	{
		lcdSendData(*str++);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	1c5a      	adds	r2, r3, #1
 8000b96:	607a      	str	r2, [r7, #4]
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f7ff fedc 	bl	8000958 <lcdSendData>
	while (*str != '\0')
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d1f4      	bne.n	8000b92 <lcdPrintString+0xa>
	}
}
 8000ba8:	bf00      	nop
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
	...

08000bb4 <rtcSetRegByte>:

/************************************
 * STATIC FUNCTIONS
 ************************************/
static void rtcSetRegByte (uint8_t regAddr, uint8_t val)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af02      	add	r7, sp, #8
 8000bba:	4603      	mov	r3, r0
 8000bbc:	460a      	mov	r2, r1
 8000bbe:	71fb      	strb	r3, [r7, #7]
 8000bc0:	4613      	mov	r3, r2
 8000bc2:	71bb      	strb	r3, [r7, #6]
	uint8_t bytes[2]= {regAddr, val};
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	733b      	strb	r3, [r7, #12]
 8000bc8:	79bb      	ldrb	r3, [r7, #6]
 8000bca:	737b      	strb	r3, [r7, #13]
	if (HAL_I2C_Master_Transmit(rtcHandle.hi2c, (rtcHandle.address<<1), bytes, 2, 100)!= HAL_OK)
 8000bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8000bfc <rtcSetRegByte+0x48>)
 8000bce:	6818      	ldr	r0, [r3, #0]
 8000bd0:	4b0a      	ldr	r3, [pc, #40]	@ (8000bfc <rtcSetRegByte+0x48>)
 8000bd2:	791b      	ldrb	r3, [r3, #4]
 8000bd4:	005b      	lsls	r3, r3, #1
 8000bd6:	b299      	uxth	r1, r3
 8000bd8:	f107 020c 	add.w	r2, r7, #12
 8000bdc:	2364      	movs	r3, #100	@ 0x64
 8000bde:	9300      	str	r3, [sp, #0]
 8000be0:	2302      	movs	r3, #2
 8000be2:	f000 ffe7 	bl	8001bb4 <HAL_I2C_Master_Transmit>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d002      	beq.n	8000bf2 <rtcSetRegByte+0x3e>
		{
		uartSendString((uint8_t*)"error tx RTC\n\r");
 8000bec:	4804      	ldr	r0, [pc, #16]	@ (8000c00 <rtcSetRegByte+0x4c>)
 8000bee:	f000 f895 	bl	8000d1c <uartSendString>
		}
}
 8000bf2:	bf00      	nop
 8000bf4:	3710      	adds	r7, #16
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	20000004 	.word	0x20000004
 8000c00:	08003574 	.word	0x08003574

08000c04 <MX_I2C2_Init>:
{
	return (dec % 10 + ((dec / 10) << 4));
}

static void MX_I2C2_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c08:	4b1b      	ldr	r3, [pc, #108]	@ (8000c78 <MX_I2C2_Init+0x74>)
 8000c0a:	4a1c      	ldr	r2, [pc, #112]	@ (8000c7c <MX_I2C2_Init+0x78>)
 8000c0c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = CLOCKSPEED;
 8000c0e:	4b1a      	ldr	r3, [pc, #104]	@ (8000c78 <MX_I2C2_Init+0x74>)
 8000c10:	4a1b      	ldr	r2, [pc, #108]	@ (8000c80 <MX_I2C2_Init+0x7c>)
 8000c12:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c14:	4b18      	ldr	r3, [pc, #96]	@ (8000c78 <MX_I2C2_Init+0x74>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000c1a:	4b17      	ldr	r3, [pc, #92]	@ (8000c78 <MX_I2C2_Init+0x74>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c20:	4b15      	ldr	r3, [pc, #84]	@ (8000c78 <MX_I2C2_Init+0x74>)
 8000c22:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c26:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c28:	4b13      	ldr	r3, [pc, #76]	@ (8000c78 <MX_I2C2_Init+0x74>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000c2e:	4b12      	ldr	r3, [pc, #72]	@ (8000c78 <MX_I2C2_Init+0x74>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c34:	4b10      	ldr	r3, [pc, #64]	@ (8000c78 <MX_I2C2_Init+0x74>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c3a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c78 <MX_I2C2_Init+0x74>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c40:	480d      	ldr	r0, [pc, #52]	@ (8000c78 <MX_I2C2_Init+0x74>)
 8000c42:	f000 fe73 	bl	800192c <HAL_I2C_Init>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000c4c:	f7ff fcc2 	bl	80005d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c50:	2100      	movs	r1, #0
 8000c52:	4809      	ldr	r0, [pc, #36]	@ (8000c78 <MX_I2C2_Init+0x74>)
 8000c54:	f001 fb07 	bl	8002266 <HAL_I2CEx_ConfigAnalogFilter>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000c5e:	f7ff fcb9 	bl	80005d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000c62:	2100      	movs	r1, #0
 8000c64:	4804      	ldr	r0, [pc, #16]	@ (8000c78 <MX_I2C2_Init+0x74>)
 8000c66:	f001 fb3a 	bl	80022de <HAL_I2CEx_ConfigDigitalFilter>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000c70:	f7ff fcb0 	bl	80005d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c74:	bf00      	nop
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20000084 	.word	0x20000084
 8000c7c:	40005800 	.word	0x40005800
 8000c80:	000186a0 	.word	0x000186a0

08000c84 <rtcInit>:
/************************************
 * GLOBAL FUNCTIONS
 ************************************/
void rtcInit()
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
	MX_I2C2_Init();
 8000c88:	f7ff ffbc 	bl	8000c04 <MX_I2C2_Init>
	rtcHaltnt();
 8000c8c:	f000 f802 	bl	8000c94 <rtcHaltnt>
}
 8000c90:	bf00      	nop
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <rtcHaltnt>:
{
	rtcSetRegByte(RTC_SECOND, HALT_BIT);
	rtcHandle.halt = true;
}
void rtcHaltnt()
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
	rtcSetRegByte(RTC_SECOND, 0x00);
 8000c98:	2100      	movs	r1, #0
 8000c9a:	2000      	movs	r0, #0
 8000c9c:	f7ff ff8a 	bl	8000bb4 <rtcSetRegByte>
	rtcHandle.halt = false;
 8000ca0:	4b02      	ldr	r3, [pc, #8]	@ (8000cac <rtcHaltnt+0x18>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	715a      	strb	r2, [r3, #5]
}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20000004 	.word	0x20000004

08000cb0 <MX_USART3_UART_Init>:

/************************************
 * STATIC FUNCTIONS
 ************************************/
static void MX_USART3_UART_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  huart3.Instance = USART3;
 8000cb4:	4b11      	ldr	r3, [pc, #68]	@ (8000cfc <MX_USART3_UART_Init+0x4c>)
 8000cb6:	4a12      	ldr	r2, [pc, #72]	@ (8000d00 <MX_USART3_UART_Init+0x50>)
 8000cb8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = BAUDRATE;
 8000cba:	4b10      	ldr	r3, [pc, #64]	@ (8000cfc <MX_USART3_UART_Init+0x4c>)
 8000cbc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000cc0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000cfc <MX_USART3_UART_Init+0x4c>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8000cfc <MX_USART3_UART_Init+0x4c>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cce:	4b0b      	ldr	r3, [pc, #44]	@ (8000cfc <MX_USART3_UART_Init+0x4c>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cd4:	4b09      	ldr	r3, [pc, #36]	@ (8000cfc <MX_USART3_UART_Init+0x4c>)
 8000cd6:	220c      	movs	r2, #12
 8000cd8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cda:	4b08      	ldr	r3, [pc, #32]	@ (8000cfc <MX_USART3_UART_Init+0x4c>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ce0:	4b06      	ldr	r3, [pc, #24]	@ (8000cfc <MX_USART3_UART_Init+0x4c>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	61da      	str	r2, [r3, #28]

  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ce6:	4805      	ldr	r0, [pc, #20]	@ (8000cfc <MX_USART3_UART_Init+0x4c>)
 8000ce8:	f001 ffd0 	bl	8002c8c <HAL_UART_Init>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000cf2:	f7ff fc6f 	bl	80005d4 <Error_Handler>
  }
}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	200000d8 	.word	0x200000d8
 8000d00:	40004800 	.word	0x40004800

08000d04 <uartInit>:
/************************************
 * GLOBAL FUNCTIONS
 ************************************/
bool_t uartInit ()
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
	MX_USART3_UART_Init();
 8000d08:	f7ff ffd2 	bl	8000cb0 <MX_USART3_UART_Init>
	uartSendString(UART_CONFIG_STRING);
 8000d0c:	4802      	ldr	r0, [pc, #8]	@ (8000d18 <uartInit+0x14>)
 8000d0e:	f000 f805 	bl	8000d1c <uartSendString>
	return true;
 8000d12:	2301      	movs	r3, #1
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	080035a4 	.word	0x080035a4

08000d1c <uartSendString>:
	HAL_UART_MspDeInit(&huart3);
	return true;
}

void uartSendString (uint8_t* pstring)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef uartStatus;
	uint16_t size = 0;
 8000d24:	2300      	movs	r3, #0
 8000d26:	81fb      	strh	r3, [r7, #14]

	if (pstring == NULL)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d105      	bne.n	8000d3a <uartSendString+0x1e>
	{
		Error_Handler();
 8000d2e:	f7ff fc51 	bl	80005d4 <Error_Handler>
	}

	while (pstring[size] != '\0')
 8000d32:	e002      	b.n	8000d3a <uartSendString+0x1e>
	{
		size++;
 8000d34:	89fb      	ldrh	r3, [r7, #14]
 8000d36:	3301      	adds	r3, #1
 8000d38:	81fb      	strh	r3, [r7, #14]
	while (pstring[size] != '\0')
 8000d3a:	89fb      	ldrh	r3, [r7, #14]
 8000d3c:	687a      	ldr	r2, [r7, #4]
 8000d3e:	4413      	add	r3, r2
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d1f6      	bne.n	8000d34 <uartSendString+0x18>
	}

	//TX and Status
	uartStatus = HAL_UART_Transmit(&huart3, pstring, size, HAL_MAX_DELAY);
 8000d46:	89fa      	ldrh	r2, [r7, #14]
 8000d48:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d4c:	6879      	ldr	r1, [r7, #4]
 8000d4e:	4807      	ldr	r0, [pc, #28]	@ (8000d6c <uartSendString+0x50>)
 8000d50:	f001 ffec 	bl	8002d2c <HAL_UART_Transmit>
 8000d54:	4603      	mov	r3, r0
 8000d56:	737b      	strb	r3, [r7, #13]
	if (uartStatus != HAL_OK)
 8000d58:	7b7b      	ldrb	r3, [r7, #13]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <uartSendString+0x46>
	{
		Error_Handler();
 8000d5e:	f7ff fc39 	bl	80005d4 <Error_Handler>
	}
}
 8000d62:	bf00      	nop
 8000d64:	3710      	adds	r7, #16
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	200000d8 	.word	0x200000d8

08000d70 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08c      	sub	sp, #48	@ 0x30
 8000d74:	af00      	add	r7, sp, #0
 GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d76:	f107 031c 	add.w	r3, r7, #28
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	605a      	str	r2, [r3, #4]
 8000d80:	609a      	str	r2, [r3, #8]
 8000d82:	60da      	str	r2, [r3, #12]
 8000d84:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

 /* GPIO Ports Clock Enable */
 __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	61bb      	str	r3, [r7, #24]
 8000d8a:	4b7c      	ldr	r3, [pc, #496]	@ (8000f7c <MX_GPIO_Init+0x20c>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8e:	4a7b      	ldr	r2, [pc, #492]	@ (8000f7c <MX_GPIO_Init+0x20c>)
 8000d90:	f043 0304 	orr.w	r3, r3, #4
 8000d94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d96:	4b79      	ldr	r3, [pc, #484]	@ (8000f7c <MX_GPIO_Init+0x20c>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9a:	f003 0304 	and.w	r3, r3, #4
 8000d9e:	61bb      	str	r3, [r7, #24]
 8000da0:	69bb      	ldr	r3, [r7, #24]
 __HAL_RCC_GPIOH_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]
 8000da6:	4b75      	ldr	r3, [pc, #468]	@ (8000f7c <MX_GPIO_Init+0x20c>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000daa:	4a74      	ldr	r2, [pc, #464]	@ (8000f7c <MX_GPIO_Init+0x20c>)
 8000dac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000db0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000db2:	4b72      	ldr	r3, [pc, #456]	@ (8000f7c <MX_GPIO_Init+0x20c>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000dba:	617b      	str	r3, [r7, #20]
 8000dbc:	697b      	ldr	r3, [r7, #20]
 __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	613b      	str	r3, [r7, #16]
 8000dc2:	4b6e      	ldr	r3, [pc, #440]	@ (8000f7c <MX_GPIO_Init+0x20c>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc6:	4a6d      	ldr	r2, [pc, #436]	@ (8000f7c <MX_GPIO_Init+0x20c>)
 8000dc8:	f043 0301 	orr.w	r3, r3, #1
 8000dcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dce:	4b6b      	ldr	r3, [pc, #428]	@ (8000f7c <MX_GPIO_Init+0x20c>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	613b      	str	r3, [r7, #16]
 8000dd8:	693b      	ldr	r3, [r7, #16]
 __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	4b67      	ldr	r3, [pc, #412]	@ (8000f7c <MX_GPIO_Init+0x20c>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de2:	4a66      	ldr	r2, [pc, #408]	@ (8000f7c <MX_GPIO_Init+0x20c>)
 8000de4:	f043 0302 	orr.w	r3, r3, #2
 8000de8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dea:	4b64      	ldr	r3, [pc, #400]	@ (8000f7c <MX_GPIO_Init+0x20c>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dee:	f003 0302 	and.w	r3, r3, #2
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]
 __HAL_RCC_GPIOD_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	60bb      	str	r3, [r7, #8]
 8000dfa:	4b60      	ldr	r3, [pc, #384]	@ (8000f7c <MX_GPIO_Init+0x20c>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfe:	4a5f      	ldr	r2, [pc, #380]	@ (8000f7c <MX_GPIO_Init+0x20c>)
 8000e00:	f043 0308 	orr.w	r3, r3, #8
 8000e04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e06:	4b5d      	ldr	r3, [pc, #372]	@ (8000f7c <MX_GPIO_Init+0x20c>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e0a:	f003 0308 	and.w	r3, r3, #8
 8000e0e:	60bb      	str	r3, [r7, #8]
 8000e10:	68bb      	ldr	r3, [r7, #8]
 __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	607b      	str	r3, [r7, #4]
 8000e16:	4b59      	ldr	r3, [pc, #356]	@ (8000f7c <MX_GPIO_Init+0x20c>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1a:	4a58      	ldr	r2, [pc, #352]	@ (8000f7c <MX_GPIO_Init+0x20c>)
 8000e1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e22:	4b56      	ldr	r3, [pc, #344]	@ (8000f7c <MX_GPIO_Init+0x20c>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e2a:	607b      	str	r3, [r7, #4]
 8000e2c:	687b      	ldr	r3, [r7, #4]

 /*Configure GPIO pin Output Level */
 HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000e34:	4852      	ldr	r0, [pc, #328]	@ (8000f80 <MX_GPIO_Init+0x210>)
 8000e36:	f000 fd5f 	bl	80018f8 <HAL_GPIO_WritePin>

 /*Configure GPIO pin Output Level */
 HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2140      	movs	r1, #64	@ 0x40
 8000e3e:	4851      	ldr	r0, [pc, #324]	@ (8000f84 <MX_GPIO_Init+0x214>)
 8000e40:	f000 fd5a 	bl	80018f8 <HAL_GPIO_WritePin>

 /*Configure GPIO pin : USER_BUTTON_Pin */
 GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000e44:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e48:	61fb      	str	r3, [r7, #28]
 GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e4a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e4e:	623b      	str	r3, [r7, #32]
 GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	627b      	str	r3, [r7, #36]	@ 0x24
 HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000e54:	f107 031c 	add.w	r3, r7, #28
 8000e58:	4619      	mov	r1, r3
 8000e5a:	484b      	ldr	r0, [pc, #300]	@ (8000f88 <MX_GPIO_Init+0x218>)
 8000e5c:	f000 fb88 	bl	8001570 <HAL_GPIO_Init>

 /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
 GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000e60:	2332      	movs	r3, #50	@ 0x32
 8000e62:	61fb      	str	r3, [r7, #28]
 GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e64:	2302      	movs	r3, #2
 8000e66:	623b      	str	r3, [r7, #32]
 GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	627b      	str	r3, [r7, #36]	@ 0x24
 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	62bb      	str	r3, [r7, #40]	@ 0x28
 GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e70:	230b      	movs	r3, #11
 8000e72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e74:	f107 031c 	add.w	r3, r7, #28
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4843      	ldr	r0, [pc, #268]	@ (8000f88 <MX_GPIO_Init+0x218>)
 8000e7c:	f000 fb78 	bl	8001570 <HAL_GPIO_Init>

 /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
 GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000e80:	2386      	movs	r3, #134	@ 0x86
 8000e82:	61fb      	str	r3, [r7, #28]
 GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e84:	2302      	movs	r3, #2
 8000e86:	623b      	str	r3, [r7, #32]
 GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	627b      	str	r3, [r7, #36]	@ 0x24
 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8c:	2303      	movs	r3, #3
 8000e8e:	62bb      	str	r3, [r7, #40]	@ 0x28
 GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e90:	230b      	movs	r3, #11
 8000e92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e94:	f107 031c 	add.w	r3, r7, #28
 8000e98:	4619      	mov	r1, r3
 8000e9a:	483c      	ldr	r0, [pc, #240]	@ (8000f8c <MX_GPIO_Init+0x21c>)
 8000e9c:	f000 fb68 	bl	8001570 <HAL_GPIO_Init>

 /*Configure GPIO pins : LED1_Pin LED3_Pin LED2_Pin */
 GPIO_InitStruct.Pin = LED1_Pin|LED3_Pin|LED2_Pin;
 8000ea0:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000ea4:	61fb      	str	r3, [r7, #28]
 GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	623b      	str	r3, [r7, #32]
 GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	627b      	str	r3, [r7, #36]	@ 0x24
 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
 HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb2:	f107 031c 	add.w	r3, r7, #28
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4831      	ldr	r0, [pc, #196]	@ (8000f80 <MX_GPIO_Init+0x210>)
 8000eba:	f000 fb59 	bl	8001570 <HAL_GPIO_Init>

 /*Configure GPIO pin : RMII_TXD1_Pin */
 GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000ebe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ec2:	61fb      	str	r3, [r7, #28]
 GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	623b      	str	r3, [r7, #32]
 GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	627b      	str	r3, [r7, #36]	@ 0x24
 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ecc:	2303      	movs	r3, #3
 8000ece:	62bb      	str	r3, [r7, #40]	@ 0x28
 GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ed0:	230b      	movs	r3, #11
 8000ed2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000ed4:	f107 031c 	add.w	r3, r7, #28
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4829      	ldr	r0, [pc, #164]	@ (8000f80 <MX_GPIO_Init+0x210>)
 8000edc:	f000 fb48 	bl	8001570 <HAL_GPIO_Init>

 /*Configure GPIO pin : PG6 */
 GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ee0:	2340      	movs	r3, #64	@ 0x40
 8000ee2:	61fb      	str	r3, [r7, #28]
 GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	623b      	str	r3, [r7, #32]
 GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	627b      	str	r3, [r7, #36]	@ 0x24
 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eec:	2300      	movs	r3, #0
 8000eee:	62bb      	str	r3, [r7, #40]	@ 0x28
 HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ef0:	f107 031c 	add.w	r3, r7, #28
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4823      	ldr	r0, [pc, #140]	@ (8000f84 <MX_GPIO_Init+0x214>)
 8000ef8:	f000 fb3a 	bl	8001570 <HAL_GPIO_Init>

 /*Configure GPIO pin : USB_OverCurrent_Pin */
 GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000efc:	2380      	movs	r3, #128	@ 0x80
 8000efe:	61fb      	str	r3, [r7, #28]
 GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f00:	2300      	movs	r3, #0
 8000f02:	623b      	str	r3, [r7, #32]
 GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	627b      	str	r3, [r7, #36]	@ 0x24
 HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000f08:	f107 031c 	add.w	r3, r7, #28
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	481d      	ldr	r0, [pc, #116]	@ (8000f84 <MX_GPIO_Init+0x214>)
 8000f10:	f000 fb2e 	bl	8001570 <HAL_GPIO_Init>

 /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
 GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000f14:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000f18:	61fb      	str	r3, [r7, #28]
 GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	623b      	str	r3, [r7, #32]
 GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	627b      	str	r3, [r7, #36]	@ 0x24
 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f22:	2303      	movs	r3, #3
 8000f24:	62bb      	str	r3, [r7, #40]	@ 0x28
 GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f26:	230a      	movs	r3, #10
 8000f28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2a:	f107 031c 	add.w	r3, r7, #28
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4816      	ldr	r0, [pc, #88]	@ (8000f8c <MX_GPIO_Init+0x21c>)
 8000f32:	f000 fb1d 	bl	8001570 <HAL_GPIO_Init>

 /*Configure GPIO pin : USB_VBUS_Pin */
 GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000f36:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f3a:	61fb      	str	r3, [r7, #28]
 GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	623b      	str	r3, [r7, #32]
 GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	627b      	str	r3, [r7, #36]	@ 0x24
 HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f44:	f107 031c 	add.w	r3, r7, #28
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4810      	ldr	r0, [pc, #64]	@ (8000f8c <MX_GPIO_Init+0x21c>)
 8000f4c:	f000 fb10 	bl	8001570 <HAL_GPIO_Init>

 /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
 GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000f50:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000f54:	61fb      	str	r3, [r7, #28]
 GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f56:	2302      	movs	r3, #2
 8000f58:	623b      	str	r3, [r7, #32]
 GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	627b      	str	r3, [r7, #36]	@ 0x24
 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f5e:	2303      	movs	r3, #3
 8000f60:	62bb      	str	r3, [r7, #40]	@ 0x28
 GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f62:	230b      	movs	r3, #11
 8000f64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f66:	f107 031c 	add.w	r3, r7, #28
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4805      	ldr	r0, [pc, #20]	@ (8000f84 <MX_GPIO_Init+0x214>)
 8000f6e:	f000 faff 	bl	8001570 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f72:	bf00      	nop
 8000f74:	3730      	adds	r7, #48	@ 0x30
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40023800 	.word	0x40023800
 8000f80:	40020400 	.word	0x40020400
 8000f84:	40021800 	.word	0x40021800
 8000f88:	40020800 	.word	0x40020800
 8000f8c:	40020000 	.word	0x40020000

08000f90 <delayRead>:

static void delayRead (delay_t* delay)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
	delay->elapsedTime = HAL_GetTick() - delay->startTime;
 8000f98:	f000 f9d4 	bl	8001344 <HAL_GetTick>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	1ad2      	subs	r2, r2, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	605a      	str	r2, [r3, #4]
	delay->running = (delay->elapsedTime <= delay->duration);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	685a      	ldr	r2, [r3, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	bf94      	ite	ls
 8000fb4:	2301      	movls	r3, #1
 8000fb6:	2300      	movhi	r3, #0
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	731a      	strb	r2, [r3, #12]
}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
	...

08000fc8 <buttonInit>:
/************************************
 * BUTTON GLOBAL FUNCTIONS
 ************************************/
void buttonInit ()
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
	MX_GPIO_Init();
 8000fcc:	f7ff fed0 	bl	8000d70 <MX_GPIO_Init>
	userButton.State = BUTTON_UP;
 8000fd0:	4b07      	ldr	r3, [pc, #28]	@ (8000ff0 <buttonInit+0x28>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	701a      	strb	r2, [r3, #0]
	userButton.isPressed = NOT_PRESSED;
 8000fd6:	4b06      	ldr	r3, [pc, #24]	@ (8000ff0 <buttonInit+0x28>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	751a      	strb	r2, [r3, #20]
	delayInit(&userButton.debounceDelay);
 8000fdc:	4805      	ldr	r0, [pc, #20]	@ (8000ff4 <buttonInit+0x2c>)
 8000fde:	f000 f88f 	bl	8001100 <delayInit>
	delayWrite(&userButton.debounceDelay, DEBOUNCE);
 8000fe2:	2164      	movs	r1, #100	@ 0x64
 8000fe4:	4803      	ldr	r0, [pc, #12]	@ (8000ff4 <buttonInit+0x2c>)
 8000fe6:	f000 f8b8 	bl	800115a <delayWrite>
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20000120 	.word	0x20000120
 8000ff4:	20000124 	.word	0x20000124

08000ff8 <buttonFSM>:

void buttonFSM()
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
	switch (userButton.State)
 8000ffc:	4b3b      	ldr	r3, [pc, #236]	@ (80010ec <buttonFSM+0xf4>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	2b03      	cmp	r3, #3
 8001002:	d867      	bhi.n	80010d4 <buttonFSM+0xdc>
 8001004:	a201      	add	r2, pc, #4	@ (adr r2, 800100c <buttonFSM+0x14>)
 8001006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800100a:	bf00      	nop
 800100c:	0800101d 	.word	0x0800101d
 8001010:	0800106b 	.word	0x0800106b
 8001014:	08001041 	.word	0x08001041
 8001018:	0800109d 	.word	0x0800109d
	{

	case BUTTON_UP:

		userButton.isPressed = NOT_PRESSED;
 800101c:	4b33      	ldr	r3, [pc, #204]	@ (80010ec <buttonFSM+0xf4>)
 800101e:	2200      	movs	r2, #0
 8001020:	751a      	strb	r2, [r3, #20]
		if (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin))
 8001022:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001026:	4832      	ldr	r0, [pc, #200]	@ (80010f0 <buttonFSM+0xf8>)
 8001028:	f000 fc4e 	bl	80018c8 <HAL_GPIO_ReadPin>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d053      	beq.n	80010da <buttonFSM+0xe2>
		{
			userButton.State = BUTTON_FALLING;
 8001032:	4b2e      	ldr	r3, [pc, #184]	@ (80010ec <buttonFSM+0xf4>)
 8001034:	2201      	movs	r2, #1
 8001036:	701a      	strb	r2, [r3, #0]
			delayStart(&userButton.debounceDelay);
 8001038:	482e      	ldr	r0, [pc, #184]	@ (80010f4 <buttonFSM+0xfc>)
 800103a:	f000 f877 	bl	800112c <delayStart>
		}
		break;
 800103e:	e04c      	b.n	80010da <buttonFSM+0xe2>

	case BUTTON_DOWN:

		userButton.isPressed = PRESSED;
 8001040:	4b2a      	ldr	r3, [pc, #168]	@ (80010ec <buttonFSM+0xf4>)
 8001042:	2201      	movs	r2, #1
 8001044:	751a      	strb	r2, [r3, #20]
		if (!HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin))
 8001046:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800104a:	4829      	ldr	r0, [pc, #164]	@ (80010f0 <buttonFSM+0xf8>)
 800104c:	f000 fc3c 	bl	80018c8 <HAL_GPIO_ReadPin>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d143      	bne.n	80010de <buttonFSM+0xe6>
		{
			userButton.State = BUTTON_RISING;
 8001056:	4b25      	ldr	r3, [pc, #148]	@ (80010ec <buttonFSM+0xf4>)
 8001058:	2203      	movs	r2, #3
 800105a:	701a      	strb	r2, [r3, #0]
			delayStart(&userButton.debounceDelay);
 800105c:	4825      	ldr	r0, [pc, #148]	@ (80010f4 <buttonFSM+0xfc>)
 800105e:	f000 f865 	bl	800112c <delayStart>
			lcdPrintString("holi");
 8001062:	4825      	ldr	r0, [pc, #148]	@ (80010f8 <buttonFSM+0x100>)
 8001064:	f7ff fd90 	bl	8000b88 <lcdPrintString>
		}
		break;
 8001068:	e039      	b.n	80010de <buttonFSM+0xe6>

	case BUTTON_FALLING:

		if (!delayIsRunning(&userButton.debounceDelay))
 800106a:	4822      	ldr	r0, [pc, #136]	@ (80010f4 <buttonFSM+0xfc>)
 800106c:	f000 f883 	bl	8001176 <delayIsRunning>
 8001070:	4603      	mov	r3, r0
 8001072:	f083 0301 	eor.w	r3, r3, #1
 8001076:	b2db      	uxtb	r3, r3
 8001078:	2b00      	cmp	r3, #0
 800107a:	d032      	beq.n	80010e2 <buttonFSM+0xea>
		{
			if (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin))
 800107c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001080:	481b      	ldr	r0, [pc, #108]	@ (80010f0 <buttonFSM+0xf8>)
 8001082:	f000 fc21 	bl	80018c8 <HAL_GPIO_ReadPin>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d003      	beq.n	8001094 <buttonFSM+0x9c>
			{
				userButton.State = BUTTON_DOWN;
 800108c:	4b17      	ldr	r3, [pc, #92]	@ (80010ec <buttonFSM+0xf4>)
 800108e:	2202      	movs	r2, #2
 8001090:	701a      	strb	r2, [r3, #0]
				break;
 8001092:	e029      	b.n	80010e8 <buttonFSM+0xf0>
			} else
			{
				userButton.State = BUTTON_UP;
 8001094:	4b15      	ldr	r3, [pc, #84]	@ (80010ec <buttonFSM+0xf4>)
 8001096:	2200      	movs	r2, #0
 8001098:	701a      	strb	r2, [r3, #0]
				break;
 800109a:	e025      	b.n	80010e8 <buttonFSM+0xf0>
		}
		break;

	case BUTTON_RISING:

		if (!delayIsRunning(&userButton.debounceDelay))
 800109c:	4815      	ldr	r0, [pc, #84]	@ (80010f4 <buttonFSM+0xfc>)
 800109e:	f000 f86a 	bl	8001176 <delayIsRunning>
 80010a2:	4603      	mov	r3, r0
 80010a4:	f083 0301 	eor.w	r3, r3, #1
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d01b      	beq.n	80010e6 <buttonFSM+0xee>
		{
			if (!HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin))
 80010ae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010b2:	480f      	ldr	r0, [pc, #60]	@ (80010f0 <buttonFSM+0xf8>)
 80010b4:	f000 fc08 	bl	80018c8 <HAL_GPIO_ReadPin>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d106      	bne.n	80010cc <buttonFSM+0xd4>
			{
				uartSendString((uint8_t*)"hola");
 80010be:	480f      	ldr	r0, [pc, #60]	@ (80010fc <buttonFSM+0x104>)
 80010c0:	f7ff fe2c 	bl	8000d1c <uartSendString>
				userButton.State = BUTTON_UP;
 80010c4:	4b09      	ldr	r3, [pc, #36]	@ (80010ec <buttonFSM+0xf4>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	701a      	strb	r2, [r3, #0]
				break;
 80010ca:	e00d      	b.n	80010e8 <buttonFSM+0xf0>
			} else
			{
				userButton.State = BUTTON_DOWN;
 80010cc:	4b07      	ldr	r3, [pc, #28]	@ (80010ec <buttonFSM+0xf4>)
 80010ce:	2202      	movs	r2, #2
 80010d0:	701a      	strb	r2, [r3, #0]
				break;
 80010d2:	e009      	b.n	80010e8 <buttonFSM+0xf0>
			}
		}
		break;
	default:
		Error_Handler();
 80010d4:	f7ff fa7e 	bl	80005d4 <Error_Handler>
	}
}
 80010d8:	e006      	b.n	80010e8 <buttonFSM+0xf0>
		break;
 80010da:	bf00      	nop
 80010dc:	e004      	b.n	80010e8 <buttonFSM+0xf0>
		break;
 80010de:	bf00      	nop
 80010e0:	e002      	b.n	80010e8 <buttonFSM+0xf0>
		break;
 80010e2:	bf00      	nop
 80010e4:	e000      	b.n	80010e8 <buttonFSM+0xf0>
		break;
 80010e6:	bf00      	nop
}
 80010e8:	bf00      	nop
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20000120 	.word	0x20000120
 80010f0:	40020800 	.word	0x40020800
 80010f4:	20000124 	.word	0x20000124
 80010f8:	080035c8 	.word	0x080035c8
 80010fc:	080035d0 	.word	0x080035d0

08001100 <delayInit>:
}
/************************************
 * DELAY GLOBAL FUNCTIONS
 ************************************/
void delayInit (delay_t* delay)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
	delay->duration = NO_DURATION;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2200      	movs	r2, #0
 800110c:	609a      	str	r2, [r3, #8]
	delay->startTime = HAL_GetTick();
 800110e:	f000 f919 	bl	8001344 <HAL_GetTick>
 8001112:	4602      	mov	r2, r0
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	601a      	str	r2, [r3, #0]
	delay->elapsedTime = NO_DURATION;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2200      	movs	r2, #0
 800111c:	605a      	str	r2, [r3, #4]
	delay->running = NOT_RUNNING;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2200      	movs	r2, #0
 8001122:	731a      	strb	r2, [r3, #12]
}
 8001124:	bf00      	nop
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <delayStart>:

void delayStart (delay_t* delay)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
	if (!(delay->running))
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	7b1b      	ldrb	r3, [r3, #12]
 8001138:	f083 0301 	eor.w	r3, r3, #1
 800113c:	b2db      	uxtb	r3, r3
 800113e:	2b00      	cmp	r3, #0
 8001140:	d007      	beq.n	8001152 <delayStart+0x26>
	{
		delay->startTime = HAL_GetTick();
 8001142:	f000 f8ff 	bl	8001344 <HAL_GetTick>
 8001146:	4602      	mov	r2, r0
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	601a      	str	r2, [r3, #0]
		delay->running = RUNNING;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2201      	movs	r2, #1
 8001150:	731a      	strb	r2, [r3, #12]
	}
}
 8001152:	bf00      	nop
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <delayWrite>:

void delayWrite (delay_t* delay, tick_t duration)
{
 800115a:	b480      	push	{r7}
 800115c:	b083      	sub	sp, #12
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
 8001162:	6039      	str	r1, [r7, #0]
	delay->duration = duration;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	683a      	ldr	r2, [r7, #0]
 8001168:	609a      	str	r2, [r3, #8]
}
 800116a:	bf00      	nop
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr

08001176 <delayIsRunning>:

bool_t delayIsRunning (delay_t* delay)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b082      	sub	sp, #8
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
	delayRead(delay);
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f7ff ff06 	bl	8000f90 <delayRead>
	return delay->running;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	7b1b      	ldrb	r3, [r3, #12]
}
 8001188:	4618      	mov	r0, r3
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <updateData>:

/************************************
 * STATIC FUNCTIONS
 ************************************/
static void updateData()
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0

}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
	...

080011a0 <displayFSMInit>:
/************************************
 * GLOBAL FUNCTIONS
 ************************************/

void displayFSMInit()
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
	currentData.currentState = DISPLAY_DATA;
 80011a6:	4b20      	ldr	r3, [pc, #128]	@ (8001228 <displayFSMInit+0x88>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	701a      	strb	r2, [r3, #0]
	currentData.currentDateTime.dayOfMonth = 16;
 80011ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001228 <displayFSMInit+0x88>)
 80011ae:	2210      	movs	r2, #16
 80011b0:	719a      	strb	r2, [r3, #6]
	currentData.currentDateTime.month = 11;
 80011b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001228 <displayFSMInit+0x88>)
 80011b4:	220b      	movs	r2, #11
 80011b6:	71da      	strb	r2, [r3, #7]
	currentData.currentDateTime.year = 1995;
 80011b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001228 <displayFSMInit+0x88>)
 80011ba:	f240 72cb 	movw	r2, #1995	@ 0x7cb
 80011be:	811a      	strh	r2, [r3, #8]
	currentData.highFlanksCount = 0;
 80011c0:	4b19      	ldr	r3, [pc, #100]	@ (8001228 <displayFSMInit+0x88>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	739a      	strb	r2, [r3, #14]
	currentData.lowFlanksCount = 0;
 80011c6:	4b18      	ldr	r3, [pc, #96]	@ (8001228 <displayFSMInit+0x88>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	73da      	strb	r2, [r3, #15]
	DELAY_MS(1000);
 80011cc:	2300      	movs	r3, #0
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	e01f      	b.n	8001212 <displayFSMInit+0x72>
 80011d2:	4b16      	ldr	r3, [pc, #88]	@ (800122c <displayFSMInit+0x8c>)
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	60bb      	str	r3, [r7, #8]
 80011d8:	4b15      	ldr	r3, [pc, #84]	@ (8001230 <displayFSMInit+0x90>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a15      	ldr	r2, [pc, #84]	@ (8001234 <displayFSMInit+0x94>)
 80011de:	fba2 2303 	umull	r2, r3, r2, r3
 80011e2:	0c9b      	lsrs	r3, r3, #18
 80011e4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80011e8:	fb03 f202 	mul.w	r2, r3, r2
 80011ec:	4b10      	ldr	r3, [pc, #64]	@ (8001230 <displayFSMInit+0x90>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4910      	ldr	r1, [pc, #64]	@ (8001234 <displayFSMInit+0x94>)
 80011f2:	fba1 1303 	umull	r1, r3, r1, r3
 80011f6:	0c9b      	lsrs	r3, r3, #18
 80011f8:	085b      	lsrs	r3, r3, #1
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	607b      	str	r3, [r7, #4]
 80011fe:	4b0b      	ldr	r3, [pc, #44]	@ (800122c <displayFSMInit+0x8c>)
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	68ba      	ldr	r2, [r7, #8]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	429a      	cmp	r2, r3
 800120a:	d8f8      	bhi.n	80011fe <displayFSMInit+0x5e>
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	3301      	adds	r3, #1
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001218:	d3db      	bcc.n	80011d2 <displayFSMInit+0x32>
}
 800121a:	bf00      	nop
 800121c:	bf00      	nop
 800121e:	3714      	adds	r7, #20
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	20000138 	.word	0x20000138
 800122c:	e000e010 	.word	0xe000e010
 8001230:	20000000 	.word	0x20000000
 8001234:	431bde83 	.word	0x431bde83

08001238 <displayFSM>:
void displayFSM()
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
	static uint8_t n = 9;
	static uint8_t* s = "Nov";
	updateData();
 800123c:	f7ff ffa8 	bl	8001190 <updateData>
	switch (currentData.currentState)
 8001240:	4b0a      	ldr	r3, [pc, #40]	@ (800126c <displayFSM+0x34>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d002      	beq.n	800124e <displayFSM+0x16>
 8001248:	2b01      	cmp	r3, #1
 800124a:	d00b      	beq.n	8001264 <displayFSM+0x2c>
 800124c:	e006      	b.n	800125c <displayFSM+0x24>
	{
	case DISPLAY_DATA:
		static uint8_t i=0;
		//lcdSetCursor(i%ROWS, 0);
		//lcdPrintfCenteredString(displayBuffer[i], ' ', n, s);
		i++;
 800124e:	4b08      	ldr	r3, [pc, #32]	@ (8001270 <displayFSM+0x38>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	3301      	adds	r3, #1
 8001254:	b2da      	uxtb	r2, r3
 8001256:	4b06      	ldr	r3, [pc, #24]	@ (8001270 <displayFSM+0x38>)
 8001258:	701a      	strb	r2, [r3, #0]
		break;
 800125a:	e004      	b.n	8001266 <displayFSM+0x2e>
	case DISPLAY_CONFIG:
		break;
	default:
		uartSendString((uint8_t*)"error displayFSM");
 800125c:	4805      	ldr	r0, [pc, #20]	@ (8001274 <displayFSM+0x3c>)
 800125e:	f7ff fd5d 	bl	8000d1c <uartSendString>
		break;
 8001262:	e000      	b.n	8001266 <displayFSM+0x2e>
		break;
 8001264:	bf00      	nop
	}
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000138 	.word	0x20000138
 8001270:	20000152 	.word	0x20000152
 8001274:	080035d8 	.word	0x080035d8

08001278 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800127c:	4b0e      	ldr	r3, [pc, #56]	@ (80012b8 <HAL_Init+0x40>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a0d      	ldr	r2, [pc, #52]	@ (80012b8 <HAL_Init+0x40>)
 8001282:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001286:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001288:	4b0b      	ldr	r3, [pc, #44]	@ (80012b8 <HAL_Init+0x40>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a0a      	ldr	r2, [pc, #40]	@ (80012b8 <HAL_Init+0x40>)
 800128e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001292:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001294:	4b08      	ldr	r3, [pc, #32]	@ (80012b8 <HAL_Init+0x40>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a07      	ldr	r2, [pc, #28]	@ (80012b8 <HAL_Init+0x40>)
 800129a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800129e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012a0:	2003      	movs	r0, #3
 80012a2:	f000 f931 	bl	8001508 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012a6:	2000      	movs	r0, #0
 80012a8:	f000 f808 	bl	80012bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012ac:	f7ff f99e 	bl	80005ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40023c00 	.word	0x40023c00

080012bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012c4:	4b12      	ldr	r3, [pc, #72]	@ (8001310 <HAL_InitTick+0x54>)
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	4b12      	ldr	r3, [pc, #72]	@ (8001314 <HAL_InitTick+0x58>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	4619      	mov	r1, r3
 80012ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012da:	4618      	mov	r0, r3
 80012dc:	f000 f93b 	bl	8001556 <HAL_SYSTICK_Config>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e00e      	b.n	8001308 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2b0f      	cmp	r3, #15
 80012ee:	d80a      	bhi.n	8001306 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012f0:	2200      	movs	r2, #0
 80012f2:	6879      	ldr	r1, [r7, #4]
 80012f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012f8:	f000 f911 	bl	800151e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012fc:	4a06      	ldr	r2, [pc, #24]	@ (8001318 <HAL_InitTick+0x5c>)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001302:	2300      	movs	r3, #0
 8001304:	e000      	b.n	8001308 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
}
 8001308:	4618      	mov	r0, r3
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	20000000 	.word	0x20000000
 8001314:	20000010 	.word	0x20000010
 8001318:	2000000c 	.word	0x2000000c

0800131c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001320:	4b06      	ldr	r3, [pc, #24]	@ (800133c <HAL_IncTick+0x20>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	461a      	mov	r2, r3
 8001326:	4b06      	ldr	r3, [pc, #24]	@ (8001340 <HAL_IncTick+0x24>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4413      	add	r3, r2
 800132c:	4a04      	ldr	r2, [pc, #16]	@ (8001340 <HAL_IncTick+0x24>)
 800132e:	6013      	str	r3, [r2, #0]
}
 8001330:	bf00      	nop
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	20000010 	.word	0x20000010
 8001340:	20000154 	.word	0x20000154

08001344 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  return uwTick;
 8001348:	4b03      	ldr	r3, [pc, #12]	@ (8001358 <HAL_GetTick+0x14>)
 800134a:	681b      	ldr	r3, [r3, #0]
}
 800134c:	4618      	mov	r0, r3
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	20000154 	.word	0x20000154

0800135c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001364:	f7ff ffee 	bl	8001344 <HAL_GetTick>
 8001368:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001374:	d005      	beq.n	8001382 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001376:	4b0a      	ldr	r3, [pc, #40]	@ (80013a0 <HAL_Delay+0x44>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	461a      	mov	r2, r3
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	4413      	add	r3, r2
 8001380:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001382:	bf00      	nop
 8001384:	f7ff ffde 	bl	8001344 <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	68fa      	ldr	r2, [r7, #12]
 8001390:	429a      	cmp	r2, r3
 8001392:	d8f7      	bhi.n	8001384 <HAL_Delay+0x28>
  {
  }
}
 8001394:	bf00      	nop
 8001396:	bf00      	nop
 8001398:	3710      	adds	r7, #16
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20000010 	.word	0x20000010

080013a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f003 0307 	and.w	r3, r3, #7
 80013b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013b4:	4b0c      	ldr	r3, [pc, #48]	@ (80013e8 <__NVIC_SetPriorityGrouping+0x44>)
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ba:	68ba      	ldr	r2, [r7, #8]
 80013bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013c0:	4013      	ands	r3, r2
 80013c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013d6:	4a04      	ldr	r2, [pc, #16]	@ (80013e8 <__NVIC_SetPriorityGrouping+0x44>)
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	60d3      	str	r3, [r2, #12]
}
 80013dc:	bf00      	nop
 80013de:	3714      	adds	r7, #20
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr
 80013e8:	e000ed00 	.word	0xe000ed00

080013ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013f0:	4b04      	ldr	r3, [pc, #16]	@ (8001404 <__NVIC_GetPriorityGrouping+0x18>)
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	0a1b      	lsrs	r3, r3, #8
 80013f6:	f003 0307 	and.w	r3, r3, #7
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	e000ed00 	.word	0xe000ed00

08001408 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	6039      	str	r1, [r7, #0]
 8001412:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001418:	2b00      	cmp	r3, #0
 800141a:	db0a      	blt.n	8001432 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	b2da      	uxtb	r2, r3
 8001420:	490c      	ldr	r1, [pc, #48]	@ (8001454 <__NVIC_SetPriority+0x4c>)
 8001422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001426:	0112      	lsls	r2, r2, #4
 8001428:	b2d2      	uxtb	r2, r2
 800142a:	440b      	add	r3, r1
 800142c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001430:	e00a      	b.n	8001448 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	b2da      	uxtb	r2, r3
 8001436:	4908      	ldr	r1, [pc, #32]	@ (8001458 <__NVIC_SetPriority+0x50>)
 8001438:	79fb      	ldrb	r3, [r7, #7]
 800143a:	f003 030f 	and.w	r3, r3, #15
 800143e:	3b04      	subs	r3, #4
 8001440:	0112      	lsls	r2, r2, #4
 8001442:	b2d2      	uxtb	r2, r2
 8001444:	440b      	add	r3, r1
 8001446:	761a      	strb	r2, [r3, #24]
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr
 8001454:	e000e100 	.word	0xe000e100
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800145c:	b480      	push	{r7}
 800145e:	b089      	sub	sp, #36	@ 0x24
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	f003 0307 	and.w	r3, r3, #7
 800146e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	f1c3 0307 	rsb	r3, r3, #7
 8001476:	2b04      	cmp	r3, #4
 8001478:	bf28      	it	cs
 800147a:	2304      	movcs	r3, #4
 800147c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	3304      	adds	r3, #4
 8001482:	2b06      	cmp	r3, #6
 8001484:	d902      	bls.n	800148c <NVIC_EncodePriority+0x30>
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	3b03      	subs	r3, #3
 800148a:	e000      	b.n	800148e <NVIC_EncodePriority+0x32>
 800148c:	2300      	movs	r3, #0
 800148e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001490:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	43da      	mvns	r2, r3
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	401a      	ands	r2, r3
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014a4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	fa01 f303 	lsl.w	r3, r1, r3
 80014ae:	43d9      	mvns	r1, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b4:	4313      	orrs	r3, r2
         );
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3724      	adds	r7, #36	@ 0x24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
	...

080014c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	3b01      	subs	r3, #1
 80014d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014d4:	d301      	bcc.n	80014da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014d6:	2301      	movs	r3, #1
 80014d8:	e00f      	b.n	80014fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014da:	4a0a      	ldr	r2, [pc, #40]	@ (8001504 <SysTick_Config+0x40>)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3b01      	subs	r3, #1
 80014e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014e2:	210f      	movs	r1, #15
 80014e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80014e8:	f7ff ff8e 	bl	8001408 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014ec:	4b05      	ldr	r3, [pc, #20]	@ (8001504 <SysTick_Config+0x40>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014f2:	4b04      	ldr	r3, [pc, #16]	@ (8001504 <SysTick_Config+0x40>)
 80014f4:	2207      	movs	r2, #7
 80014f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014f8:	2300      	movs	r3, #0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	e000e010 	.word	0xe000e010

08001508 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f7ff ff47 	bl	80013a4 <__NVIC_SetPriorityGrouping>
}
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800151e:	b580      	push	{r7, lr}
 8001520:	b086      	sub	sp, #24
 8001522:	af00      	add	r7, sp, #0
 8001524:	4603      	mov	r3, r0
 8001526:	60b9      	str	r1, [r7, #8]
 8001528:	607a      	str	r2, [r7, #4]
 800152a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001530:	f7ff ff5c 	bl	80013ec <__NVIC_GetPriorityGrouping>
 8001534:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	68b9      	ldr	r1, [r7, #8]
 800153a:	6978      	ldr	r0, [r7, #20]
 800153c:	f7ff ff8e 	bl	800145c <NVIC_EncodePriority>
 8001540:	4602      	mov	r2, r0
 8001542:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001546:	4611      	mov	r1, r2
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff ff5d 	bl	8001408 <__NVIC_SetPriority>
}
 800154e:	bf00      	nop
 8001550:	3718      	adds	r7, #24
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b082      	sub	sp, #8
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f7ff ffb0 	bl	80014c4 <SysTick_Config>
 8001564:	4603      	mov	r3, r0
}
 8001566:	4618      	mov	r0, r3
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
	...

08001570 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001570:	b480      	push	{r7}
 8001572:	b089      	sub	sp, #36	@ 0x24
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800157a:	2300      	movs	r3, #0
 800157c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800157e:	2300      	movs	r3, #0
 8001580:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001582:	2300      	movs	r3, #0
 8001584:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001586:	2300      	movs	r3, #0
 8001588:	61fb      	str	r3, [r7, #28]
 800158a:	e177      	b.n	800187c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800158c:	2201      	movs	r2, #1
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	697a      	ldr	r2, [r7, #20]
 800159c:	4013      	ands	r3, r2
 800159e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015a0:	693a      	ldr	r2, [r7, #16]
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	f040 8166 	bne.w	8001876 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f003 0303 	and.w	r3, r3, #3
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d005      	beq.n	80015c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d130      	bne.n	8001624 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	2203      	movs	r2, #3
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	43db      	mvns	r3, r3
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	4013      	ands	r3, r2
 80015d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	68da      	ldr	r2, [r3, #12]
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	fa02 f303 	lsl.w	r3, r2, r3
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015f8:	2201      	movs	r2, #1
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	43db      	mvns	r3, r3
 8001602:	69ba      	ldr	r2, [r7, #24]
 8001604:	4013      	ands	r3, r2
 8001606:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	091b      	lsrs	r3, r3, #4
 800160e:	f003 0201 	and.w	r2, r3, #1
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	4313      	orrs	r3, r2
 800161c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f003 0303 	and.w	r3, r3, #3
 800162c:	2b03      	cmp	r3, #3
 800162e:	d017      	beq.n	8001660 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	2203      	movs	r2, #3
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	43db      	mvns	r3, r3
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	4013      	ands	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	689a      	ldr	r2, [r3, #8]
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	4313      	orrs	r3, r2
 8001658:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f003 0303 	and.w	r3, r3, #3
 8001668:	2b02      	cmp	r3, #2
 800166a:	d123      	bne.n	80016b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	08da      	lsrs	r2, r3, #3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	3208      	adds	r2, #8
 8001674:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001678:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	f003 0307 	and.w	r3, r3, #7
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	220f      	movs	r2, #15
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	43db      	mvns	r3, r3
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	4013      	ands	r3, r2
 800168e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	691a      	ldr	r2, [r3, #16]
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	f003 0307 	and.w	r3, r3, #7
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	08da      	lsrs	r2, r3, #3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	3208      	adds	r2, #8
 80016ae:	69b9      	ldr	r1, [r7, #24]
 80016b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	2203      	movs	r2, #3
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	43db      	mvns	r3, r3
 80016c6:	69ba      	ldr	r2, [r7, #24]
 80016c8:	4013      	ands	r3, r2
 80016ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f003 0203 	and.w	r2, r3, #3
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	4313      	orrs	r3, r2
 80016e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	f000 80c0 	beq.w	8001876 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	4b66      	ldr	r3, [pc, #408]	@ (8001894 <HAL_GPIO_Init+0x324>)
 80016fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016fe:	4a65      	ldr	r2, [pc, #404]	@ (8001894 <HAL_GPIO_Init+0x324>)
 8001700:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001704:	6453      	str	r3, [r2, #68]	@ 0x44
 8001706:	4b63      	ldr	r3, [pc, #396]	@ (8001894 <HAL_GPIO_Init+0x324>)
 8001708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800170a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001712:	4a61      	ldr	r2, [pc, #388]	@ (8001898 <HAL_GPIO_Init+0x328>)
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	089b      	lsrs	r3, r3, #2
 8001718:	3302      	adds	r3, #2
 800171a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800171e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	f003 0303 	and.w	r3, r3, #3
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	220f      	movs	r2, #15
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	43db      	mvns	r3, r3
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	4013      	ands	r3, r2
 8001734:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a58      	ldr	r2, [pc, #352]	@ (800189c <HAL_GPIO_Init+0x32c>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d037      	beq.n	80017ae <HAL_GPIO_Init+0x23e>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a57      	ldr	r2, [pc, #348]	@ (80018a0 <HAL_GPIO_Init+0x330>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d031      	beq.n	80017aa <HAL_GPIO_Init+0x23a>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a56      	ldr	r2, [pc, #344]	@ (80018a4 <HAL_GPIO_Init+0x334>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d02b      	beq.n	80017a6 <HAL_GPIO_Init+0x236>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a55      	ldr	r2, [pc, #340]	@ (80018a8 <HAL_GPIO_Init+0x338>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d025      	beq.n	80017a2 <HAL_GPIO_Init+0x232>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a54      	ldr	r2, [pc, #336]	@ (80018ac <HAL_GPIO_Init+0x33c>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d01f      	beq.n	800179e <HAL_GPIO_Init+0x22e>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a53      	ldr	r2, [pc, #332]	@ (80018b0 <HAL_GPIO_Init+0x340>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d019      	beq.n	800179a <HAL_GPIO_Init+0x22a>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a52      	ldr	r2, [pc, #328]	@ (80018b4 <HAL_GPIO_Init+0x344>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d013      	beq.n	8001796 <HAL_GPIO_Init+0x226>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a51      	ldr	r2, [pc, #324]	@ (80018b8 <HAL_GPIO_Init+0x348>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d00d      	beq.n	8001792 <HAL_GPIO_Init+0x222>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a50      	ldr	r2, [pc, #320]	@ (80018bc <HAL_GPIO_Init+0x34c>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d007      	beq.n	800178e <HAL_GPIO_Init+0x21e>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a4f      	ldr	r2, [pc, #316]	@ (80018c0 <HAL_GPIO_Init+0x350>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d101      	bne.n	800178a <HAL_GPIO_Init+0x21a>
 8001786:	2309      	movs	r3, #9
 8001788:	e012      	b.n	80017b0 <HAL_GPIO_Init+0x240>
 800178a:	230a      	movs	r3, #10
 800178c:	e010      	b.n	80017b0 <HAL_GPIO_Init+0x240>
 800178e:	2308      	movs	r3, #8
 8001790:	e00e      	b.n	80017b0 <HAL_GPIO_Init+0x240>
 8001792:	2307      	movs	r3, #7
 8001794:	e00c      	b.n	80017b0 <HAL_GPIO_Init+0x240>
 8001796:	2306      	movs	r3, #6
 8001798:	e00a      	b.n	80017b0 <HAL_GPIO_Init+0x240>
 800179a:	2305      	movs	r3, #5
 800179c:	e008      	b.n	80017b0 <HAL_GPIO_Init+0x240>
 800179e:	2304      	movs	r3, #4
 80017a0:	e006      	b.n	80017b0 <HAL_GPIO_Init+0x240>
 80017a2:	2303      	movs	r3, #3
 80017a4:	e004      	b.n	80017b0 <HAL_GPIO_Init+0x240>
 80017a6:	2302      	movs	r3, #2
 80017a8:	e002      	b.n	80017b0 <HAL_GPIO_Init+0x240>
 80017aa:	2301      	movs	r3, #1
 80017ac:	e000      	b.n	80017b0 <HAL_GPIO_Init+0x240>
 80017ae:	2300      	movs	r3, #0
 80017b0:	69fa      	ldr	r2, [r7, #28]
 80017b2:	f002 0203 	and.w	r2, r2, #3
 80017b6:	0092      	lsls	r2, r2, #2
 80017b8:	4093      	lsls	r3, r2
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	4313      	orrs	r3, r2
 80017be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017c0:	4935      	ldr	r1, [pc, #212]	@ (8001898 <HAL_GPIO_Init+0x328>)
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	089b      	lsrs	r3, r3, #2
 80017c6:	3302      	adds	r3, #2
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017ce:	4b3d      	ldr	r3, [pc, #244]	@ (80018c4 <HAL_GPIO_Init+0x354>)
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	43db      	mvns	r3, r3
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	4013      	ands	r3, r2
 80017dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d003      	beq.n	80017f2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017f2:	4a34      	ldr	r2, [pc, #208]	@ (80018c4 <HAL_GPIO_Init+0x354>)
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017f8:	4b32      	ldr	r3, [pc, #200]	@ (80018c4 <HAL_GPIO_Init+0x354>)
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	43db      	mvns	r3, r3
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	4013      	ands	r3, r2
 8001806:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001810:	2b00      	cmp	r3, #0
 8001812:	d003      	beq.n	800181c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	4313      	orrs	r3, r2
 800181a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800181c:	4a29      	ldr	r2, [pc, #164]	@ (80018c4 <HAL_GPIO_Init+0x354>)
 800181e:	69bb      	ldr	r3, [r7, #24]
 8001820:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001822:	4b28      	ldr	r3, [pc, #160]	@ (80018c4 <HAL_GPIO_Init+0x354>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	43db      	mvns	r3, r3
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	4013      	ands	r3, r2
 8001830:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d003      	beq.n	8001846 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	4313      	orrs	r3, r2
 8001844:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001846:	4a1f      	ldr	r2, [pc, #124]	@ (80018c4 <HAL_GPIO_Init+0x354>)
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800184c:	4b1d      	ldr	r3, [pc, #116]	@ (80018c4 <HAL_GPIO_Init+0x354>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	43db      	mvns	r3, r3
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	4013      	ands	r3, r2
 800185a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d003      	beq.n	8001870 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	4313      	orrs	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001870:	4a14      	ldr	r2, [pc, #80]	@ (80018c4 <HAL_GPIO_Init+0x354>)
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	3301      	adds	r3, #1
 800187a:	61fb      	str	r3, [r7, #28]
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	2b0f      	cmp	r3, #15
 8001880:	f67f ae84 	bls.w	800158c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001884:	bf00      	nop
 8001886:	bf00      	nop
 8001888:	3724      	adds	r7, #36	@ 0x24
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	40023800 	.word	0x40023800
 8001898:	40013800 	.word	0x40013800
 800189c:	40020000 	.word	0x40020000
 80018a0:	40020400 	.word	0x40020400
 80018a4:	40020800 	.word	0x40020800
 80018a8:	40020c00 	.word	0x40020c00
 80018ac:	40021000 	.word	0x40021000
 80018b0:	40021400 	.word	0x40021400
 80018b4:	40021800 	.word	0x40021800
 80018b8:	40021c00 	.word	0x40021c00
 80018bc:	40022000 	.word	0x40022000
 80018c0:	40022400 	.word	0x40022400
 80018c4:	40013c00 	.word	0x40013c00

080018c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	460b      	mov	r3, r1
 80018d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	691a      	ldr	r2, [r3, #16]
 80018d8:	887b      	ldrh	r3, [r7, #2]
 80018da:	4013      	ands	r3, r2
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d002      	beq.n	80018e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018e0:	2301      	movs	r3, #1
 80018e2:	73fb      	strb	r3, [r7, #15]
 80018e4:	e001      	b.n	80018ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018e6:	2300      	movs	r3, #0
 80018e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80018ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3714      	adds	r7, #20
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	460b      	mov	r3, r1
 8001902:	807b      	strh	r3, [r7, #2]
 8001904:	4613      	mov	r3, r2
 8001906:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001908:	787b      	ldrb	r3, [r7, #1]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d003      	beq.n	8001916 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800190e:	887a      	ldrh	r2, [r7, #2]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001914:	e003      	b.n	800191e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001916:	887b      	ldrh	r3, [r7, #2]
 8001918:	041a      	lsls	r2, r3, #16
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	619a      	str	r2, [r3, #24]
}
 800191e:	bf00      	nop
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
	...

0800192c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d101      	bne.n	800193e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e12b      	b.n	8001b96 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001944:	b2db      	uxtb	r3, r3
 8001946:	2b00      	cmp	r3, #0
 8001948:	d106      	bne.n	8001958 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f7fe fe72 	bl	800063c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2224      	movs	r2, #36	@ 0x24
 800195c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f022 0201 	bic.w	r2, r2, #1
 800196e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800197e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800198e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001990:	f001 f954 	bl	8002c3c <HAL_RCC_GetPCLK1Freq>
 8001994:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	4a81      	ldr	r2, [pc, #516]	@ (8001ba0 <HAL_I2C_Init+0x274>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d807      	bhi.n	80019b0 <HAL_I2C_Init+0x84>
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	4a80      	ldr	r2, [pc, #512]	@ (8001ba4 <HAL_I2C_Init+0x278>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	bf94      	ite	ls
 80019a8:	2301      	movls	r3, #1
 80019aa:	2300      	movhi	r3, #0
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	e006      	b.n	80019be <HAL_I2C_Init+0x92>
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	4a7d      	ldr	r2, [pc, #500]	@ (8001ba8 <HAL_I2C_Init+0x27c>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	bf94      	ite	ls
 80019b8:	2301      	movls	r3, #1
 80019ba:	2300      	movhi	r3, #0
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e0e7      	b.n	8001b96 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	4a78      	ldr	r2, [pc, #480]	@ (8001bac <HAL_I2C_Init+0x280>)
 80019ca:	fba2 2303 	umull	r2, r3, r2, r3
 80019ce:	0c9b      	lsrs	r3, r3, #18
 80019d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	68ba      	ldr	r2, [r7, #8]
 80019e2:	430a      	orrs	r2, r1
 80019e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	6a1b      	ldr	r3, [r3, #32]
 80019ec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	4a6a      	ldr	r2, [pc, #424]	@ (8001ba0 <HAL_I2C_Init+0x274>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d802      	bhi.n	8001a00 <HAL_I2C_Init+0xd4>
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	3301      	adds	r3, #1
 80019fe:	e009      	b.n	8001a14 <HAL_I2C_Init+0xe8>
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001a06:	fb02 f303 	mul.w	r3, r2, r3
 8001a0a:	4a69      	ldr	r2, [pc, #420]	@ (8001bb0 <HAL_I2C_Init+0x284>)
 8001a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a10:	099b      	lsrs	r3, r3, #6
 8001a12:	3301      	adds	r3, #1
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	6812      	ldr	r2, [r2, #0]
 8001a18:	430b      	orrs	r3, r1
 8001a1a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	69db      	ldr	r3, [r3, #28]
 8001a22:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001a26:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	495c      	ldr	r1, [pc, #368]	@ (8001ba0 <HAL_I2C_Init+0x274>)
 8001a30:	428b      	cmp	r3, r1
 8001a32:	d819      	bhi.n	8001a68 <HAL_I2C_Init+0x13c>
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	1e59      	subs	r1, r3, #1
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a42:	1c59      	adds	r1, r3, #1
 8001a44:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001a48:	400b      	ands	r3, r1
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d00a      	beq.n	8001a64 <HAL_I2C_Init+0x138>
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	1e59      	subs	r1, r3, #1
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a62:	e051      	b.n	8001b08 <HAL_I2C_Init+0x1dc>
 8001a64:	2304      	movs	r3, #4
 8001a66:	e04f      	b.n	8001b08 <HAL_I2C_Init+0x1dc>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d111      	bne.n	8001a94 <HAL_I2C_Init+0x168>
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	1e58      	subs	r0, r3, #1
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6859      	ldr	r1, [r3, #4]
 8001a78:	460b      	mov	r3, r1
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	440b      	add	r3, r1
 8001a7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a82:	3301      	adds	r3, #1
 8001a84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	bf0c      	ite	eq
 8001a8c:	2301      	moveq	r3, #1
 8001a8e:	2300      	movne	r3, #0
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	e012      	b.n	8001aba <HAL_I2C_Init+0x18e>
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	1e58      	subs	r0, r3, #1
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6859      	ldr	r1, [r3, #4]
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	440b      	add	r3, r1
 8001aa2:	0099      	lsls	r1, r3, #2
 8001aa4:	440b      	add	r3, r1
 8001aa6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001aaa:	3301      	adds	r3, #1
 8001aac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	bf0c      	ite	eq
 8001ab4:	2301      	moveq	r3, #1
 8001ab6:	2300      	movne	r3, #0
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <HAL_I2C_Init+0x196>
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e022      	b.n	8001b08 <HAL_I2C_Init+0x1dc>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d10e      	bne.n	8001ae8 <HAL_I2C_Init+0x1bc>
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	1e58      	subs	r0, r3, #1
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6859      	ldr	r1, [r3, #4]
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	440b      	add	r3, r1
 8001ad8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001adc:	3301      	adds	r3, #1
 8001ade:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ae2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ae6:	e00f      	b.n	8001b08 <HAL_I2C_Init+0x1dc>
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	1e58      	subs	r0, r3, #1
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6859      	ldr	r1, [r3, #4]
 8001af0:	460b      	mov	r3, r1
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	440b      	add	r3, r1
 8001af6:	0099      	lsls	r1, r3, #2
 8001af8:	440b      	add	r3, r1
 8001afa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001afe:	3301      	adds	r3, #1
 8001b00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b04:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001b08:	6879      	ldr	r1, [r7, #4]
 8001b0a:	6809      	ldr	r1, [r1, #0]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	69da      	ldr	r2, [r3, #28]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a1b      	ldr	r3, [r3, #32]
 8001b22:	431a      	orrs	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001b36:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	6911      	ldr	r1, [r2, #16]
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	68d2      	ldr	r2, [r2, #12]
 8001b42:	4311      	orrs	r1, r2
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	6812      	ldr	r2, [r2, #0]
 8001b48:	430b      	orrs	r3, r1
 8001b4a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	695a      	ldr	r2, [r3, #20]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	699b      	ldr	r3, [r3, #24]
 8001b5e:	431a      	orrs	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	430a      	orrs	r2, r1
 8001b66:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f042 0201 	orr.w	r2, r2, #1
 8001b76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2220      	movs	r2, #32
 8001b82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3710      	adds	r7, #16
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	000186a0 	.word	0x000186a0
 8001ba4:	001e847f 	.word	0x001e847f
 8001ba8:	003d08ff 	.word	0x003d08ff
 8001bac:	431bde83 	.word	0x431bde83
 8001bb0:	10624dd3 	.word	0x10624dd3

08001bb4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b088      	sub	sp, #32
 8001bb8:	af02      	add	r7, sp, #8
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	607a      	str	r2, [r7, #4]
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	817b      	strh	r3, [r7, #10]
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001bc8:	f7ff fbbc 	bl	8001344 <HAL_GetTick>
 8001bcc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	2b20      	cmp	r3, #32
 8001bd8:	f040 80e0 	bne.w	8001d9c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	9300      	str	r3, [sp, #0]
 8001be0:	2319      	movs	r3, #25
 8001be2:	2201      	movs	r2, #1
 8001be4:	4970      	ldr	r1, [pc, #448]	@ (8001da8 <HAL_I2C_Master_Transmit+0x1f4>)
 8001be6:	68f8      	ldr	r0, [r7, #12]
 8001be8:	f000 f964 	bl	8001eb4 <I2C_WaitOnFlagUntilTimeout>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	e0d3      	b.n	8001d9e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d101      	bne.n	8001c04 <HAL_I2C_Master_Transmit+0x50>
 8001c00:	2302      	movs	r3, #2
 8001c02:	e0cc      	b.n	8001d9e <HAL_I2C_Master_Transmit+0x1ea>
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d007      	beq.n	8001c2a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f042 0201 	orr.w	r2, r2, #1
 8001c28:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c38:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2221      	movs	r2, #33	@ 0x21
 8001c3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2210      	movs	r2, #16
 8001c46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	893a      	ldrh	r2, [r7, #8]
 8001c5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c60:	b29a      	uxth	r2, r3
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	4a50      	ldr	r2, [pc, #320]	@ (8001dac <HAL_I2C_Master_Transmit+0x1f8>)
 8001c6a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001c6c:	8979      	ldrh	r1, [r7, #10]
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	6a3a      	ldr	r2, [r7, #32]
 8001c72:	68f8      	ldr	r0, [r7, #12]
 8001c74:	f000 f89c 	bl	8001db0 <I2C_MasterRequestWrite>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e08d      	b.n	8001d9e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c82:	2300      	movs	r3, #0
 8001c84:	613b      	str	r3, [r7, #16]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	695b      	ldr	r3, [r3, #20]
 8001c8c:	613b      	str	r3, [r7, #16]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	699b      	ldr	r3, [r3, #24]
 8001c94:	613b      	str	r3, [r7, #16]
 8001c96:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001c98:	e066      	b.n	8001d68 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c9a:	697a      	ldr	r2, [r7, #20]
 8001c9c:	6a39      	ldr	r1, [r7, #32]
 8001c9e:	68f8      	ldr	r0, [r7, #12]
 8001ca0:	f000 fa22 	bl	80020e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d00d      	beq.n	8001cc6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cae:	2b04      	cmp	r3, #4
 8001cb0:	d107      	bne.n	8001cc2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001cc0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e06b      	b.n	8001d9e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cca:	781a      	ldrb	r2, [r3, #0]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cd6:	1c5a      	adds	r2, r3, #1
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	b29a      	uxth	r2, r3
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	b29a      	uxth	r2, r3
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	695b      	ldr	r3, [r3, #20]
 8001cfc:	f003 0304 	and.w	r3, r3, #4
 8001d00:	2b04      	cmp	r3, #4
 8001d02:	d11b      	bne.n	8001d3c <HAL_I2C_Master_Transmit+0x188>
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d017      	beq.n	8001d3c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d10:	781a      	ldrb	r2, [r3, #0]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d1c:	1c5a      	adds	r2, r3, #1
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	3b01      	subs	r3, #1
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d34:	3b01      	subs	r3, #1
 8001d36:	b29a      	uxth	r2, r3
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d3c:	697a      	ldr	r2, [r7, #20]
 8001d3e:	6a39      	ldr	r1, [r7, #32]
 8001d40:	68f8      	ldr	r0, [r7, #12]
 8001d42:	f000 fa19 	bl	8002178 <I2C_WaitOnBTFFlagUntilTimeout>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d00d      	beq.n	8001d68 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d50:	2b04      	cmp	r3, #4
 8001d52:	d107      	bne.n	8001d64 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d62:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e01a      	b.n	8001d9e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d194      	bne.n	8001c9a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2220      	movs	r2, #32
 8001d84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2200      	movs	r2, #0
 8001d94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	e000      	b.n	8001d9e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001d9c:	2302      	movs	r3, #2
  }
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3718      	adds	r7, #24
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	00100002 	.word	0x00100002
 8001dac:	ffff0000 	.word	0xffff0000

08001db0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b088      	sub	sp, #32
 8001db4:	af02      	add	r7, sp, #8
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	607a      	str	r2, [r7, #4]
 8001dba:	603b      	str	r3, [r7, #0]
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dc4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	2b08      	cmp	r3, #8
 8001dca:	d006      	beq.n	8001dda <I2C_MasterRequestWrite+0x2a>
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d003      	beq.n	8001dda <I2C_MasterRequestWrite+0x2a>
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001dd8:	d108      	bne.n	8001dec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001de8:	601a      	str	r2, [r3, #0]
 8001dea:	e00b      	b.n	8001e04 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df0:	2b12      	cmp	r3, #18
 8001df2:	d107      	bne.n	8001e04 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001e02:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	9300      	str	r3, [sp, #0]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001e10:	68f8      	ldr	r0, [r7, #12]
 8001e12:	f000 f84f 	bl	8001eb4 <I2C_WaitOnFlagUntilTimeout>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d00d      	beq.n	8001e38 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e2a:	d103      	bne.n	8001e34 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e32:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e035      	b.n	8001ea4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	691b      	ldr	r3, [r3, #16]
 8001e3c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001e40:	d108      	bne.n	8001e54 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e42:	897b      	ldrh	r3, [r7, #10]
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	461a      	mov	r2, r3
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001e50:	611a      	str	r2, [r3, #16]
 8001e52:	e01b      	b.n	8001e8c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001e54:	897b      	ldrh	r3, [r7, #10]
 8001e56:	11db      	asrs	r3, r3, #7
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	f003 0306 	and.w	r3, r3, #6
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	f063 030f 	orn	r3, r3, #15
 8001e64:	b2da      	uxtb	r2, r3
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	490e      	ldr	r1, [pc, #56]	@ (8001eac <I2C_MasterRequestWrite+0xfc>)
 8001e72:	68f8      	ldr	r0, [r7, #12]
 8001e74:	f000 f898 	bl	8001fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e010      	b.n	8001ea4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001e82:	897b      	ldrh	r3, [r7, #10]
 8001e84:	b2da      	uxtb	r2, r3
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	4907      	ldr	r1, [pc, #28]	@ (8001eb0 <I2C_MasterRequestWrite+0x100>)
 8001e92:	68f8      	ldr	r0, [r7, #12]
 8001e94:	f000 f888 	bl	8001fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e000      	b.n	8001ea4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3718      	adds	r7, #24
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	00010008 	.word	0x00010008
 8001eb0:	00010002 	.word	0x00010002

08001eb4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	603b      	str	r3, [r7, #0]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ec4:	e048      	b.n	8001f58 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001ecc:	d044      	beq.n	8001f58 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ece:	f7ff fa39 	bl	8001344 <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	683a      	ldr	r2, [r7, #0]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d302      	bcc.n	8001ee4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d139      	bne.n	8001f58 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	0c1b      	lsrs	r3, r3, #16
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d10d      	bne.n	8001f0a <I2C_WaitOnFlagUntilTimeout+0x56>
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	695b      	ldr	r3, [r3, #20]
 8001ef4:	43da      	mvns	r2, r3
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	bf0c      	ite	eq
 8001f00:	2301      	moveq	r3, #1
 8001f02:	2300      	movne	r3, #0
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	461a      	mov	r2, r3
 8001f08:	e00c      	b.n	8001f24 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	43da      	mvns	r2, r3
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	4013      	ands	r3, r2
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	bf0c      	ite	eq
 8001f1c:	2301      	moveq	r3, #1
 8001f1e:	2300      	movne	r3, #0
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	461a      	mov	r2, r3
 8001f24:	79fb      	ldrb	r3, [r7, #7]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d116      	bne.n	8001f58 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2220      	movs	r2, #32
 8001f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f44:	f043 0220 	orr.w	r2, r3, #32
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e023      	b.n	8001fa0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	0c1b      	lsrs	r3, r3, #16
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d10d      	bne.n	8001f7e <I2C_WaitOnFlagUntilTimeout+0xca>
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	695b      	ldr	r3, [r3, #20]
 8001f68:	43da      	mvns	r2, r3
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	bf0c      	ite	eq
 8001f74:	2301      	moveq	r3, #1
 8001f76:	2300      	movne	r3, #0
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	e00c      	b.n	8001f98 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	699b      	ldr	r3, [r3, #24]
 8001f84:	43da      	mvns	r2, r3
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	bf0c      	ite	eq
 8001f90:	2301      	moveq	r3, #1
 8001f92:	2300      	movne	r3, #0
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	461a      	mov	r2, r3
 8001f98:	79fb      	ldrb	r3, [r7, #7]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d093      	beq.n	8001ec6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3710      	adds	r7, #16
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	607a      	str	r2, [r7, #4]
 8001fb4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001fb6:	e071      	b.n	800209c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	695b      	ldr	r3, [r3, #20]
 8001fbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fc6:	d123      	bne.n	8002010 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fd6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001fe0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2220      	movs	r2, #32
 8001fec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ffc:	f043 0204 	orr.w	r2, r3, #4
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e067      	b.n	80020e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002016:	d041      	beq.n	800209c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002018:	f7ff f994 	bl	8001344 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	429a      	cmp	r2, r3
 8002026:	d302      	bcc.n	800202e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d136      	bne.n	800209c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	0c1b      	lsrs	r3, r3, #16
 8002032:	b2db      	uxtb	r3, r3
 8002034:	2b01      	cmp	r3, #1
 8002036:	d10c      	bne.n	8002052 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	695b      	ldr	r3, [r3, #20]
 800203e:	43da      	mvns	r2, r3
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	4013      	ands	r3, r2
 8002044:	b29b      	uxth	r3, r3
 8002046:	2b00      	cmp	r3, #0
 8002048:	bf14      	ite	ne
 800204a:	2301      	movne	r3, #1
 800204c:	2300      	moveq	r3, #0
 800204e:	b2db      	uxtb	r3, r3
 8002050:	e00b      	b.n	800206a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	43da      	mvns	r2, r3
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	4013      	ands	r3, r2
 800205e:	b29b      	uxth	r3, r3
 8002060:	2b00      	cmp	r3, #0
 8002062:	bf14      	ite	ne
 8002064:	2301      	movne	r3, #1
 8002066:	2300      	moveq	r3, #0
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2b00      	cmp	r3, #0
 800206c:	d016      	beq.n	800209c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2200      	movs	r2, #0
 8002072:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2220      	movs	r2, #32
 8002078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002088:	f043 0220 	orr.w	r2, r3, #32
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2200      	movs	r2, #0
 8002094:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e021      	b.n	80020e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	0c1b      	lsrs	r3, r3, #16
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d10c      	bne.n	80020c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	695b      	ldr	r3, [r3, #20]
 80020ac:	43da      	mvns	r2, r3
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	4013      	ands	r3, r2
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	bf14      	ite	ne
 80020b8:	2301      	movne	r3, #1
 80020ba:	2300      	moveq	r3, #0
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	e00b      	b.n	80020d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	43da      	mvns	r2, r3
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	4013      	ands	r3, r2
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	bf14      	ite	ne
 80020d2:	2301      	movne	r3, #1
 80020d4:	2300      	moveq	r3, #0
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	2b00      	cmp	r3, #0
 80020da:	f47f af6d 	bne.w	8001fb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80020de:	2300      	movs	r3, #0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3710      	adds	r7, #16
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020f4:	e034      	b.n	8002160 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80020f6:	68f8      	ldr	r0, [r7, #12]
 80020f8:	f000 f886 	bl	8002208 <I2C_IsAcknowledgeFailed>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e034      	b.n	8002170 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800210c:	d028      	beq.n	8002160 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800210e:	f7ff f919 	bl	8001344 <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	68ba      	ldr	r2, [r7, #8]
 800211a:	429a      	cmp	r2, r3
 800211c:	d302      	bcc.n	8002124 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d11d      	bne.n	8002160 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	695b      	ldr	r3, [r3, #20]
 800212a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800212e:	2b80      	cmp	r3, #128	@ 0x80
 8002130:	d016      	beq.n	8002160 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2200      	movs	r2, #0
 8002136:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2220      	movs	r2, #32
 800213c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2200      	movs	r2, #0
 8002144:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800214c:	f043 0220 	orr.w	r2, r3, #32
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2200      	movs	r2, #0
 8002158:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e007      	b.n	8002170 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	695b      	ldr	r3, [r3, #20]
 8002166:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800216a:	2b80      	cmp	r3, #128	@ 0x80
 800216c:	d1c3      	bne.n	80020f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800216e:	2300      	movs	r3, #0
}
 8002170:	4618      	mov	r0, r3
 8002172:	3710      	adds	r7, #16
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002184:	e034      	b.n	80021f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002186:	68f8      	ldr	r0, [r7, #12]
 8002188:	f000 f83e 	bl	8002208 <I2C_IsAcknowledgeFailed>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e034      	b.n	8002200 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800219c:	d028      	beq.n	80021f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800219e:	f7ff f8d1 	bl	8001344 <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	68ba      	ldr	r2, [r7, #8]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d302      	bcc.n	80021b4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d11d      	bne.n	80021f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	f003 0304 	and.w	r3, r3, #4
 80021be:	2b04      	cmp	r3, #4
 80021c0:	d016      	beq.n	80021f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2200      	movs	r2, #0
 80021c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2220      	movs	r2, #32
 80021cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021dc:	f043 0220 	orr.w	r2, r3, #32
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e007      	b.n	8002200 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	695b      	ldr	r3, [r3, #20]
 80021f6:	f003 0304 	and.w	r3, r3, #4
 80021fa:	2b04      	cmp	r3, #4
 80021fc:	d1c3      	bne.n	8002186 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80021fe:	2300      	movs	r3, #0
}
 8002200:	4618      	mov	r0, r3
 8002202:	3710      	adds	r7, #16
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800221a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800221e:	d11b      	bne.n	8002258 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002228:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2220      	movs	r2, #32
 8002234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002244:	f043 0204 	orr.w	r2, r3, #4
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e000      	b.n	800225a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr

08002266 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002266:	b480      	push	{r7}
 8002268:	b083      	sub	sp, #12
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
 800226e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002276:	b2db      	uxtb	r3, r3
 8002278:	2b20      	cmp	r3, #32
 800227a:	d129      	bne.n	80022d0 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2224      	movs	r2, #36	@ 0x24
 8002280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f022 0201 	bic.w	r2, r2, #1
 8002292:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f022 0210 	bic.w	r2, r2, #16
 80022a2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	683a      	ldr	r2, [r7, #0]
 80022b0:	430a      	orrs	r2, r1
 80022b2:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f042 0201 	orr.w	r2, r2, #1
 80022c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2220      	movs	r2, #32
 80022c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80022cc:	2300      	movs	r3, #0
 80022ce:	e000      	b.n	80022d2 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80022d0:	2302      	movs	r3, #2
  }
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr

080022de <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80022de:	b480      	push	{r7}
 80022e0:	b085      	sub	sp, #20
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
 80022e6:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80022e8:	2300      	movs	r3, #0
 80022ea:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	2b20      	cmp	r3, #32
 80022f6:	d12a      	bne.n	800234e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2224      	movs	r2, #36	@ 0x24
 80022fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f022 0201 	bic.w	r2, r2, #1
 800230e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002316:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002318:	89fb      	ldrh	r3, [r7, #14]
 800231a:	f023 030f 	bic.w	r3, r3, #15
 800231e:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	b29a      	uxth	r2, r3
 8002324:	89fb      	ldrh	r3, [r7, #14]
 8002326:	4313      	orrs	r3, r2
 8002328:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	89fa      	ldrh	r2, [r7, #14]
 8002330:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f042 0201 	orr.w	r2, r2, #1
 8002340:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2220      	movs	r2, #32
 8002346:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800234a:	2300      	movs	r3, #0
 800234c:	e000      	b.n	8002350 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800234e:	2302      	movs	r3, #2
  }
}
 8002350:	4618      	mov	r0, r3
 8002352:	3714      	adds	r7, #20
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b086      	sub	sp, #24
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e267      	b.n	800283e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	2b00      	cmp	r3, #0
 8002378:	d075      	beq.n	8002466 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800237a:	4b88      	ldr	r3, [pc, #544]	@ (800259c <HAL_RCC_OscConfig+0x240>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f003 030c 	and.w	r3, r3, #12
 8002382:	2b04      	cmp	r3, #4
 8002384:	d00c      	beq.n	80023a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002386:	4b85      	ldr	r3, [pc, #532]	@ (800259c <HAL_RCC_OscConfig+0x240>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800238e:	2b08      	cmp	r3, #8
 8002390:	d112      	bne.n	80023b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002392:	4b82      	ldr	r3, [pc, #520]	@ (800259c <HAL_RCC_OscConfig+0x240>)
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800239a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800239e:	d10b      	bne.n	80023b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023a0:	4b7e      	ldr	r3, [pc, #504]	@ (800259c <HAL_RCC_OscConfig+0x240>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d05b      	beq.n	8002464 <HAL_RCC_OscConfig+0x108>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d157      	bne.n	8002464 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e242      	b.n	800283e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023c0:	d106      	bne.n	80023d0 <HAL_RCC_OscConfig+0x74>
 80023c2:	4b76      	ldr	r3, [pc, #472]	@ (800259c <HAL_RCC_OscConfig+0x240>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a75      	ldr	r2, [pc, #468]	@ (800259c <HAL_RCC_OscConfig+0x240>)
 80023c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023cc:	6013      	str	r3, [r2, #0]
 80023ce:	e01d      	b.n	800240c <HAL_RCC_OscConfig+0xb0>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80023d8:	d10c      	bne.n	80023f4 <HAL_RCC_OscConfig+0x98>
 80023da:	4b70      	ldr	r3, [pc, #448]	@ (800259c <HAL_RCC_OscConfig+0x240>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a6f      	ldr	r2, [pc, #444]	@ (800259c <HAL_RCC_OscConfig+0x240>)
 80023e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023e4:	6013      	str	r3, [r2, #0]
 80023e6:	4b6d      	ldr	r3, [pc, #436]	@ (800259c <HAL_RCC_OscConfig+0x240>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a6c      	ldr	r2, [pc, #432]	@ (800259c <HAL_RCC_OscConfig+0x240>)
 80023ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023f0:	6013      	str	r3, [r2, #0]
 80023f2:	e00b      	b.n	800240c <HAL_RCC_OscConfig+0xb0>
 80023f4:	4b69      	ldr	r3, [pc, #420]	@ (800259c <HAL_RCC_OscConfig+0x240>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a68      	ldr	r2, [pc, #416]	@ (800259c <HAL_RCC_OscConfig+0x240>)
 80023fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023fe:	6013      	str	r3, [r2, #0]
 8002400:	4b66      	ldr	r3, [pc, #408]	@ (800259c <HAL_RCC_OscConfig+0x240>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a65      	ldr	r2, [pc, #404]	@ (800259c <HAL_RCC_OscConfig+0x240>)
 8002406:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800240a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d013      	beq.n	800243c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002414:	f7fe ff96 	bl	8001344 <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800241a:	e008      	b.n	800242e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800241c:	f7fe ff92 	bl	8001344 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b64      	cmp	r3, #100	@ 0x64
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e207      	b.n	800283e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800242e:	4b5b      	ldr	r3, [pc, #364]	@ (800259c <HAL_RCC_OscConfig+0x240>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d0f0      	beq.n	800241c <HAL_RCC_OscConfig+0xc0>
 800243a:	e014      	b.n	8002466 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800243c:	f7fe ff82 	bl	8001344 <HAL_GetTick>
 8002440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002442:	e008      	b.n	8002456 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002444:	f7fe ff7e 	bl	8001344 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b64      	cmp	r3, #100	@ 0x64
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e1f3      	b.n	800283e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002456:	4b51      	ldr	r3, [pc, #324]	@ (800259c <HAL_RCC_OscConfig+0x240>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d1f0      	bne.n	8002444 <HAL_RCC_OscConfig+0xe8>
 8002462:	e000      	b.n	8002466 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002464:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d063      	beq.n	800253a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002472:	4b4a      	ldr	r3, [pc, #296]	@ (800259c <HAL_RCC_OscConfig+0x240>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f003 030c 	and.w	r3, r3, #12
 800247a:	2b00      	cmp	r3, #0
 800247c:	d00b      	beq.n	8002496 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800247e:	4b47      	ldr	r3, [pc, #284]	@ (800259c <HAL_RCC_OscConfig+0x240>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002486:	2b08      	cmp	r3, #8
 8002488:	d11c      	bne.n	80024c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800248a:	4b44      	ldr	r3, [pc, #272]	@ (800259c <HAL_RCC_OscConfig+0x240>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d116      	bne.n	80024c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002496:	4b41      	ldr	r3, [pc, #260]	@ (800259c <HAL_RCC_OscConfig+0x240>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d005      	beq.n	80024ae <HAL_RCC_OscConfig+0x152>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d001      	beq.n	80024ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e1c7      	b.n	800283e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ae:	4b3b      	ldr	r3, [pc, #236]	@ (800259c <HAL_RCC_OscConfig+0x240>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	00db      	lsls	r3, r3, #3
 80024bc:	4937      	ldr	r1, [pc, #220]	@ (800259c <HAL_RCC_OscConfig+0x240>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024c2:	e03a      	b.n	800253a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d020      	beq.n	800250e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024cc:	4b34      	ldr	r3, [pc, #208]	@ (80025a0 <HAL_RCC_OscConfig+0x244>)
 80024ce:	2201      	movs	r2, #1
 80024d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d2:	f7fe ff37 	bl	8001344 <HAL_GetTick>
 80024d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024d8:	e008      	b.n	80024ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024da:	f7fe ff33 	bl	8001344 <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e1a8      	b.n	800283e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ec:	4b2b      	ldr	r3, [pc, #172]	@ (800259c <HAL_RCC_OscConfig+0x240>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0302 	and.w	r3, r3, #2
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d0f0      	beq.n	80024da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024f8:	4b28      	ldr	r3, [pc, #160]	@ (800259c <HAL_RCC_OscConfig+0x240>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	691b      	ldr	r3, [r3, #16]
 8002504:	00db      	lsls	r3, r3, #3
 8002506:	4925      	ldr	r1, [pc, #148]	@ (800259c <HAL_RCC_OscConfig+0x240>)
 8002508:	4313      	orrs	r3, r2
 800250a:	600b      	str	r3, [r1, #0]
 800250c:	e015      	b.n	800253a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800250e:	4b24      	ldr	r3, [pc, #144]	@ (80025a0 <HAL_RCC_OscConfig+0x244>)
 8002510:	2200      	movs	r2, #0
 8002512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002514:	f7fe ff16 	bl	8001344 <HAL_GetTick>
 8002518:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800251a:	e008      	b.n	800252e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800251c:	f7fe ff12 	bl	8001344 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b02      	cmp	r3, #2
 8002528:	d901      	bls.n	800252e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e187      	b.n	800283e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800252e:	4b1b      	ldr	r3, [pc, #108]	@ (800259c <HAL_RCC_OscConfig+0x240>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d1f0      	bne.n	800251c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0308 	and.w	r3, r3, #8
 8002542:	2b00      	cmp	r3, #0
 8002544:	d036      	beq.n	80025b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	695b      	ldr	r3, [r3, #20]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d016      	beq.n	800257c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800254e:	4b15      	ldr	r3, [pc, #84]	@ (80025a4 <HAL_RCC_OscConfig+0x248>)
 8002550:	2201      	movs	r2, #1
 8002552:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002554:	f7fe fef6 	bl	8001344 <HAL_GetTick>
 8002558:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800255a:	e008      	b.n	800256e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800255c:	f7fe fef2 	bl	8001344 <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b02      	cmp	r3, #2
 8002568:	d901      	bls.n	800256e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e167      	b.n	800283e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800256e:	4b0b      	ldr	r3, [pc, #44]	@ (800259c <HAL_RCC_OscConfig+0x240>)
 8002570:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	2b00      	cmp	r3, #0
 8002578:	d0f0      	beq.n	800255c <HAL_RCC_OscConfig+0x200>
 800257a:	e01b      	b.n	80025b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800257c:	4b09      	ldr	r3, [pc, #36]	@ (80025a4 <HAL_RCC_OscConfig+0x248>)
 800257e:	2200      	movs	r2, #0
 8002580:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002582:	f7fe fedf 	bl	8001344 <HAL_GetTick>
 8002586:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002588:	e00e      	b.n	80025a8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800258a:	f7fe fedb 	bl	8001344 <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d907      	bls.n	80025a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e150      	b.n	800283e <HAL_RCC_OscConfig+0x4e2>
 800259c:	40023800 	.word	0x40023800
 80025a0:	42470000 	.word	0x42470000
 80025a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025a8:	4b88      	ldr	r3, [pc, #544]	@ (80027cc <HAL_RCC_OscConfig+0x470>)
 80025aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d1ea      	bne.n	800258a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0304 	and.w	r3, r3, #4
 80025bc:	2b00      	cmp	r3, #0
 80025be:	f000 8097 	beq.w	80026f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025c2:	2300      	movs	r3, #0
 80025c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025c6:	4b81      	ldr	r3, [pc, #516]	@ (80027cc <HAL_RCC_OscConfig+0x470>)
 80025c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d10f      	bne.n	80025f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025d2:	2300      	movs	r3, #0
 80025d4:	60bb      	str	r3, [r7, #8]
 80025d6:	4b7d      	ldr	r3, [pc, #500]	@ (80027cc <HAL_RCC_OscConfig+0x470>)
 80025d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025da:	4a7c      	ldr	r2, [pc, #496]	@ (80027cc <HAL_RCC_OscConfig+0x470>)
 80025dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80025e2:	4b7a      	ldr	r3, [pc, #488]	@ (80027cc <HAL_RCC_OscConfig+0x470>)
 80025e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025ea:	60bb      	str	r3, [r7, #8]
 80025ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025ee:	2301      	movs	r3, #1
 80025f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f2:	4b77      	ldr	r3, [pc, #476]	@ (80027d0 <HAL_RCC_OscConfig+0x474>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d118      	bne.n	8002630 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025fe:	4b74      	ldr	r3, [pc, #464]	@ (80027d0 <HAL_RCC_OscConfig+0x474>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a73      	ldr	r2, [pc, #460]	@ (80027d0 <HAL_RCC_OscConfig+0x474>)
 8002604:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002608:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800260a:	f7fe fe9b 	bl	8001344 <HAL_GetTick>
 800260e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002610:	e008      	b.n	8002624 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002612:	f7fe fe97 	bl	8001344 <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	2b02      	cmp	r3, #2
 800261e:	d901      	bls.n	8002624 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e10c      	b.n	800283e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002624:	4b6a      	ldr	r3, [pc, #424]	@ (80027d0 <HAL_RCC_OscConfig+0x474>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800262c:	2b00      	cmp	r3, #0
 800262e:	d0f0      	beq.n	8002612 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	2b01      	cmp	r3, #1
 8002636:	d106      	bne.n	8002646 <HAL_RCC_OscConfig+0x2ea>
 8002638:	4b64      	ldr	r3, [pc, #400]	@ (80027cc <HAL_RCC_OscConfig+0x470>)
 800263a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800263c:	4a63      	ldr	r2, [pc, #396]	@ (80027cc <HAL_RCC_OscConfig+0x470>)
 800263e:	f043 0301 	orr.w	r3, r3, #1
 8002642:	6713      	str	r3, [r2, #112]	@ 0x70
 8002644:	e01c      	b.n	8002680 <HAL_RCC_OscConfig+0x324>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	2b05      	cmp	r3, #5
 800264c:	d10c      	bne.n	8002668 <HAL_RCC_OscConfig+0x30c>
 800264e:	4b5f      	ldr	r3, [pc, #380]	@ (80027cc <HAL_RCC_OscConfig+0x470>)
 8002650:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002652:	4a5e      	ldr	r2, [pc, #376]	@ (80027cc <HAL_RCC_OscConfig+0x470>)
 8002654:	f043 0304 	orr.w	r3, r3, #4
 8002658:	6713      	str	r3, [r2, #112]	@ 0x70
 800265a:	4b5c      	ldr	r3, [pc, #368]	@ (80027cc <HAL_RCC_OscConfig+0x470>)
 800265c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800265e:	4a5b      	ldr	r2, [pc, #364]	@ (80027cc <HAL_RCC_OscConfig+0x470>)
 8002660:	f043 0301 	orr.w	r3, r3, #1
 8002664:	6713      	str	r3, [r2, #112]	@ 0x70
 8002666:	e00b      	b.n	8002680 <HAL_RCC_OscConfig+0x324>
 8002668:	4b58      	ldr	r3, [pc, #352]	@ (80027cc <HAL_RCC_OscConfig+0x470>)
 800266a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800266c:	4a57      	ldr	r2, [pc, #348]	@ (80027cc <HAL_RCC_OscConfig+0x470>)
 800266e:	f023 0301 	bic.w	r3, r3, #1
 8002672:	6713      	str	r3, [r2, #112]	@ 0x70
 8002674:	4b55      	ldr	r3, [pc, #340]	@ (80027cc <HAL_RCC_OscConfig+0x470>)
 8002676:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002678:	4a54      	ldr	r2, [pc, #336]	@ (80027cc <HAL_RCC_OscConfig+0x470>)
 800267a:	f023 0304 	bic.w	r3, r3, #4
 800267e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d015      	beq.n	80026b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002688:	f7fe fe5c 	bl	8001344 <HAL_GetTick>
 800268c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800268e:	e00a      	b.n	80026a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002690:	f7fe fe58 	bl	8001344 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800269e:	4293      	cmp	r3, r2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e0cb      	b.n	800283e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026a6:	4b49      	ldr	r3, [pc, #292]	@ (80027cc <HAL_RCC_OscConfig+0x470>)
 80026a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d0ee      	beq.n	8002690 <HAL_RCC_OscConfig+0x334>
 80026b2:	e014      	b.n	80026de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026b4:	f7fe fe46 	bl	8001344 <HAL_GetTick>
 80026b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026ba:	e00a      	b.n	80026d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026bc:	f7fe fe42 	bl	8001344 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e0b5      	b.n	800283e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026d2:	4b3e      	ldr	r3, [pc, #248]	@ (80027cc <HAL_RCC_OscConfig+0x470>)
 80026d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1ee      	bne.n	80026bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026de:	7dfb      	ldrb	r3, [r7, #23]
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d105      	bne.n	80026f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026e4:	4b39      	ldr	r3, [pc, #228]	@ (80027cc <HAL_RCC_OscConfig+0x470>)
 80026e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e8:	4a38      	ldr	r2, [pc, #224]	@ (80027cc <HAL_RCC_OscConfig+0x470>)
 80026ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026ee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f000 80a1 	beq.w	800283c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026fa:	4b34      	ldr	r3, [pc, #208]	@ (80027cc <HAL_RCC_OscConfig+0x470>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f003 030c 	and.w	r3, r3, #12
 8002702:	2b08      	cmp	r3, #8
 8002704:	d05c      	beq.n	80027c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	699b      	ldr	r3, [r3, #24]
 800270a:	2b02      	cmp	r3, #2
 800270c:	d141      	bne.n	8002792 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800270e:	4b31      	ldr	r3, [pc, #196]	@ (80027d4 <HAL_RCC_OscConfig+0x478>)
 8002710:	2200      	movs	r2, #0
 8002712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002714:	f7fe fe16 	bl	8001344 <HAL_GetTick>
 8002718:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800271a:	e008      	b.n	800272e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800271c:	f7fe fe12 	bl	8001344 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b02      	cmp	r3, #2
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e087      	b.n	800283e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800272e:	4b27      	ldr	r3, [pc, #156]	@ (80027cc <HAL_RCC_OscConfig+0x470>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d1f0      	bne.n	800271c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	69da      	ldr	r2, [r3, #28]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a1b      	ldr	r3, [r3, #32]
 8002742:	431a      	orrs	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002748:	019b      	lsls	r3, r3, #6
 800274a:	431a      	orrs	r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002750:	085b      	lsrs	r3, r3, #1
 8002752:	3b01      	subs	r3, #1
 8002754:	041b      	lsls	r3, r3, #16
 8002756:	431a      	orrs	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800275c:	061b      	lsls	r3, r3, #24
 800275e:	491b      	ldr	r1, [pc, #108]	@ (80027cc <HAL_RCC_OscConfig+0x470>)
 8002760:	4313      	orrs	r3, r2
 8002762:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002764:	4b1b      	ldr	r3, [pc, #108]	@ (80027d4 <HAL_RCC_OscConfig+0x478>)
 8002766:	2201      	movs	r2, #1
 8002768:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800276a:	f7fe fdeb 	bl	8001344 <HAL_GetTick>
 800276e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002770:	e008      	b.n	8002784 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002772:	f7fe fde7 	bl	8001344 <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	2b02      	cmp	r3, #2
 800277e:	d901      	bls.n	8002784 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e05c      	b.n	800283e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002784:	4b11      	ldr	r3, [pc, #68]	@ (80027cc <HAL_RCC_OscConfig+0x470>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d0f0      	beq.n	8002772 <HAL_RCC_OscConfig+0x416>
 8002790:	e054      	b.n	800283c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002792:	4b10      	ldr	r3, [pc, #64]	@ (80027d4 <HAL_RCC_OscConfig+0x478>)
 8002794:	2200      	movs	r2, #0
 8002796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002798:	f7fe fdd4 	bl	8001344 <HAL_GetTick>
 800279c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800279e:	e008      	b.n	80027b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027a0:	f7fe fdd0 	bl	8001344 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e045      	b.n	800283e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027b2:	4b06      	ldr	r3, [pc, #24]	@ (80027cc <HAL_RCC_OscConfig+0x470>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1f0      	bne.n	80027a0 <HAL_RCC_OscConfig+0x444>
 80027be:	e03d      	b.n	800283c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d107      	bne.n	80027d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e038      	b.n	800283e <HAL_RCC_OscConfig+0x4e2>
 80027cc:	40023800 	.word	0x40023800
 80027d0:	40007000 	.word	0x40007000
 80027d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002848 <HAL_RCC_OscConfig+0x4ec>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d028      	beq.n	8002838 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d121      	bne.n	8002838 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027fe:	429a      	cmp	r2, r3
 8002800:	d11a      	bne.n	8002838 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002808:	4013      	ands	r3, r2
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800280e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002810:	4293      	cmp	r3, r2
 8002812:	d111      	bne.n	8002838 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800281e:	085b      	lsrs	r3, r3, #1
 8002820:	3b01      	subs	r3, #1
 8002822:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002824:	429a      	cmp	r2, r3
 8002826:	d107      	bne.n	8002838 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002832:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002834:	429a      	cmp	r2, r3
 8002836:	d001      	beq.n	800283c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e000      	b.n	800283e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3718      	adds	r7, #24
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	40023800 	.word	0x40023800

0800284c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d101      	bne.n	8002860 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e0cc      	b.n	80029fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002860:	4b68      	ldr	r3, [pc, #416]	@ (8002a04 <HAL_RCC_ClockConfig+0x1b8>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 030f 	and.w	r3, r3, #15
 8002868:	683a      	ldr	r2, [r7, #0]
 800286a:	429a      	cmp	r2, r3
 800286c:	d90c      	bls.n	8002888 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800286e:	4b65      	ldr	r3, [pc, #404]	@ (8002a04 <HAL_RCC_ClockConfig+0x1b8>)
 8002870:	683a      	ldr	r2, [r7, #0]
 8002872:	b2d2      	uxtb	r2, r2
 8002874:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002876:	4b63      	ldr	r3, [pc, #396]	@ (8002a04 <HAL_RCC_ClockConfig+0x1b8>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 030f 	and.w	r3, r3, #15
 800287e:	683a      	ldr	r2, [r7, #0]
 8002880:	429a      	cmp	r2, r3
 8002882:	d001      	beq.n	8002888 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e0b8      	b.n	80029fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	2b00      	cmp	r3, #0
 8002892:	d020      	beq.n	80028d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0304 	and.w	r3, r3, #4
 800289c:	2b00      	cmp	r3, #0
 800289e:	d005      	beq.n	80028ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028a0:	4b59      	ldr	r3, [pc, #356]	@ (8002a08 <HAL_RCC_ClockConfig+0x1bc>)
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	4a58      	ldr	r2, [pc, #352]	@ (8002a08 <HAL_RCC_ClockConfig+0x1bc>)
 80028a6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80028aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0308 	and.w	r3, r3, #8
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d005      	beq.n	80028c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028b8:	4b53      	ldr	r3, [pc, #332]	@ (8002a08 <HAL_RCC_ClockConfig+0x1bc>)
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	4a52      	ldr	r2, [pc, #328]	@ (8002a08 <HAL_RCC_ClockConfig+0x1bc>)
 80028be:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80028c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028c4:	4b50      	ldr	r3, [pc, #320]	@ (8002a08 <HAL_RCC_ClockConfig+0x1bc>)
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	494d      	ldr	r1, [pc, #308]	@ (8002a08 <HAL_RCC_ClockConfig+0x1bc>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d044      	beq.n	800296c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d107      	bne.n	80028fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ea:	4b47      	ldr	r3, [pc, #284]	@ (8002a08 <HAL_RCC_ClockConfig+0x1bc>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d119      	bne.n	800292a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e07f      	b.n	80029fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d003      	beq.n	800290a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002906:	2b03      	cmp	r3, #3
 8002908:	d107      	bne.n	800291a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800290a:	4b3f      	ldr	r3, [pc, #252]	@ (8002a08 <HAL_RCC_ClockConfig+0x1bc>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d109      	bne.n	800292a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e06f      	b.n	80029fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800291a:	4b3b      	ldr	r3, [pc, #236]	@ (8002a08 <HAL_RCC_ClockConfig+0x1bc>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	2b00      	cmp	r3, #0
 8002924:	d101      	bne.n	800292a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e067      	b.n	80029fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800292a:	4b37      	ldr	r3, [pc, #220]	@ (8002a08 <HAL_RCC_ClockConfig+0x1bc>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f023 0203 	bic.w	r2, r3, #3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	4934      	ldr	r1, [pc, #208]	@ (8002a08 <HAL_RCC_ClockConfig+0x1bc>)
 8002938:	4313      	orrs	r3, r2
 800293a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800293c:	f7fe fd02 	bl	8001344 <HAL_GetTick>
 8002940:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002942:	e00a      	b.n	800295a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002944:	f7fe fcfe 	bl	8001344 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002952:	4293      	cmp	r3, r2
 8002954:	d901      	bls.n	800295a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e04f      	b.n	80029fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800295a:	4b2b      	ldr	r3, [pc, #172]	@ (8002a08 <HAL_RCC_ClockConfig+0x1bc>)
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f003 020c 	and.w	r2, r3, #12
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	429a      	cmp	r2, r3
 800296a:	d1eb      	bne.n	8002944 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800296c:	4b25      	ldr	r3, [pc, #148]	@ (8002a04 <HAL_RCC_ClockConfig+0x1b8>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 030f 	and.w	r3, r3, #15
 8002974:	683a      	ldr	r2, [r7, #0]
 8002976:	429a      	cmp	r2, r3
 8002978:	d20c      	bcs.n	8002994 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800297a:	4b22      	ldr	r3, [pc, #136]	@ (8002a04 <HAL_RCC_ClockConfig+0x1b8>)
 800297c:	683a      	ldr	r2, [r7, #0]
 800297e:	b2d2      	uxtb	r2, r2
 8002980:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002982:	4b20      	ldr	r3, [pc, #128]	@ (8002a04 <HAL_RCC_ClockConfig+0x1b8>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 030f 	and.w	r3, r3, #15
 800298a:	683a      	ldr	r2, [r7, #0]
 800298c:	429a      	cmp	r2, r3
 800298e:	d001      	beq.n	8002994 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e032      	b.n	80029fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0304 	and.w	r3, r3, #4
 800299c:	2b00      	cmp	r3, #0
 800299e:	d008      	beq.n	80029b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029a0:	4b19      	ldr	r3, [pc, #100]	@ (8002a08 <HAL_RCC_ClockConfig+0x1bc>)
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	4916      	ldr	r1, [pc, #88]	@ (8002a08 <HAL_RCC_ClockConfig+0x1bc>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0308 	and.w	r3, r3, #8
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d009      	beq.n	80029d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029be:	4b12      	ldr	r3, [pc, #72]	@ (8002a08 <HAL_RCC_ClockConfig+0x1bc>)
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	490e      	ldr	r1, [pc, #56]	@ (8002a08 <HAL_RCC_ClockConfig+0x1bc>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029d2:	f000 f821 	bl	8002a18 <HAL_RCC_GetSysClockFreq>
 80029d6:	4602      	mov	r2, r0
 80029d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002a08 <HAL_RCC_ClockConfig+0x1bc>)
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	091b      	lsrs	r3, r3, #4
 80029de:	f003 030f 	and.w	r3, r3, #15
 80029e2:	490a      	ldr	r1, [pc, #40]	@ (8002a0c <HAL_RCC_ClockConfig+0x1c0>)
 80029e4:	5ccb      	ldrb	r3, [r1, r3]
 80029e6:	fa22 f303 	lsr.w	r3, r2, r3
 80029ea:	4a09      	ldr	r2, [pc, #36]	@ (8002a10 <HAL_RCC_ClockConfig+0x1c4>)
 80029ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80029ee:	4b09      	ldr	r3, [pc, #36]	@ (8002a14 <HAL_RCC_ClockConfig+0x1c8>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7fe fc62 	bl	80012bc <HAL_InitTick>

  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3710      	adds	r7, #16
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	40023c00 	.word	0x40023c00
 8002a08:	40023800 	.word	0x40023800
 8002a0c:	080035f0 	.word	0x080035f0
 8002a10:	20000000 	.word	0x20000000
 8002a14:	2000000c 	.word	0x2000000c

08002a18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a1c:	b094      	sub	sp, #80	@ 0x50
 8002a1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a20:	2300      	movs	r3, #0
 8002a22:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a24:	2300      	movs	r3, #0
 8002a26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a28:	2300      	movs	r3, #0
 8002a2a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a30:	4b79      	ldr	r3, [pc, #484]	@ (8002c18 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f003 030c 	and.w	r3, r3, #12
 8002a38:	2b08      	cmp	r3, #8
 8002a3a:	d00d      	beq.n	8002a58 <HAL_RCC_GetSysClockFreq+0x40>
 8002a3c:	2b08      	cmp	r3, #8
 8002a3e:	f200 80e1 	bhi.w	8002c04 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d002      	beq.n	8002a4c <HAL_RCC_GetSysClockFreq+0x34>
 8002a46:	2b04      	cmp	r3, #4
 8002a48:	d003      	beq.n	8002a52 <HAL_RCC_GetSysClockFreq+0x3a>
 8002a4a:	e0db      	b.n	8002c04 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a4c:	4b73      	ldr	r3, [pc, #460]	@ (8002c1c <HAL_RCC_GetSysClockFreq+0x204>)
 8002a4e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002a50:	e0db      	b.n	8002c0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a52:	4b73      	ldr	r3, [pc, #460]	@ (8002c20 <HAL_RCC_GetSysClockFreq+0x208>)
 8002a54:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a56:	e0d8      	b.n	8002c0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a58:	4b6f      	ldr	r3, [pc, #444]	@ (8002c18 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a60:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a62:	4b6d      	ldr	r3, [pc, #436]	@ (8002c18 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d063      	beq.n	8002b36 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a6e:	4b6a      	ldr	r3, [pc, #424]	@ (8002c18 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	099b      	lsrs	r3, r3, #6
 8002a74:	2200      	movs	r2, #0
 8002a76:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002a78:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002a7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a80:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a82:	2300      	movs	r3, #0
 8002a84:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a86:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002a8a:	4622      	mov	r2, r4
 8002a8c:	462b      	mov	r3, r5
 8002a8e:	f04f 0000 	mov.w	r0, #0
 8002a92:	f04f 0100 	mov.w	r1, #0
 8002a96:	0159      	lsls	r1, r3, #5
 8002a98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a9c:	0150      	lsls	r0, r2, #5
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	4621      	mov	r1, r4
 8002aa4:	1a51      	subs	r1, r2, r1
 8002aa6:	6139      	str	r1, [r7, #16]
 8002aa8:	4629      	mov	r1, r5
 8002aaa:	eb63 0301 	sbc.w	r3, r3, r1
 8002aae:	617b      	str	r3, [r7, #20]
 8002ab0:	f04f 0200 	mov.w	r2, #0
 8002ab4:	f04f 0300 	mov.w	r3, #0
 8002ab8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002abc:	4659      	mov	r1, fp
 8002abe:	018b      	lsls	r3, r1, #6
 8002ac0:	4651      	mov	r1, sl
 8002ac2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ac6:	4651      	mov	r1, sl
 8002ac8:	018a      	lsls	r2, r1, #6
 8002aca:	4651      	mov	r1, sl
 8002acc:	ebb2 0801 	subs.w	r8, r2, r1
 8002ad0:	4659      	mov	r1, fp
 8002ad2:	eb63 0901 	sbc.w	r9, r3, r1
 8002ad6:	f04f 0200 	mov.w	r2, #0
 8002ada:	f04f 0300 	mov.w	r3, #0
 8002ade:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ae2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ae6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002aea:	4690      	mov	r8, r2
 8002aec:	4699      	mov	r9, r3
 8002aee:	4623      	mov	r3, r4
 8002af0:	eb18 0303 	adds.w	r3, r8, r3
 8002af4:	60bb      	str	r3, [r7, #8]
 8002af6:	462b      	mov	r3, r5
 8002af8:	eb49 0303 	adc.w	r3, r9, r3
 8002afc:	60fb      	str	r3, [r7, #12]
 8002afe:	f04f 0200 	mov.w	r2, #0
 8002b02:	f04f 0300 	mov.w	r3, #0
 8002b06:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002b0a:	4629      	mov	r1, r5
 8002b0c:	024b      	lsls	r3, r1, #9
 8002b0e:	4621      	mov	r1, r4
 8002b10:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b14:	4621      	mov	r1, r4
 8002b16:	024a      	lsls	r2, r1, #9
 8002b18:	4610      	mov	r0, r2
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b1e:	2200      	movs	r2, #0
 8002b20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002b24:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002b28:	f7fd fb60 	bl	80001ec <__aeabi_uldivmod>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	460b      	mov	r3, r1
 8002b30:	4613      	mov	r3, r2
 8002b32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b34:	e058      	b.n	8002be8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b36:	4b38      	ldr	r3, [pc, #224]	@ (8002c18 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	099b      	lsrs	r3, r3, #6
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	4618      	mov	r0, r3
 8002b40:	4611      	mov	r1, r2
 8002b42:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b46:	623b      	str	r3, [r7, #32]
 8002b48:	2300      	movs	r3, #0
 8002b4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b4c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002b50:	4642      	mov	r2, r8
 8002b52:	464b      	mov	r3, r9
 8002b54:	f04f 0000 	mov.w	r0, #0
 8002b58:	f04f 0100 	mov.w	r1, #0
 8002b5c:	0159      	lsls	r1, r3, #5
 8002b5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b62:	0150      	lsls	r0, r2, #5
 8002b64:	4602      	mov	r2, r0
 8002b66:	460b      	mov	r3, r1
 8002b68:	4641      	mov	r1, r8
 8002b6a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b6e:	4649      	mov	r1, r9
 8002b70:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b74:	f04f 0200 	mov.w	r2, #0
 8002b78:	f04f 0300 	mov.w	r3, #0
 8002b7c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b80:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b84:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b88:	ebb2 040a 	subs.w	r4, r2, sl
 8002b8c:	eb63 050b 	sbc.w	r5, r3, fp
 8002b90:	f04f 0200 	mov.w	r2, #0
 8002b94:	f04f 0300 	mov.w	r3, #0
 8002b98:	00eb      	lsls	r3, r5, #3
 8002b9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b9e:	00e2      	lsls	r2, r4, #3
 8002ba0:	4614      	mov	r4, r2
 8002ba2:	461d      	mov	r5, r3
 8002ba4:	4643      	mov	r3, r8
 8002ba6:	18e3      	adds	r3, r4, r3
 8002ba8:	603b      	str	r3, [r7, #0]
 8002baa:	464b      	mov	r3, r9
 8002bac:	eb45 0303 	adc.w	r3, r5, r3
 8002bb0:	607b      	str	r3, [r7, #4]
 8002bb2:	f04f 0200 	mov.w	r2, #0
 8002bb6:	f04f 0300 	mov.w	r3, #0
 8002bba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002bbe:	4629      	mov	r1, r5
 8002bc0:	028b      	lsls	r3, r1, #10
 8002bc2:	4621      	mov	r1, r4
 8002bc4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002bc8:	4621      	mov	r1, r4
 8002bca:	028a      	lsls	r2, r1, #10
 8002bcc:	4610      	mov	r0, r2
 8002bce:	4619      	mov	r1, r3
 8002bd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	61bb      	str	r3, [r7, #24]
 8002bd6:	61fa      	str	r2, [r7, #28]
 8002bd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bdc:	f7fd fb06 	bl	80001ec <__aeabi_uldivmod>
 8002be0:	4602      	mov	r2, r0
 8002be2:	460b      	mov	r3, r1
 8002be4:	4613      	mov	r3, r2
 8002be6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002be8:	4b0b      	ldr	r3, [pc, #44]	@ (8002c18 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	0c1b      	lsrs	r3, r3, #16
 8002bee:	f003 0303 	and.w	r3, r3, #3
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002bf8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002bfa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c00:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c02:	e002      	b.n	8002c0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c04:	4b05      	ldr	r3, [pc, #20]	@ (8002c1c <HAL_RCC_GetSysClockFreq+0x204>)
 8002c06:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3750      	adds	r7, #80	@ 0x50
 8002c10:	46bd      	mov	sp, r7
 8002c12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c16:	bf00      	nop
 8002c18:	40023800 	.word	0x40023800
 8002c1c:	00f42400 	.word	0x00f42400
 8002c20:	007a1200 	.word	0x007a1200

08002c24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c28:	4b03      	ldr	r3, [pc, #12]	@ (8002c38 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	20000000 	.word	0x20000000

08002c3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c40:	f7ff fff0 	bl	8002c24 <HAL_RCC_GetHCLKFreq>
 8002c44:	4602      	mov	r2, r0
 8002c46:	4b05      	ldr	r3, [pc, #20]	@ (8002c5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	0a9b      	lsrs	r3, r3, #10
 8002c4c:	f003 0307 	and.w	r3, r3, #7
 8002c50:	4903      	ldr	r1, [pc, #12]	@ (8002c60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c52:	5ccb      	ldrb	r3, [r1, r3]
 8002c54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	40023800 	.word	0x40023800
 8002c60:	08003600 	.word	0x08003600

08002c64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c68:	f7ff ffdc 	bl	8002c24 <HAL_RCC_GetHCLKFreq>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	4b05      	ldr	r3, [pc, #20]	@ (8002c84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	0b5b      	lsrs	r3, r3, #13
 8002c74:	f003 0307 	and.w	r3, r3, #7
 8002c78:	4903      	ldr	r1, [pc, #12]	@ (8002c88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c7a:	5ccb      	ldrb	r3, [r1, r3]
 8002c7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	40023800 	.word	0x40023800
 8002c88:	08003600 	.word	0x08003600

08002c8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d101      	bne.n	8002c9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e042      	b.n	8002d24 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d106      	bne.n	8002cb8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f7fd fd50 	bl	8000758 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2224      	movs	r2, #36	@ 0x24
 8002cbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	68da      	ldr	r2, [r3, #12]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002cce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f000 f973 	bl	8002fbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	691a      	ldr	r2, [r3, #16]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002ce4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	695a      	ldr	r2, [r3, #20]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002cf4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68da      	ldr	r2, [r3, #12]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002d04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2220      	movs	r2, #32
 8002d10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2220      	movs	r2, #32
 8002d18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3708      	adds	r7, #8
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b08a      	sub	sp, #40	@ 0x28
 8002d30:	af02      	add	r7, sp, #8
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	603b      	str	r3, [r7, #0]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	2b20      	cmp	r3, #32
 8002d4a:	d175      	bne.n	8002e38 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d002      	beq.n	8002d58 <HAL_UART_Transmit+0x2c>
 8002d52:	88fb      	ldrh	r3, [r7, #6]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d101      	bne.n	8002d5c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e06e      	b.n	8002e3a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2221      	movs	r2, #33	@ 0x21
 8002d66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d6a:	f7fe faeb 	bl	8001344 <HAL_GetTick>
 8002d6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	88fa      	ldrh	r2, [r7, #6]
 8002d74:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	88fa      	ldrh	r2, [r7, #6]
 8002d7a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d84:	d108      	bne.n	8002d98 <HAL_UART_Transmit+0x6c>
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d104      	bne.n	8002d98 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	61bb      	str	r3, [r7, #24]
 8002d96:	e003      	b.n	8002da0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002da0:	e02e      	b.n	8002e00 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	9300      	str	r3, [sp, #0]
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	2200      	movs	r2, #0
 8002daa:	2180      	movs	r1, #128	@ 0x80
 8002dac:	68f8      	ldr	r0, [r7, #12]
 8002dae:	f000 f848 	bl	8002e42 <UART_WaitOnFlagUntilTimeout>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d005      	beq.n	8002dc4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2220      	movs	r2, #32
 8002dbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e03a      	b.n	8002e3a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d10b      	bne.n	8002de2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	881b      	ldrh	r3, [r3, #0]
 8002dce:	461a      	mov	r2, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002dd8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	3302      	adds	r3, #2
 8002dde:	61bb      	str	r3, [r7, #24]
 8002de0:	e007      	b.n	8002df2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	781a      	ldrb	r2, [r3, #0]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	3301      	adds	r3, #1
 8002df0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	3b01      	subs	r3, #1
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1cb      	bne.n	8002da2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	9300      	str	r3, [sp, #0]
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	2200      	movs	r2, #0
 8002e12:	2140      	movs	r1, #64	@ 0x40
 8002e14:	68f8      	ldr	r0, [r7, #12]
 8002e16:	f000 f814 	bl	8002e42 <UART_WaitOnFlagUntilTimeout>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d005      	beq.n	8002e2c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2220      	movs	r2, #32
 8002e24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e006      	b.n	8002e3a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2220      	movs	r2, #32
 8002e30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002e34:	2300      	movs	r3, #0
 8002e36:	e000      	b.n	8002e3a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002e38:	2302      	movs	r3, #2
  }
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3720      	adds	r7, #32
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b086      	sub	sp, #24
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	60f8      	str	r0, [r7, #12]
 8002e4a:	60b9      	str	r1, [r7, #8]
 8002e4c:	603b      	str	r3, [r7, #0]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e52:	e03b      	b.n	8002ecc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e54:	6a3b      	ldr	r3, [r7, #32]
 8002e56:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002e5a:	d037      	beq.n	8002ecc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e5c:	f7fe fa72 	bl	8001344 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	6a3a      	ldr	r2, [r7, #32]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d302      	bcc.n	8002e72 <UART_WaitOnFlagUntilTimeout+0x30>
 8002e6c:	6a3b      	ldr	r3, [r7, #32]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e03a      	b.n	8002eec <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	f003 0304 	and.w	r3, r3, #4
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d023      	beq.n	8002ecc <UART_WaitOnFlagUntilTimeout+0x8a>
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	2b80      	cmp	r3, #128	@ 0x80
 8002e88:	d020      	beq.n	8002ecc <UART_WaitOnFlagUntilTimeout+0x8a>
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	2b40      	cmp	r3, #64	@ 0x40
 8002e8e:	d01d      	beq.n	8002ecc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0308 	and.w	r3, r3, #8
 8002e9a:	2b08      	cmp	r3, #8
 8002e9c:	d116      	bne.n	8002ecc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	617b      	str	r3, [r7, #20]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	617b      	str	r3, [r7, #20]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	617b      	str	r3, [r7, #20]
 8002eb2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002eb4:	68f8      	ldr	r0, [r7, #12]
 8002eb6:	f000 f81d 	bl	8002ef4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2208      	movs	r2, #8
 8002ebe:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e00f      	b.n	8002eec <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	68ba      	ldr	r2, [r7, #8]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	bf0c      	ite	eq
 8002edc:	2301      	moveq	r3, #1
 8002ede:	2300      	movne	r3, #0
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	79fb      	ldrb	r3, [r7, #7]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d0b4      	beq.n	8002e54 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3718      	adds	r7, #24
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b095      	sub	sp, #84	@ 0x54
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	330c      	adds	r3, #12
 8002f02:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f06:	e853 3f00 	ldrex	r3, [r3]
 8002f0a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f0e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002f12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	330c      	adds	r3, #12
 8002f1a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002f1c:	643a      	str	r2, [r7, #64]	@ 0x40
 8002f1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f20:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002f22:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002f24:	e841 2300 	strex	r3, r2, [r1]
 8002f28:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d1e5      	bne.n	8002efc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	3314      	adds	r3, #20
 8002f36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f38:	6a3b      	ldr	r3, [r7, #32]
 8002f3a:	e853 3f00 	ldrex	r3, [r3]
 8002f3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	f023 0301 	bic.w	r3, r3, #1
 8002f46:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	3314      	adds	r3, #20
 8002f4e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002f50:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f52:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f54:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f58:	e841 2300 	strex	r3, r2, [r1]
 8002f5c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d1e5      	bne.n	8002f30 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d119      	bne.n	8002fa0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	330c      	adds	r3, #12
 8002f72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	e853 3f00 	ldrex	r3, [r3]
 8002f7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	f023 0310 	bic.w	r3, r3, #16
 8002f82:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	330c      	adds	r3, #12
 8002f8a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002f8c:	61ba      	str	r2, [r7, #24]
 8002f8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f90:	6979      	ldr	r1, [r7, #20]
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	e841 2300 	strex	r3, r2, [r1]
 8002f98:	613b      	str	r3, [r7, #16]
   return(result);
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d1e5      	bne.n	8002f6c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2220      	movs	r2, #32
 8002fa4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002fae:	bf00      	nop
 8002fb0:	3754      	adds	r7, #84	@ 0x54
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
	...

08002fbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fc0:	b0c0      	sub	sp, #256	@ 0x100
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	691b      	ldr	r3, [r3, #16]
 8002fd0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fd8:	68d9      	ldr	r1, [r3, #12]
 8002fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	ea40 0301 	orr.w	r3, r0, r1
 8002fe4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fea:	689a      	ldr	r2, [r3, #8]
 8002fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	431a      	orrs	r2, r3
 8002ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ff8:	695b      	ldr	r3, [r3, #20]
 8002ffa:	431a      	orrs	r2, r3
 8002ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003000:	69db      	ldr	r3, [r3, #28]
 8003002:	4313      	orrs	r3, r2
 8003004:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003014:	f021 010c 	bic.w	r1, r1, #12
 8003018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003022:	430b      	orrs	r3, r1
 8003024:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	695b      	ldr	r3, [r3, #20]
 800302e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003036:	6999      	ldr	r1, [r3, #24]
 8003038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	ea40 0301 	orr.w	r3, r0, r1
 8003042:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	4b8f      	ldr	r3, [pc, #572]	@ (8003288 <UART_SetConfig+0x2cc>)
 800304c:	429a      	cmp	r2, r3
 800304e:	d005      	beq.n	800305c <UART_SetConfig+0xa0>
 8003050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	4b8d      	ldr	r3, [pc, #564]	@ (800328c <UART_SetConfig+0x2d0>)
 8003058:	429a      	cmp	r2, r3
 800305a:	d104      	bne.n	8003066 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800305c:	f7ff fe02 	bl	8002c64 <HAL_RCC_GetPCLK2Freq>
 8003060:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003064:	e003      	b.n	800306e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003066:	f7ff fde9 	bl	8002c3c <HAL_RCC_GetPCLK1Freq>
 800306a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800306e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003072:	69db      	ldr	r3, [r3, #28]
 8003074:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003078:	f040 810c 	bne.w	8003294 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800307c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003080:	2200      	movs	r2, #0
 8003082:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003086:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800308a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800308e:	4622      	mov	r2, r4
 8003090:	462b      	mov	r3, r5
 8003092:	1891      	adds	r1, r2, r2
 8003094:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003096:	415b      	adcs	r3, r3
 8003098:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800309a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800309e:	4621      	mov	r1, r4
 80030a0:	eb12 0801 	adds.w	r8, r2, r1
 80030a4:	4629      	mov	r1, r5
 80030a6:	eb43 0901 	adc.w	r9, r3, r1
 80030aa:	f04f 0200 	mov.w	r2, #0
 80030ae:	f04f 0300 	mov.w	r3, #0
 80030b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030be:	4690      	mov	r8, r2
 80030c0:	4699      	mov	r9, r3
 80030c2:	4623      	mov	r3, r4
 80030c4:	eb18 0303 	adds.w	r3, r8, r3
 80030c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80030cc:	462b      	mov	r3, r5
 80030ce:	eb49 0303 	adc.w	r3, r9, r3
 80030d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80030d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80030e2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80030e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80030ea:	460b      	mov	r3, r1
 80030ec:	18db      	adds	r3, r3, r3
 80030ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80030f0:	4613      	mov	r3, r2
 80030f2:	eb42 0303 	adc.w	r3, r2, r3
 80030f6:	657b      	str	r3, [r7, #84]	@ 0x54
 80030f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80030fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003100:	f7fd f874 	bl	80001ec <__aeabi_uldivmod>
 8003104:	4602      	mov	r2, r0
 8003106:	460b      	mov	r3, r1
 8003108:	4b61      	ldr	r3, [pc, #388]	@ (8003290 <UART_SetConfig+0x2d4>)
 800310a:	fba3 2302 	umull	r2, r3, r3, r2
 800310e:	095b      	lsrs	r3, r3, #5
 8003110:	011c      	lsls	r4, r3, #4
 8003112:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003116:	2200      	movs	r2, #0
 8003118:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800311c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003120:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003124:	4642      	mov	r2, r8
 8003126:	464b      	mov	r3, r9
 8003128:	1891      	adds	r1, r2, r2
 800312a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800312c:	415b      	adcs	r3, r3
 800312e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003130:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003134:	4641      	mov	r1, r8
 8003136:	eb12 0a01 	adds.w	sl, r2, r1
 800313a:	4649      	mov	r1, r9
 800313c:	eb43 0b01 	adc.w	fp, r3, r1
 8003140:	f04f 0200 	mov.w	r2, #0
 8003144:	f04f 0300 	mov.w	r3, #0
 8003148:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800314c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003150:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003154:	4692      	mov	sl, r2
 8003156:	469b      	mov	fp, r3
 8003158:	4643      	mov	r3, r8
 800315a:	eb1a 0303 	adds.w	r3, sl, r3
 800315e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003162:	464b      	mov	r3, r9
 8003164:	eb4b 0303 	adc.w	r3, fp, r3
 8003168:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800316c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003178:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800317c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003180:	460b      	mov	r3, r1
 8003182:	18db      	adds	r3, r3, r3
 8003184:	643b      	str	r3, [r7, #64]	@ 0x40
 8003186:	4613      	mov	r3, r2
 8003188:	eb42 0303 	adc.w	r3, r2, r3
 800318c:	647b      	str	r3, [r7, #68]	@ 0x44
 800318e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003192:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003196:	f7fd f829 	bl	80001ec <__aeabi_uldivmod>
 800319a:	4602      	mov	r2, r0
 800319c:	460b      	mov	r3, r1
 800319e:	4611      	mov	r1, r2
 80031a0:	4b3b      	ldr	r3, [pc, #236]	@ (8003290 <UART_SetConfig+0x2d4>)
 80031a2:	fba3 2301 	umull	r2, r3, r3, r1
 80031a6:	095b      	lsrs	r3, r3, #5
 80031a8:	2264      	movs	r2, #100	@ 0x64
 80031aa:	fb02 f303 	mul.w	r3, r2, r3
 80031ae:	1acb      	subs	r3, r1, r3
 80031b0:	00db      	lsls	r3, r3, #3
 80031b2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80031b6:	4b36      	ldr	r3, [pc, #216]	@ (8003290 <UART_SetConfig+0x2d4>)
 80031b8:	fba3 2302 	umull	r2, r3, r3, r2
 80031bc:	095b      	lsrs	r3, r3, #5
 80031be:	005b      	lsls	r3, r3, #1
 80031c0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80031c4:	441c      	add	r4, r3
 80031c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031ca:	2200      	movs	r2, #0
 80031cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80031d0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80031d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80031d8:	4642      	mov	r2, r8
 80031da:	464b      	mov	r3, r9
 80031dc:	1891      	adds	r1, r2, r2
 80031de:	63b9      	str	r1, [r7, #56]	@ 0x38
 80031e0:	415b      	adcs	r3, r3
 80031e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80031e8:	4641      	mov	r1, r8
 80031ea:	1851      	adds	r1, r2, r1
 80031ec:	6339      	str	r1, [r7, #48]	@ 0x30
 80031ee:	4649      	mov	r1, r9
 80031f0:	414b      	adcs	r3, r1
 80031f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80031f4:	f04f 0200 	mov.w	r2, #0
 80031f8:	f04f 0300 	mov.w	r3, #0
 80031fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003200:	4659      	mov	r1, fp
 8003202:	00cb      	lsls	r3, r1, #3
 8003204:	4651      	mov	r1, sl
 8003206:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800320a:	4651      	mov	r1, sl
 800320c:	00ca      	lsls	r2, r1, #3
 800320e:	4610      	mov	r0, r2
 8003210:	4619      	mov	r1, r3
 8003212:	4603      	mov	r3, r0
 8003214:	4642      	mov	r2, r8
 8003216:	189b      	adds	r3, r3, r2
 8003218:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800321c:	464b      	mov	r3, r9
 800321e:	460a      	mov	r2, r1
 8003220:	eb42 0303 	adc.w	r3, r2, r3
 8003224:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003234:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003238:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800323c:	460b      	mov	r3, r1
 800323e:	18db      	adds	r3, r3, r3
 8003240:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003242:	4613      	mov	r3, r2
 8003244:	eb42 0303 	adc.w	r3, r2, r3
 8003248:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800324a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800324e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003252:	f7fc ffcb 	bl	80001ec <__aeabi_uldivmod>
 8003256:	4602      	mov	r2, r0
 8003258:	460b      	mov	r3, r1
 800325a:	4b0d      	ldr	r3, [pc, #52]	@ (8003290 <UART_SetConfig+0x2d4>)
 800325c:	fba3 1302 	umull	r1, r3, r3, r2
 8003260:	095b      	lsrs	r3, r3, #5
 8003262:	2164      	movs	r1, #100	@ 0x64
 8003264:	fb01 f303 	mul.w	r3, r1, r3
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	00db      	lsls	r3, r3, #3
 800326c:	3332      	adds	r3, #50	@ 0x32
 800326e:	4a08      	ldr	r2, [pc, #32]	@ (8003290 <UART_SetConfig+0x2d4>)
 8003270:	fba2 2303 	umull	r2, r3, r2, r3
 8003274:	095b      	lsrs	r3, r3, #5
 8003276:	f003 0207 	and.w	r2, r3, #7
 800327a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4422      	add	r2, r4
 8003282:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003284:	e106      	b.n	8003494 <UART_SetConfig+0x4d8>
 8003286:	bf00      	nop
 8003288:	40011000 	.word	0x40011000
 800328c:	40011400 	.word	0x40011400
 8003290:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003294:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003298:	2200      	movs	r2, #0
 800329a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800329e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80032a2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80032a6:	4642      	mov	r2, r8
 80032a8:	464b      	mov	r3, r9
 80032aa:	1891      	adds	r1, r2, r2
 80032ac:	6239      	str	r1, [r7, #32]
 80032ae:	415b      	adcs	r3, r3
 80032b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80032b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80032b6:	4641      	mov	r1, r8
 80032b8:	1854      	adds	r4, r2, r1
 80032ba:	4649      	mov	r1, r9
 80032bc:	eb43 0501 	adc.w	r5, r3, r1
 80032c0:	f04f 0200 	mov.w	r2, #0
 80032c4:	f04f 0300 	mov.w	r3, #0
 80032c8:	00eb      	lsls	r3, r5, #3
 80032ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032ce:	00e2      	lsls	r2, r4, #3
 80032d0:	4614      	mov	r4, r2
 80032d2:	461d      	mov	r5, r3
 80032d4:	4643      	mov	r3, r8
 80032d6:	18e3      	adds	r3, r4, r3
 80032d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80032dc:	464b      	mov	r3, r9
 80032de:	eb45 0303 	adc.w	r3, r5, r3
 80032e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80032e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80032f2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80032f6:	f04f 0200 	mov.w	r2, #0
 80032fa:	f04f 0300 	mov.w	r3, #0
 80032fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003302:	4629      	mov	r1, r5
 8003304:	008b      	lsls	r3, r1, #2
 8003306:	4621      	mov	r1, r4
 8003308:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800330c:	4621      	mov	r1, r4
 800330e:	008a      	lsls	r2, r1, #2
 8003310:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003314:	f7fc ff6a 	bl	80001ec <__aeabi_uldivmod>
 8003318:	4602      	mov	r2, r0
 800331a:	460b      	mov	r3, r1
 800331c:	4b60      	ldr	r3, [pc, #384]	@ (80034a0 <UART_SetConfig+0x4e4>)
 800331e:	fba3 2302 	umull	r2, r3, r3, r2
 8003322:	095b      	lsrs	r3, r3, #5
 8003324:	011c      	lsls	r4, r3, #4
 8003326:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800332a:	2200      	movs	r2, #0
 800332c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003330:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003334:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003338:	4642      	mov	r2, r8
 800333a:	464b      	mov	r3, r9
 800333c:	1891      	adds	r1, r2, r2
 800333e:	61b9      	str	r1, [r7, #24]
 8003340:	415b      	adcs	r3, r3
 8003342:	61fb      	str	r3, [r7, #28]
 8003344:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003348:	4641      	mov	r1, r8
 800334a:	1851      	adds	r1, r2, r1
 800334c:	6139      	str	r1, [r7, #16]
 800334e:	4649      	mov	r1, r9
 8003350:	414b      	adcs	r3, r1
 8003352:	617b      	str	r3, [r7, #20]
 8003354:	f04f 0200 	mov.w	r2, #0
 8003358:	f04f 0300 	mov.w	r3, #0
 800335c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003360:	4659      	mov	r1, fp
 8003362:	00cb      	lsls	r3, r1, #3
 8003364:	4651      	mov	r1, sl
 8003366:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800336a:	4651      	mov	r1, sl
 800336c:	00ca      	lsls	r2, r1, #3
 800336e:	4610      	mov	r0, r2
 8003370:	4619      	mov	r1, r3
 8003372:	4603      	mov	r3, r0
 8003374:	4642      	mov	r2, r8
 8003376:	189b      	adds	r3, r3, r2
 8003378:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800337c:	464b      	mov	r3, r9
 800337e:	460a      	mov	r2, r1
 8003380:	eb42 0303 	adc.w	r3, r2, r3
 8003384:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003392:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003394:	f04f 0200 	mov.w	r2, #0
 8003398:	f04f 0300 	mov.w	r3, #0
 800339c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80033a0:	4649      	mov	r1, r9
 80033a2:	008b      	lsls	r3, r1, #2
 80033a4:	4641      	mov	r1, r8
 80033a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033aa:	4641      	mov	r1, r8
 80033ac:	008a      	lsls	r2, r1, #2
 80033ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80033b2:	f7fc ff1b 	bl	80001ec <__aeabi_uldivmod>
 80033b6:	4602      	mov	r2, r0
 80033b8:	460b      	mov	r3, r1
 80033ba:	4611      	mov	r1, r2
 80033bc:	4b38      	ldr	r3, [pc, #224]	@ (80034a0 <UART_SetConfig+0x4e4>)
 80033be:	fba3 2301 	umull	r2, r3, r3, r1
 80033c2:	095b      	lsrs	r3, r3, #5
 80033c4:	2264      	movs	r2, #100	@ 0x64
 80033c6:	fb02 f303 	mul.w	r3, r2, r3
 80033ca:	1acb      	subs	r3, r1, r3
 80033cc:	011b      	lsls	r3, r3, #4
 80033ce:	3332      	adds	r3, #50	@ 0x32
 80033d0:	4a33      	ldr	r2, [pc, #204]	@ (80034a0 <UART_SetConfig+0x4e4>)
 80033d2:	fba2 2303 	umull	r2, r3, r2, r3
 80033d6:	095b      	lsrs	r3, r3, #5
 80033d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80033dc:	441c      	add	r4, r3
 80033de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033e2:	2200      	movs	r2, #0
 80033e4:	673b      	str	r3, [r7, #112]	@ 0x70
 80033e6:	677a      	str	r2, [r7, #116]	@ 0x74
 80033e8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80033ec:	4642      	mov	r2, r8
 80033ee:	464b      	mov	r3, r9
 80033f0:	1891      	adds	r1, r2, r2
 80033f2:	60b9      	str	r1, [r7, #8]
 80033f4:	415b      	adcs	r3, r3
 80033f6:	60fb      	str	r3, [r7, #12]
 80033f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033fc:	4641      	mov	r1, r8
 80033fe:	1851      	adds	r1, r2, r1
 8003400:	6039      	str	r1, [r7, #0]
 8003402:	4649      	mov	r1, r9
 8003404:	414b      	adcs	r3, r1
 8003406:	607b      	str	r3, [r7, #4]
 8003408:	f04f 0200 	mov.w	r2, #0
 800340c:	f04f 0300 	mov.w	r3, #0
 8003410:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003414:	4659      	mov	r1, fp
 8003416:	00cb      	lsls	r3, r1, #3
 8003418:	4651      	mov	r1, sl
 800341a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800341e:	4651      	mov	r1, sl
 8003420:	00ca      	lsls	r2, r1, #3
 8003422:	4610      	mov	r0, r2
 8003424:	4619      	mov	r1, r3
 8003426:	4603      	mov	r3, r0
 8003428:	4642      	mov	r2, r8
 800342a:	189b      	adds	r3, r3, r2
 800342c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800342e:	464b      	mov	r3, r9
 8003430:	460a      	mov	r2, r1
 8003432:	eb42 0303 	adc.w	r3, r2, r3
 8003436:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	663b      	str	r3, [r7, #96]	@ 0x60
 8003442:	667a      	str	r2, [r7, #100]	@ 0x64
 8003444:	f04f 0200 	mov.w	r2, #0
 8003448:	f04f 0300 	mov.w	r3, #0
 800344c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003450:	4649      	mov	r1, r9
 8003452:	008b      	lsls	r3, r1, #2
 8003454:	4641      	mov	r1, r8
 8003456:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800345a:	4641      	mov	r1, r8
 800345c:	008a      	lsls	r2, r1, #2
 800345e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003462:	f7fc fec3 	bl	80001ec <__aeabi_uldivmod>
 8003466:	4602      	mov	r2, r0
 8003468:	460b      	mov	r3, r1
 800346a:	4b0d      	ldr	r3, [pc, #52]	@ (80034a0 <UART_SetConfig+0x4e4>)
 800346c:	fba3 1302 	umull	r1, r3, r3, r2
 8003470:	095b      	lsrs	r3, r3, #5
 8003472:	2164      	movs	r1, #100	@ 0x64
 8003474:	fb01 f303 	mul.w	r3, r1, r3
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	011b      	lsls	r3, r3, #4
 800347c:	3332      	adds	r3, #50	@ 0x32
 800347e:	4a08      	ldr	r2, [pc, #32]	@ (80034a0 <UART_SetConfig+0x4e4>)
 8003480:	fba2 2303 	umull	r2, r3, r2, r3
 8003484:	095b      	lsrs	r3, r3, #5
 8003486:	f003 020f 	and.w	r2, r3, #15
 800348a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4422      	add	r2, r4
 8003492:	609a      	str	r2, [r3, #8]
}
 8003494:	bf00      	nop
 8003496:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800349a:	46bd      	mov	sp, r7
 800349c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034a0:	51eb851f 	.word	0x51eb851f

080034a4 <memset>:
 80034a4:	4402      	add	r2, r0
 80034a6:	4603      	mov	r3, r0
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d100      	bne.n	80034ae <memset+0xa>
 80034ac:	4770      	bx	lr
 80034ae:	f803 1b01 	strb.w	r1, [r3], #1
 80034b2:	e7f9      	b.n	80034a8 <memset+0x4>

080034b4 <__libc_init_array>:
 80034b4:	b570      	push	{r4, r5, r6, lr}
 80034b6:	4d0d      	ldr	r5, [pc, #52]	@ (80034ec <__libc_init_array+0x38>)
 80034b8:	4c0d      	ldr	r4, [pc, #52]	@ (80034f0 <__libc_init_array+0x3c>)
 80034ba:	1b64      	subs	r4, r4, r5
 80034bc:	10a4      	asrs	r4, r4, #2
 80034be:	2600      	movs	r6, #0
 80034c0:	42a6      	cmp	r6, r4
 80034c2:	d109      	bne.n	80034d8 <__libc_init_array+0x24>
 80034c4:	4d0b      	ldr	r5, [pc, #44]	@ (80034f4 <__libc_init_array+0x40>)
 80034c6:	4c0c      	ldr	r4, [pc, #48]	@ (80034f8 <__libc_init_array+0x44>)
 80034c8:	f000 f818 	bl	80034fc <_init>
 80034cc:	1b64      	subs	r4, r4, r5
 80034ce:	10a4      	asrs	r4, r4, #2
 80034d0:	2600      	movs	r6, #0
 80034d2:	42a6      	cmp	r6, r4
 80034d4:	d105      	bne.n	80034e2 <__libc_init_array+0x2e>
 80034d6:	bd70      	pop	{r4, r5, r6, pc}
 80034d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80034dc:	4798      	blx	r3
 80034de:	3601      	adds	r6, #1
 80034e0:	e7ee      	b.n	80034c0 <__libc_init_array+0xc>
 80034e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80034e6:	4798      	blx	r3
 80034e8:	3601      	adds	r6, #1
 80034ea:	e7f2      	b.n	80034d2 <__libc_init_array+0x1e>
 80034ec:	08003610 	.word	0x08003610
 80034f0:	08003610 	.word	0x08003610
 80034f4:	08003610 	.word	0x08003610
 80034f8:	08003614 	.word	0x08003614

080034fc <_init>:
 80034fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034fe:	bf00      	nop
 8003500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003502:	bc08      	pop	{r3}
 8003504:	469e      	mov	lr, r3
 8003506:	4770      	bx	lr

08003508 <_fini>:
 8003508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800350a:	bf00      	nop
 800350c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800350e:	bc08      	pop	{r3}
 8003510:	469e      	mov	lr, r3
 8003512:	4770      	bx	lr
